from delia_parser import ast, types, pictures
from delia_parser.ast import Truncated
from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.convert_type import do_convert
from decimal import Decimal
from collections import namedtuple


Definition = namedtuple('definition', ['type', 'picture'])


class Assignments:

    def gen_Add(self, node):
        self.assignments(node, '+=')

    def gen_Subtract(self, node):
        self.assignments(node, '-=')

    def gen_Move(self, node):
        self.assignments(node, '=')

    def gen_Let(self, node):
        self.assignments(node, '=')

    def assignments(self, node, operator):

        conversion_type = node.conversion_type
        exp = node.exp
        echo = False if isinstance(node.echo, ast.NoEcho) else True

        if isinstance(conversion_type, Truncated):
            self.src.newline("with localcontext(truncateContext):")
            self.src.indent()

        # Expression are evaluated only one time in multiple assignation.
        # e.g. LET field.1, field.1 = expr
        if len(node.receiving_fields) > 1 and not isinstance(node.exp, (ast.Default, ast.Literal, ast.Id)):

            definition = Definition(type=exp.type, picture=exp.picture)
            temp = ast.Name('_temp')
            temp.definition = definition
            self.assign(temp, exp, '=')
            exp = temp

        for receiving_field in node.receiving_fields:

            self.assign(receiving_field, exp, operator)

            if echo:
                if isinstance(receiving_field.definition, (ast.Field, ast.Array)) or isinstance(receiving_field, ast.FlagReference):
                    if node.in_local_function_key:
                        self.frame_update_in_local_function_key(field_ref=receiving_field, exp=exp)
                    else:
                        self.frame_update_not_in_local_function_key(field_ref=receiving_field, exp=exp)

        if isinstance(conversion_type, Truncated):
            self.src.dedent()

    def assign(self, rcv, exp, operator):

        # Flags as BLINK, BOLD... are not supported.
        if isinstance(rcv, (ast.FlagName, ast.FlagReference,)):

            self.src.newline("pass #  [ CODEGEN ][ Deprecated ][ %s ]" % rcv.__class__.__name__)

        # Restore array slice to default.
        # e.g. LET ARRAY[1 TO 4] = DEFAULT
        # e.g. LET ARRAY = DEFAULT
        elif isinstance(exp, ast.Default) and isinstance(rcv.definition, ast.Array):

            self.assign_array_to_default(rcv, exp, operator)

        # Assign array to array.
        # e.g. LET ARRAY.1 = ARRAY.2
        # e.g. LET ARRAY.1[1 TO 4] = ARRAY.2[1 TO 4]
        elif isinstance(exp.definition, ast.Array) and isinstance(rcv.definition, ast.Array):

            self.assign_array_to_array(rcv, exp, operator)

        # Assign string slice.
        # e.g. LET SUBSTR(FIELD, 10) = 'TOTO'
        elif isinstance(rcv, ast.CallingFunction) and \
                str(rcv.name).lower() == 'substr':

            self.assign_substr(rcv, exp, operator)

        # Assign date attribute such as YEAR, MONTH or DAY.
        # e.g. LET DAY(date.1) = 31
        #  SUBTRACT MONTH(date.1) = 12
        #  ADD YEAR(date.1) = 1
        elif isinstance(rcv, ast.CallingFunction) \
                and str(rcv.name).lower() in ('year', 'month', 'day',):

            self.assign_date_attribute(rcv, exp, operator)

        else:

            # Assign _temp.
            # Use for multi-fonction assignement,
            # in order to evaluate the expression only one time.
            if isinstance(rcv, ast.Name) \
                    and str(rcv.value) == '_temp':
                self.src.stop_gen_locations()
                self.src.newline("_temp")

            # Store returning value inside a function
            # declared as FUNCTION <function_name> <parameters> AS <resulting_picture>
            # e.g. LET <function_name> = XXX
            elif isinstance(rcv.definition, ast.Function):
                self.src.newline("%s._result" % adl_name_to_py_name(rcv.definition.scope))

            # Assign variable.
            # e.g. LET field.1 = XXX
            elif isinstance(rcv, ast.Id):
                self.src.newline()
                self.visit(rcv)

            # Assign control.
            # e.g. LET USERS LANGUAGE = XXX
            elif isinstance(rcv, ast.LanguageControl):
                self.src.newline()
                self.visit(rcv)

            self.src.write(" %s " % operator)

            # Start the slice array.
            if isinstance(rcv, ast.ArrayId) \
                    and isinstance(rcv.index, (ast.ArrayIndexTo, ast.ArrayIndexAll)):
                self.src.write("[")

            self.assign_exp(rcv, exp, operator)

            # End the slice array.
            if isinstance(rcv, ast.ArrayId) \
                    and isinstance(rcv.index, (ast.ArrayIndexTo, ast.ArrayIndexAll)):

                if isinstance(rcv.index, ast.ArrayIndexTo):
                    upper_bound = rcv.index.upper
                    lower_bound = rcv.index.lower
                else:
                    upper_bound = rcv.array_definition.upper_bound
                    lower_bound = rcv.array_definition.lower_bound

                self.src.write("]")

                self.src.write(" * ")

                if (isinstance(lower_bound, ast.Literal) and
                        not isinstance(lower_bound, ast.ConstantRef) and
                        not lower_bound.conversion_types and
                        isinstance(upper_bound, ast.Literal) and
                        not isinstance(upper_bound, ast.ConstantRef) and
                        not upper_bound.conversion_types):
                    self.src.write("%d" % (int(str(upper_bound)) - int(str(lower_bound)) + 1))
                else:
                    self.src.write("(")
                    self.visit(upper_bound)
                    self.src.write(" - ")
                    self.visit(lower_bound)
                    self.src.write(" + 1")
                    self.src.write(")")
        self.src.start_gen_locations()

    def assign_substr(self, rcv, exp, operator):

        if operator != '=':
            raise Exception

        parameters = rcv.parameters
        self.src.newline()
        self.visit(parameters[0])
        self.src.write(" = ")
        if len(parameters) == 2:
            self.src.write("adl_replace_substr(")
            self.visit(parameters[0])
            self.src.write(", ")
            self.visit(exp)
            self.src.write(", ")
            self.visit(parameters[1])
            self.src.write(")")
        else:
            self.src.write("adl_replace_substr_with_count(")
            self.visit(parameters[0])
            self.src.write(", ")
            self.visit(exp)
            self.src.write(", ")
            self.visit(parameters[1])
            self.src.write(", ")
            self.visit(parameters[2])
            self.src.write(")")
        size = parameters[0].definition.picture.picture.size
        self.src.write(".ljust({size})[:{size}]".format(size=size))

    def assign_date_attribute(self, rcv, exp, operator):

        attribute = str(rcv.name).lower()
        field = rcv.parameters

        self.src.newline()
        self.visit(field)
        self.src.write(' = ')

        self.src.write("adl_date_at_%s" % attribute)
        self.src.write("(")
        self.visit(field)
        self.src.write(", ")

        if operator == '=':
            self.visit(exp)
        elif operator == '+=':
            self.visit(field)
            self.src.write(".%s" % attribute)
            self.src.write(" + ")
            self.visit(exp)
        elif operator == '-=':
            self.visit(field)
            self.src.write(".%s" % attribute)
            self.src.write(" - ")
            self.visit(exp)

        self.src.write(")")

    def assign_array_to_default(self, rcv, exp, operator):

        if operator != '=':
            raise Exception

        array_definition = rcv.definition
        array_name = adl_name_to_py_name(array_definition.name)
        py_array_name = adl_name_to_py_name(array_name)
        py_scope = adl_name_to_py_name(rcv.scope)
        check = array_definition.check
        lower_bound = array_definition.lower_bound
        upper_bound = array_definition.upper_bound

        self.src.newline("%s.%s.set_to_default" % (py_scope, py_array_name))
        self.src.write("(")
        if isinstance(rcv, ast.ArrayId):
            if isinstance(rcv.index, ast.ArrayIndexTo):
                self.src.write("lower_bound=")
                self.array_index(rcv.index.lower, check, lower_bound, upper_bound)
                self.src.write(", upper_bound=")
                self.array_index(rcv.index.upper, check, lower_bound, upper_bound, is_upper_bound=True)
            elif isinstance(rcv.index, ast.ArrayIndex) \
                    and not isinstance(rcv.index, ast.ArrayIndexAll):
                self.src.write("lower_bound=")
                self.array_index(rcv.index.index, check, lower_bound, upper_bound)
                self.src.write(", upper_bound=")
                self.array_index(rcv.index.index, check, lower_bound, upper_bound, is_upper_bound=True)
        self.src.write(")")

    def assign_array_to_array(self, rcv, exp, operator):

        if operator != '=':
            raise Exception
        array_definition = rcv.definition
        check = array_definition.check_subscripts
        lower_bound = array_definition.lower_bound
        upper_bound = array_definition.upper_bound
        py_array_dst_name = "%s.%s" % (adl_name_to_py_name(rcv.scope), adl_name_to_py_name(rcv.definition.name))
        py_array_src_name = "%s.%s" % (adl_name_to_py_name(exp.scope), adl_name_to_py_name(exp.definition.name))

        self.src.newline("%s.set_from_array(%s" % (py_array_dst_name, py_array_src_name))
        if isinstance(rcv, ast.ArrayId):
            if isinstance(rcv.index, ast.ArrayIndexTo):
                self.src.write(", lower_bound=")
                self.array_index(rcv.index.lower, check, lower_bound, upper_bound)
                self.src.write(", upper_bound=")
                self.array_index(rcv.index.upper, check, lower_bound, upper_bound, is_upper_bound=True)
            elif isinstance(rcv.index, ast.ArrayIndex) \
                    and not isinstance(rcv.index, ast.ArrayIndexAll):
                self.src.write(", lower_bound=")
                self.array_index(rcv.index.index, check, lower_bound, upper_bound)
                self.src.write(", upper_bound=")
                self.array_index(rcv.index.index, check, lower_bound, upper_bound, is_upper_bound=True)
        self.src.write(")")

    def assign_exp(self, rcv, exp, operator):

        if isinstance(exp, ast.Default):
            self.src.write(self.get_default_value(rcv))

        # LANGUAGE controls
        elif isinstance(rcv, ast.LanguageControl):
            # Digit separator (force to str instead of LiteralString)
            if isinstance(rcv, ast.DigitSeparator):
                self.src.write("str(")
                self.visit(exp)
                self.src.write(")")
            else:
                self.visit(exp)

        # Assign a string.
        elif rcv.type is types.String():

            rcv_picture = rcv.picture.picture
            exp_picture = exp.picture.picture

            if (isinstance(exp, ast.Literal) and
                    not isinstance(exp, ast.ConstantRef) and
                    not exp.conversion_types and
                    self.resolve(exp) == ''):

                assert(not isinstance(rcv_picture, pictures.UnknownPicture))
                self.src.write(self.add_String("{}".format(" " * rcv_picture.size)))

            else:

                self.visit(exp)

                if not isinstance(rcv_picture, pictures.UnknownPicture):
                    if isinstance(exp_picture, pictures.UnknownPicture) or (rcv_picture.size != exp_picture.size):
                        self.src.write(".ljust({size})[:{size}]".format(size=rcv_picture.size))

        # Assign a decimal.
        elif rcv.type is types.Decimal():

            if exp.type is types.Integer():
                if (isinstance(exp, ast.Literal) and
                        not isinstance(exp, ast.ConstantRef) and
                        not exp.conversion_types):
                    self.src.write(self.add_Decimal(exp.value))
                else:
                    self.src.write("Decimal(")
                    self.visit(exp)
                    self.src.write(")")
            elif exp.type is types.Decimal():
                self.visit(exp)

            # Need to remove some decimal digits
            rcv_picture = rcv.picture.picture
            if not isinstance(rcv_picture, pictures.UnknownPicture):
                _, decimal_digits = rcv.picture.picture._count_digit()
                quantizer = str(Decimal(10) ** (-decimal_digits))
                self.src.write(".quantize({})".format(self.add_Decimal(quantizer)))

        # Assign an integer.
        elif rcv.type is types.Integer():

            if exp.type is types.Decimal():
                self.src.write("int(")
                self.visit(exp)
                self.src.write(".quantize(1)")
                self.src.write(")")

            elif exp.type is types.Integer():
                self.visit(exp)

        elif rcv.type is types.Date():

            if exp.type == types.Date():
                self.visit(exp)

            elif isinstance(exp.type, types.Numeric) and operator in ('-=', '+='):
                self.src.write("_timedelta(days=")
                if not isinstance(exp.type, types.Integer):
                    self.src.write("int(")
                self.visit(exp)
                if not isinstance(exp.type, types.Integer):
                    self.src.write(")")
                self.src.write(")")
