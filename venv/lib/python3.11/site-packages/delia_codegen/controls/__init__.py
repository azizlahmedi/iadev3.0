from delia_parser import ast, types, pictures
from delia_codegen.controls.gen_languages import LanguageControls
from delia_codegen.controls.gen_pauses import Pauses
from delia_codegen.convert_type import do_convert
from delia_codegen.utils import adl_name_to_py_name
from collections import OrderedDict


class Controls(Pauses,
               LanguageControls):

    def gen_ControlsForProcedure(self, node):
        # Nothing to do, resolved by the annotator.
        pass

    def gen_Abort(self, node):
        self.output_items(node.output_list, "_abort")

    def gen_Return(self, node):

        self.src.newline("_returning(")
        self.src.write("[")

        returning_parameters = node.returning_parameters
        using_clauses = node.using_clauses
        using_field = OrderedDict()
        for using_clause in using_clauses:
            using_field[using_clause.parametre.definition] = using_clause.data_expression

        for param in returning_parameters:

            using_expression = using_field.get(param, None)
            if using_expression:

                # 1. First generate the expression
                # 2. Then convert the expression to the returning parameters.
                # 3. Finally convert the result to string.

                # 2.
                from_type = using_expression.type
                from_pict = using_expression.picture.picture

                to_type = param.definition.type
                to_pict = param.definition.picture.picture

                convert_function = []
                convert_function = do_convert(self,
                                              to_type,
                                              to_pict,
                                              from_type,
                                              from_pict,
                                              convert_function)

                # 3.
                from_type = param.definition.type
                from_pict = param.definition.picture.picture

                to_type = types.String()
                to_pict = pictures.UnknownPicture()

                convert_function = do_convert(self,
                                              to_type,
                                              to_pict,
                                              from_type,
                                              from_pict,
                                              convert_function)

                for (header, _) in reversed(convert_function):
                    if header is not None:
                        self.src.write(header)

                # 1.
                self.visit(using_expression)

                for (_, footer) in convert_function:
                    if footer is not None:
                        self.src.write(footer)

            else:

                # Stringify ouptut parameters
                from_type = param.definition.type
                from_pict = param.definition.picture.picture

                to_type = types.String()
                to_pict = pictures.UnknownPicture()

                convert_function = []
                convert_function = do_convert(self,
                                              to_type,
                                              to_pict,
                                              from_type,
                                              from_pict,
                                              convert_function)

                for (header, _) in reversed(convert_function):
                    if header is not None:
                        self.src.write(header)

                self.src.write("procedure.%s" % adl_name_to_py_name(param.definition.name))

                for (_, footer) in convert_function:
                    if footer is not None:
                        self.src.write(footer)

            if param != returning_parameters[-1]:
                self.src.write(", ")

        self.src.write("]")
        self.src.write(")")

    def gen_Logout(self, node):
        self.src.newline("_logout()")

    def gen_RunStmt(self, node):
        proc_name = adl_name_to_py_name(node.name)
        calling_parameters = node.calling_parameters
        accepting_parameters = node.accepting_parameters

        if proc_name not in ['zzzzzz'] + self.metadata['CALLED_PROCEDURES']:
            self.metadata['CALLED_PROCEDURES'].append(proc_name)

        if len(accepting_parameters) > 0:
            self.src.newline("_return = ")
        else:
            self.src.newline()

        self.src.write("_rrun('%s', " % proc_name)

        self.src.write("[")

        for param in calling_parameters:

            # Implicit conversion of input parameters
            from_type = param.type
            from_pict = param.picture.picture

            to_type = types.String()
            to_pict = pictures.UnknownPicture()

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function)

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            self.visit(param)

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

            self.src.write(", ")

        self.src.write("]")

        self.src.write(")")

        for pos, param in enumerate(accepting_parameters):

            # Implicit conversion of returned parameters
            self.src.newline()
            self.visit(param)
            self.src.write(" = ")

            to_type = param.type
            to_pict = param.picture.picture

            from_type = types.String()
            from_pict = pictures.UnknownPicture()

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function,
                                          strict=False)

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            self.src.write("_return[%d]" % pos)

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

            # FIELD.UPDATES
            if node.in_local_function_key:
                self.frame_update_in_local_function_key(field_ref=param)
            else:
                self.frame_update_not_in_local_function_key(field_ref=param)
