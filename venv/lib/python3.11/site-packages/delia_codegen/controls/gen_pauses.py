from delia_parser import types, pictures
from delia_codegen.convert_type import do_convert


class Pauses:

    def pause(self, node, for_input=False):

        if for_input:
            self.src.write("_pause_for_input(")
        else:
            self.src.newline("_pause(")

        self.src.write("sleeptime=")

        if node.exp.type is not types.Integer():

            from_pict = node.exp.picture.picture
            from_type = node.exp.type

            to_pict = pictures.UnknownPicture()
            to_type = types.Integer()

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function)

            for header, __, in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            self.visit(node.exp)

            for __, footer, in convert_function:
                if footer is not None:
                    self.src.write(footer)

        else:

            self.visit(node.exp)

        self.src.write(")")

    def gen_Pause(self, node):
        self.pause(node, for_input=False)

    def gen_PauseForInput(self, node):
        self.src.newline("if ")
        self.pause(node, for_input=True)
        self.src.write(":")

        self.src.indent()
        self.visit(node.then_else_clause.then_stmts)
        self.src.dedent()

        if node.then_else_clause.else_stmts is not None:
            self.src.newline("else:")
            self.src.indent()
            self.visit(node.then_else_clause.else_stmts)
            self.src.dedent()
