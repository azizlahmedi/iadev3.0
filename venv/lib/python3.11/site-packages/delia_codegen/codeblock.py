# -*- coding: utf-8 -*-
import logging
from enum import Enum
from io import StringIO
from delia_commons.singleton import Singleton

logger = logging.getLogger('delia.codegen')


class AutoNumber(Enum):
    def __new__(cls):
        value = len(cls.__members__) + 1
        obj = object.__new__(cls)
        obj._value_ = value
        return obj


class CodeBlockNames(AutoNumber):
    ROOT = ()
    HEADER = ()
    NS = ()
    BODY = ()
    WRAPPING = ()

    RECEIVING_PARAMS_VALIDITY = ()

    METADATA = ()

    LITERAL = ()
    LOCAL = ()
    CONSTANT = ()
    CONSTANT_NS = ()

    ARRAY = ()
    FIELD = ()
    DATA_DESC = ()

    REPORT_DECLARATION = ()
    REPORT_INSTANCE = ()

    CONTROL = ()

    FRAME = ()
    RELATION = ()
    SOURCE = ()

    FLI = ()
    FUNCTION = ()
    FUNCTION_NS = ()
    FUNCTION_KEYS = ()
    FUNCTION_KEYS_DICT = ()

    RELATION_LOCAL = ()
    INSERT = ()
    ALTER = ()
    DELETE = ()
    DELETE_VIA_KEY = ()
    SELECT = ()
    SELECT_JOIN = ()
    SELECT_VIA_KEY = ()
    FOR_EACH = ()
    FOR_EACH_JOIN = ()


class Token(Singleton):
    pass


class Indent(Token):
    pass


class Dedent(Token):
    pass


class Newline:
    def __init__(self, locations):
        self.locations = locations


class Locations(Token):
    locations = None

    def set_locations(self, locations):
        self.locations = locations

    def __repr__(self):
        return str(self.locations)


class CodeBlock:

    def __init__(self, tab=4 * " "):
        self.code = []
        self.tab = tab
        self._gen_location = True

    def stop_gen_locations(self):
        self._gen_location = False

    def start_gen_locations(self):
        self._gen_location = True
        Locations().locations = None

    def newline(self, string="", no_locations=False):
        if no_locations or not self._gen_location or string.lstrip().startswith('#'):
            locations = None
        else:
            locations = Locations().locations

        self.code.append(Newline(locations))
        self.code.append(string)

    def write(self, string):
        self.code += string

    def indent(self):
        self.code.append(Indent())

    def dedent(self):
        self.code.append(Dedent())

    def add(self, cb):
        self.code.append(cb)

    def set_locations(self, locations):
        pass

    def flatten(self, level=0, buffer=None, newline=False):
        if buffer is None:
            buffer = StringIO()

        for line in self.code:

            if isinstance(line, Newline):
                buffer.write("\n")
                newline = True

            elif isinstance(line, Indent):
                level += 1

            elif isinstance(line, Dedent):
                level -= 1

            elif isinstance(line, str):
                if line != '':
                    if newline:
                        buffer.write(level * self.tab + line)
                        newline = False
                    else:
                        buffer.write(line)

            elif isinstance(line, CodeBlock):
                line.flatten(level, buffer, newline)

        return buffer.getvalue()

    def eq_locations(self, loc1, loc2):
        return loc1[0] == loc2[0] and loc1[2] == loc2[2]

    def gen_mapping(self, mapper, pylineno=1, last_locations=None):
        for line in self.code:
            if isinstance(line, Newline):
                pylineno += 1
                if line.locations and (last_locations is None or not self.eq_locations(last_locations, line.locations)):
                    mapper.add(line.locations, pylineno)
                last_locations = line.locations
            elif isinstance(line, CodeBlock):
                pylineno = line.gen_mapping(mapper, pylineno, last_locations)
        return pylineno

    def isEmpty(self):
        return True if self.code == [] else False


if __name__ == "__main__":

    cb = CodeBlock(tab="°")
    cb2 = CodeBlock(tab="°")

    cb.newline("def toto():")
    cb.indent()
    cb.add(cb2)
    cb.dedent()

    cb2.newline("C1 = 0")
    cb2.newline("C2 = 1")
    cb2.newline()
    cb2.write("C3 = ")
    cb2.write("2")
    cb2.newline()
    cb2.write("def hello():")
    cb2.indent()
    cb2.newline("pass")
    cb2.dedent()

    print(cb.flatten())
