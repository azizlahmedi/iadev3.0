from delia_codegen.utils import adl_name_to_py_name


class Labels:

    def gen_LabelStmt(self, node):
        label_name = adl_name_to_py_name(node.label.name)
        stmts = node.stmts
        self.src.newline(f"{label_name} = Label('{label_name}')")
        self.src.newline(f"def _{label_name}_fct():")
        self.src.indent()
        self.visit(stmts)
        self.src.newline(f"return {label_name}.leave()")
        self.src.dedent()
        self.src.newline(f"while True: #Loop Label {label_name}")
        self.src.indent()
        self.src.newline(f"_{label_name}_result = _{label_name}_fct() #check Label {label_name}_fct result")
        self.src.newline(f"if {label_name}.outside_current_scope(_{label_name}_result):")
        self.src.indent()
        self.src.newline(f"return {label_name}.dispatch(_{label_name}_result)")
        self.src.dedent()
        self.src.newline(f"elif {label_name}.tofinish(_{label_name}_result):")
        self.src.indent()
        self.src.newline(f"break")
        self.src.dedent()
        self.src.dedent()

    def gen_Repeat(self, node):
        label_name = adl_name_to_py_name(node.label_name)
        for report in node.report_names:
            self.report_end(report)
        self.src.newline(f"return {label_name}.repeat()")

    def gen_Finish(self, node):
        label_name = adl_name_to_py_name(node.label_name)
        for report in node.report_names:
            self.report_end(report)
        self.src.newline(f"return {label_name}.finish()")
