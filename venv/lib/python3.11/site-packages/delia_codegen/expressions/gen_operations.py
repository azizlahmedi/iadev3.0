from delia_parser import types
from delia_codegen.convert_type import convert_type


class Operation:

    def operation(self, node, operator):

        self.src.write("(")
        self.visit(node.left)
        self.src.write(" %s " % operator)
        self.visit(node.right)
        self.src.write(")")

    @convert_type
    def gen_Mod(self, node):

        self.src.write("adl_modulo(")
        self.visit(node.left)
        self.src.write(", ")
        self.visit(node.right)
        self.src.write(")")

    @convert_type
    def gen_Pow(self, node):

        self.src.write("(")

        if isinstance(node.left.type, types.Integer):
            self.src.write("Decimal(")
            self.visit(node.left)
            self.src.write(")")
        else:
            self.visit(node.left)

        self.src.write(" ** ")

        if isinstance(node.right.type, types.Integer):
            self.src.write("Decimal(")
            self.visit(node.right)
            self.src.write(")")
        else:
            self.visit(node.right)

        self.src.write(")")

    @convert_type
    def gen_Div(self, node):

        self.src.write("(")

        if isinstance(node.left.type, types.Integer):
            self.src.write("Decimal(")
            self.visit(node.left)
            self.src.write(")")
        else:
            self.visit(node.left)

        self.src.write(" / ")

        if isinstance(node.right.type, types.Integer):
            self.src.write("Decimal(")
            self.visit(node.right)
            self.src.write(")")
        else:
            self.visit(node.right)

        self.src.write(")")

    @convert_type
    def gen_FloorDiv(self, node):
        self.src.write("int(")
        self.visit(node.left)
        self.src.write(" // ")
        self.visit(node.right)
        self.src.write(")")

    @convert_type
    def gen_Mul(self, node):

        if isinstance(node.left.type, types.String) and isinstance(node.right.type, types.Numeric):
            self.src.write("(")
            self.visit(node.left)
            self.src.write(" * ")

            if not isinstance(node.right.type, types.Integer):
                self.src.write("int(")

            self.src.write("abs(")

            self.visit(node.right)

            self.src.write(")")

            if not isinstance(node.right.type, types.Integer):
                self.src.write(")")

            self.src.write(")")

        elif isinstance(node.left.type, types.Numeric) and isinstance(node.right.type, types.String):
            self.src.write("(")

            if not isinstance(node.left.type, types.Integer):
                self.src.write("int(")

            self.src.write("abs(")

            self.visit(node.left)

            self.src.write(")")

            if not isinstance(node.left.type, types.Integer):
                self.src.write(")")

            self.src.write(" * ")
            self.visit(node.right)
            self.src.write(")")

        else:
            self.operation(node, "*")

    @convert_type
    def gen_Plus(self, node):

        if isinstance(node.left.type, types.Date) and isinstance(node.right.type, types.Numeric):
            self.src.write("(")
            self.visit(node.left)
            self.src.write(" + ")
            self.src.write("_timedelta(days=(")
            if not isinstance(node.right.type, types.Integer):
                self.src.write("int(")
            self.visit(node.right)
            if not isinstance(node.right.type, types.Integer):
                self.src.write(")")
            self.src.write(")")
            self.src.write(")")
            self.src.write(")")

        elif isinstance(node.left.type, types.Numeric) and isinstance(node.right.type, types.Date):
            self.src.write("(")
            self.src.write("_timedelta(days=(")
            if not isinstance(node.left.type, types.Integer):
                self.src.write("int(")
            self.visit(node.left)
            if not isinstance(node.left.type, types.Integer):
                self.src.write(")")
            self.src.write(")")
            self.src.write(")")
            self.src.write(" + ")
            self.visit(node.right)
            self.src.write(")")

        else:
            self.operation(node, "+")

    @convert_type
    def gen_Minus(self, node):

        if isinstance(node.left.type, types.Date) and isinstance(node.right.type, types.Numeric):
            self.src.write("(")
            self.visit(node.left)
            self.src.write(" - ")
            self.src.write("_timedelta(days=(")
            if not isinstance(node.right.type, types.Integer):
                self.src.write("int(")
            self.visit(node.right)
            if not isinstance(node.right.type, types.Integer):
                self.src.write(")")
            self.src.write(")")
            self.src.write(")")
            self.src.write(")")

        elif isinstance(node.left.type, types.Date) and isinstance(node.right.type, types.Date):
            self.src.write("int(")
            self.operation(node, "-")
            self.src.write(".days)")

        else:
            self.operation(node, "-")

    @convert_type
    def gen_Uplus(self, node):
        self.visit(node.right)

    @convert_type
    def gen_Uminus(self, node):
        self.src.write("-")
        self.visit(node.right)
