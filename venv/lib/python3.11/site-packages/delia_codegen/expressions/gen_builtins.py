from delia_codegen.convert_type import (
    convert_type,
    do_convert,
)
from delia_codegen.utils import adl_name_to_py_name
from delia_parser import ast, types, pictures


class Builtin:

    runtimeBuiltinDict = {"abs": "abs",
                          "week.day": "adl_date_week_day",
                          "first.day": "adl_date_first_day",
                          "last.day": "adl_date_last_day",
                          "today": "adl_info_today",
                          "time": "adl_info_time",
                          "cpu.seconds": "adl_info_cpu_seconds",
                          }

    runtimeMethodDict = {"trim": "rstrip()",
                         "left.trim": "lstrip()",
                         "lower.case": "lower()",
                         "upper.case": "upper()",
                         "day": "day",
                         "month": "month",
                         "year": "year",
                         }

    @convert_type
    def gen_CallingFunction(self, node):
        function_name = str(node.name).lower()
        parameters = node.parameters

        if function_name in self.runtimeBuiltinDict:
            self.src.write("%s(" % self.runtimeBuiltinDict[function_name])
            if len(parameters) > 0:
                self.visit(parameters)
            self.src.write(")")

        elif function_name in self.runtimeMethodDict:
            self.visit(parameters)
            if not node.skip:
                self.src.write(".%s" % self.runtimeMethodDict[function_name])

        elif function_name == "size":
            param = node.parameters[0]
            param_type = param.type

            if param.definition:
                param_picture = param.definition.picture.picture
            else:
                param_picture = param.picture.picture

            if param_type in (types.Integer(), types.Decimal()):
                if isinstance(param_picture, pictures.UnknownPicture):
                    size = 31
                else:
                    size = param_picture.size
                self.src.write("%d" % size)

            elif param_type is types.Date():

                if isinstance(param_picture, pictures.UnknownPicture):
                    self.src.write(str(self.get_date_default_size()))

                elif param_picture.is_size_variable():
                    self.src.write("len(adl_date_format(")
                    self.visit(param)
                    self.src.write(", ")
                    self.src.write(param_picture.to_parameters(ignore_ws=False))
                    self.src.write("))")

                else:
                    self.src.write("%d" % param_picture.size)

            elif param_type is types.String():

                if isinstance(param_picture, pictures.UnknownPicture):
                    self.src.write("len(")
                    self.visit(param)
                    self.src.write(")")
                else:
                    self.src.write("%d" % param_picture.size)

        elif function_name == "position":
            if len(parameters) == 2:
                self.src.write("adl_find_substr(")
                self.visit(parameters[0])
                self.src.write(", ")
                self.visit(parameters[1])
                self.src.write(")")
            else:
                self.src.write("adl_find_substr_with_start(")
                self.visit(parameters[0])
                self.src.write(", ")
                self.visit(parameters[1])
                self.src.write(", ")
                self.visit(parameters[2])
                self.src.write(")")

        elif function_name == "substr":
            if len(parameters) == 2:
                self.src.write("adl_extract_substr(")
                self.visit(parameters[0])
                self.src.write(", ")
                self.visit(parameters[1])
                self.src.write(")")
            else:
                self.src.write("adl_extract_substr_with_count(")
                self.visit(parameters[0])
                self.src.write(", ")
                self.visit(parameters[1])
                self.src.write(", ")
                self.visit(parameters[2])
                self.src.write(")")

        elif function_name == "next.date":
            if isinstance(parameters[0], ast.Monday):
                day = 'monday'
            elif isinstance(parameters[0], ast.Tuesday):
                day = 'tuesday'
            elif isinstance(parameters[0], ast.Wednesday):
                day = 'wednesday'
            elif isinstance(parameters[0], ast.Thursday):
                day = 'thursday'
            elif isinstance(parameters[0], ast.Friday):
                day = 'friday'
            elif isinstance(parameters[0], ast.Saturday):
                day = 'saturday'
            elif isinstance(parameters[0], ast.Sunday):
                day = 'sunday'
            self.src.write("adl_date_next_%s(" % day)
            self.visit(parameters[1])
            self.src.write(")")

        elif function_name in ("max", "min"):

            to_cast_in_dec = False
            if node.basic_type is types.Decimal():
                if any(param.type is not types.Decimal() for param in node.parameters):
                    to_cast_in_dec = True
            if to_cast_in_dec:
                self.src.write("Decimal(")

            nb_parameters = len(parameters)
            self.src.write("%s(" % function_name)
            i = 0
            while i < nb_parameters - 1:
                self.visit(parameters[i])
                self.src.write(", ")
                i += 1
            if i == nb_parameters - 1:
                self.visit(parameters[i])
            self.src.write(")")

            if to_cast_in_dec:
                self.src.write(")")

        elif function_name == "length":
            self.src.write("len(")
            self.visit(parameters)
            self.src.write(".rstrip())")

        elif function_name in ("largest", "smallest"):

            param = node.parameters[0]
            param_type = param.type
            param_picture = param.definition.picture.picture

            if param_type is types.Date():

                if function_name == "smallest":
                    self.src.write(self.get_date_min())
                else:
                    self.src.write(self.get_date_max())

            elif param_type is types.Decimal():

                if function_name == "smallest":
                    if isinstance(param_picture, pictures.UnknownPicture):
                        smallest_value = '-' + '.'.join(('9' * 15, '9' * 10))
                    else:
                        smallest_value = param_picture.get_smallest()
                    self.src.write(self.add_Decimal(smallest_value))
                else:
                    if isinstance(param_picture, pictures.UnknownPicture):
                        largest_value = '.'.join(('9' * 15, '9' * 10))
                    else:
                        largest_value = param_picture.get_largest()
                    self.src.write(self.add_Decimal(largest_value))

            elif param_type in (types.Integer(), types.String()):

                if function_name == "smallest":
                    self.src.write(param_picture.get_smallest())
                else:
                    self.src.write(param_picture.get_largest())

        elif function_name == "sqrt":

            self.src.write("adl_sqrt(")
            self.visit(node.parameters[0])
            self.src.write(")")

        elif function_name == "count":
            relation = parameters[0].name
            relation_py_name = adl_name_to_py_name(relation)
            self.src.write("_relations['{}'].count()".format(relation_py_name))

        elif function_name in ("user.name", "who",):
            self.src.write("self.user_name")
            self.src.write(".ljust({size})[:{size}]".format(size=node.basic_picture.size))

        elif function_name == "get.nom.champ":
            if isinstance(parameters[0], ast.ArrayId) or not isinstance(parameters[0].definition, ast.Field):
                self.src.write('""')
            else:
                self.src.write('"{champ}"'.format(champ=str(parameters[0].name).upper()))
            self.src.write(".ljust({size})[:{size}]".format(size=node.basic_picture.size))

        elif function_name == "floordiv":
            self.src.write("int(")
            self.visit(parameters[0])
            self.src.write(" // ")
            self.visit(parameters[1])
            self.src.write(")")

        else:

            func_name = adl_name_to_py_name(node.name)

            receiving_parameters = node.definition.receiving_parameters

            self.src.write("%s(" % func_name)

            max_param = len(parameters) - 1

            for pos, param in enumerate(parameters):

                # Implicit conversion of input parameters
                from_type = param.type
                from_pict = param.picture.picture

                to_type = receiving_parameters[pos].definition.type
                to_pict = receiving_parameters[pos].definition.picture.picture

                convert_function = []
                convert_function = do_convert(self,
                                              to_type,
                                              to_pict,
                                              from_type,
                                              from_pict,
                                              convert_function)

                for (header, _) in reversed(convert_function):
                    if header is not None:
                        self.src.write(header)

                self.visit(param)

                for (_, footer) in convert_function:
                    if footer is not None:
                        self.src.write(footer)

                if pos != max_param:
                    self.src.write(", ")

            self.src.write(")")
