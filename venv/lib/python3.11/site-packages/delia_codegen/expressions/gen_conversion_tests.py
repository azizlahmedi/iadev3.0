from delia_parser import types, pictures
from decimal import Decimal


class ConversionTest:

    def str_is_int(self, node, is_picture):

        if isinstance(is_picture, pictures.UnknownPicture):

            self.src.write("adl_test_str_is_dec_lz(")
            self.visit(node)
            self.src.write(", %s" % self.get_thousand_sep_parameter())
            self.src.write(", %s" % self.get_decimal_sep_parameter())
            self.src.write(")")

        else:

            total_digits, decimal_digits = is_picture.get_digits()
            integer_digits = total_digits - decimal_digits

            self.src.write("adl_test_str_is_int(")
            self.visit(node)

            self.src.write(", %s" % self.get_thousand_sep_parameter())
            self.src.write(", %s" % self.get_decimal_sep_parameter())

            self.src.write(", integer_max=%d" % integer_digits)
            if is_picture._get_sign() == 1:
                self.src.write(", is_positive=True")

            empty_is_default = is_picture.empty_is_default()
            if empty_is_default:
                self.src.write(", empty_is_default=True")

            self.src.write(")")

    def str_is_dec(self, node, is_picture):

        if isinstance(is_picture, pictures.UnknownPicture):

            self.src.write("adl_test_str_is_dec_lz(")
            self.visit(node)
            self.src.write(", %s" % self.get_thousand_sep_parameter())
            self.src.write(", %s" % self.get_decimal_sep_parameter())
            self.src.write(")")

        else:

            total_digits, decimal_digits = is_picture.get_digits()
            integer_digits = total_digits - decimal_digits

            self.src.write("adl_test_str_is_dec(")
            self.visit(node)

            self.src.write(", %s" % self.get_thousand_sep_parameter())
            self.src.write(", %s" % self.get_decimal_sep_parameter())

            self.src.write(", integer_max=%d" % integer_digits)
            self.src.write(", decimal_max=%d" % decimal_digits)
            if is_picture._get_point() == 'V':
                self.src.write(", decimal_pos=%d" % decimal_digits)

            thousand_sep_count = is_picture.picture.count(',')
            self.src.write(", thousand_sep_count=%d" % thousand_sep_count)

            if is_picture._get_sign() == 1:
                self.src.write(", is_positive=True")

            empty_is_default = is_picture.empty_is_default()
            if empty_is_default:
                self.src.write(", empty_is_default=True")

            self.src.write(")")

    def str_is_date(self, node, is_picture):

        self.src.write("adl_test_str_is_date(")
        self.visit(node)
        self.src.write(", ")

        if isinstance(is_picture, pictures.UnknownPicture):
            normal_form = self.get_date_default_fmt()
            empty_is_default = False
        else:
            normal_form = is_picture.normal_form()
            empty_is_default = is_picture.empty_is_default()

        self.src.write("'%s'" % normal_form.replace('_', ''))

        if empty_is_default:
            self.src.write(", empty_is_default=True")

        self.src.write(")")

    def int_is_num(self, node, is_picture):

        if isinstance(is_picture, pictures.UnknownPicture):
            self.src.write("True")

        else:
            total_digits, decimal_digits = is_picture.get_digits()
            integer_digits = total_digits - decimal_digits
            self.src.write("adl_test_int_is_num(")
            self.visit(node)
            self.src.write(", integer_max=%d" % integer_digits)
            if is_picture._get_sign() == 1:
                self.src.write(", is_positive=True")
            self.src.write(")")

    def dec_is_num(self, node, is_picture):

        if isinstance(is_picture, pictures.UnknownPicture) or \
                isinstance(node.picture.picture, pictures.UnknownPicture):
            self.src.write("True")

        else:
            total_digits, decimal_digits = is_picture.get_digits()
            integer_digits = total_digits - decimal_digits
            self.src.write("adl_test_dec_is_num(")

            self.visit(node)
            quantizer = str(Decimal(10) ** (-decimal_digits))
            self.src.write(".quantize({})".format(
                self.add_Decimal(quantizer)))

            self.src.write(", integer_max=%s" % integer_digits)
            if is_picture._get_sign() == 1:
                self.src.write(", is_positive=True")
            self.src.write(")")

    def num_is_str(self, node, is_picture):

        picture = node.picture.picture

        if isinstance(picture, pictures.UnknownPicture):
            self.src.write("adl_test_dec_is_str_lz(")
            self.visit(node)
            self.src.write(", character_max=%d" % is_picture.size)
            self.src.write(")")

        else:
            adl_picture = picture.picture

            # TODO: use picture parameters instead of analyze ADL picture.
            info_str_count = 0
            if '+' in adl_picture:
                info_str_count += 1
            if '-' in adl_picture:
                info_str_count += 1
            if '$' in adl_picture:
                info_str_count += 1
            if '(' in adl_picture:
                info_str_count += 2
            if 'DB' in adl_picture:
                info_str_count += 2
            if 'CR' in adl_picture:
                info_str_count += 2

            thousand_sep_count = adl_picture.count(',')

            parameters = picture.to_parameters()
            mandatory_decimal = True if 'trailing_zeros' in parameters else False
            if mandatory_decimal:
                mandatory_integer = False
            else:
                mandatory_integer = True if 'leading_zeros' in parameters else False

            if isinstance(node.type, types.Integer):
                self.src.write("adl_test_int_is_str(")
            elif isinstance(node.type, types.Decimal):
                self.src.write("adl_test_dec_is_str(")

            self.visit(node)

            self.src.write(", character_max=%d" % is_picture.size)
            self.src.write(", info_str_count=%d" % info_str_count)
            self.src.write(", thousand_sep_count=%d" % thousand_sep_count)

            # mandatory_integer and mandatory_decimal no more used by runtime >= 1.0.9 (SUPPDELIA-83)
            # TODO: delete on next compatibility version, i.e. when compatibility version >= 2
            if isinstance(node.type, types.Decimal):
                if mandatory_integer:
                    self.src.write(", mandatory_integer=True")
                if mandatory_decimal:
                    self.src.write(", mandatory_decimal=True")

            self.src.write(")")

    def num_is_date(self, node, is_picture):
        self.src.write("adl_test_num_is_date(")
        self.visit(node)
        self.src.write(")")

    def date_is_num(self, node, is_picture):

        if isinstance(is_picture, pictures.UnknownPicture):
            self.src.write("True")

        else:
            total_digits, decimal_digits = is_picture.get_digits()
            integer_digits = total_digits - decimal_digits
            self.src.write("adl_test_date_is_num(")
            self.visit(node)
            self.src.write(", integer_max=%d" % integer_digits)
            self.src.write(")")

    def gen_Is(self, node):
        left = node.left
        right = node.right
        left_type = left.type
        right_type = right.type

        left_picture = left.picture.picture
        right_picture = right.picture.picture

        if (left_type == right_type and
                isinstance(left_picture, pictures.UnknownPicture) and
                isinstance(right_picture, pictures.UnknownPicture)):
            self.src.write("True")

        elif isinstance(left_type, types.String):

            if isinstance(right_type, types.String):
                self.src.write("True")

            elif isinstance(right_type, types.Date):
                self.str_is_date(left, right_picture)

            elif isinstance(right_type, types.Integer):
                self.str_is_int(left, right_picture)

            elif isinstance(right_type, types.Decimal):
                self.str_is_dec(left, right_picture)

        elif isinstance(left_type, types.Numeric):

            if isinstance(right_type, types.Date):
                self.num_is_date(left, right_picture)

            elif isinstance(right_type, types.String):
                self.num_is_str(left, right_picture)

            elif isinstance(right_type, types.Numeric):

                if isinstance(left_type, types.Integer):
                    self.int_is_num(left, right_picture)

                elif isinstance(left_type, types.Decimal):
                    self.dec_is_num(left, right_picture)

        elif isinstance(left_type, types.Date):

            if isinstance(right_type, types.Date):
                self.src.write("True")

            elif isinstance(right_type, types.String):
                self.src.write("True")

            elif isinstance(right_type, types.Numeric):
                self.date_is_num(left, right_picture)
