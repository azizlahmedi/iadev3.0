from functools import wraps
from delia_parser import types, pictures
from decimal import Decimal


def do_convert(self
               , to_type
               , to_pict
               , from_type
               , from_pict
               , convert_function=[]
               , strict=True
               , forced=False
               , default_decimal_sep=False):

    assert(to_pict)
    assert(from_pict)

    def get_thousand_sep_parameter():
        return "thousand_sep=procedure._digit_separator[0]"

    def get_decimal_sep_parameter():
        return "decimal_sep=procedure._digit_separator[1]"

    if to_type is types.Date():

        if from_type is types.String():

            if not isinstance(to_pict, pictures.UnknownPicture):
                parameters = to_pict.to_parameters(ignore_ws=True)
            else:
                parameters = '"{}"'.format(self.get_date_default_fmt())

            convert_function.append(("adl_date_parse(", ", %s)" % parameters))

        elif from_type is types.Decimal():
            convert_function.append((None, ".quantize(1)"))
            convert_function.append(("_timedelta(days=int(", ")) + %s" % self.get_date_min()))

        elif from_type is types.Integer():
            convert_function.append(("_timedelta(days=(", ")) + %s" % self.get_date_min()))

    elif to_type is types.String():

        if from_type is types.String():

            if not isinstance(to_pict, pictures.UnknownPicture) and \
                    (forced or isinstance(from_pict, pictures.UnknownPicture) or from_pict.size != to_pict.size):
                    convert_function.append((None, ".ljust({size})[:{size}]".format(size=to_pict.size)))

        elif from_type is types.Date():

            if not isinstance(from_pict, pictures.UnknownPicture):
                parameters = from_pict.to_parameters(ignore_ws=False)
            else:
                parameters = '"{}"'.format(self.get_date_default_fmt())

            convert_function.append(("adl_date_format(", ", %s)" % parameters))

            if not isinstance(to_pict, pictures.UnknownPicture):
                convert_function.append((None, ".ljust({size})[:{size}]".format(size=to_pict.size)))

        elif from_type is types.Decimal() or from_type is types.Integer():

            if not isinstance(from_pict, pictures.UnknownPicture):

                parameters = from_pict.to_parameters()
                if not default_decimal_sep:
                    if "thousand_sep=" not in parameters:
                        parameters += ", " + get_thousand_sep_parameter()
                    if "decimal_sep=" not in parameters:
                        parameters += ", " + get_decimal_sep_parameter()

                if not isinstance(to_pict, pictures.UnknownPicture):
                    convert_function.append(("adl_numeric_format(", ", %s, to_size=%d)" % (parameters, to_pict.size)))
                else:
                    convert_function.append(("adl_numeric_format(", ", %s)" % parameters))

            else:

                if from_type is types.Integer():
                    if not isinstance(to_pict, pictures.UnknownPicture):
                        convert_function.append(("adl_integer_format_lz(", ", to_size=%d)" % to_pict.size))
                    else:
                        convert_function.append(("adl_integer_format_lz(", ")"))
                else:
                    if not isinstance(to_pict, pictures.UnknownPicture):
                        convert_function.append(("adl_decimal_format_lz(", ", %s, to_size=%d)" % (get_decimal_sep_parameter(), to_pict.size)))
                    else:
                        convert_function.append(("adl_decimal_format_lz(", ", %s, to_size=31)" % get_decimal_sep_parameter()))

    elif to_type is types.Decimal():

        if from_type is types.Decimal():

            # Quantize only if decimal part differs.
            if not isinstance(to_pict, pictures.UnknownPicture):
                _, to_decimal_digits = to_pict.get_digits()

                if not isinstance(from_pict, pictures.UnknownPicture):
                    _, from_decimal_digits = from_pict.get_digits()

                if forced or isinstance(from_pict, pictures.UnknownPicture) or to_decimal_digits < from_decimal_digits:
                    quantizer = str(Decimal(10) ** (-to_decimal_digits))
                    convert_function.append((None, ".quantize({})".format(self.add_Decimal(quantizer))))

        elif from_type is types.Integer():
            convert_function.append(("Decimal(", ")"))
            # No need to quantize because there is no decimal part.

        elif from_type is types.Date():
            convert_function.append(("Decimal((", " - %s).days)" % self.get_date_min()))
            # No need to quantize because there is no decimal part.

        elif from_type is types.String():

            if not isinstance(to_pict, pictures.UnknownPicture):

                total_digits, decimal_digits = to_pict.get_digits()
                integer_digits = total_digits - decimal_digits

                thousand_sep_count = to_pict.picture.count(',')

                parameters = []
                parameters.append("integer_max=%d" % integer_digits)
                parameters.append("decimal_max=%d" % decimal_digits)
                if not default_decimal_sep:
                    parameters.append(get_decimal_sep_parameter())
                    parameters.append(get_thousand_sep_parameter())
                if to_pict._get_point() == 'V':
                    parameters.append("decimal_pos=%d" % decimal_digits)
                if strict is False:
                    parameters.append("strict=False")

                parameters.append("thousand_sep_count=%d" % thousand_sep_count)

                convert_function.append(("adl_decimal_parse(", ", %s)" % ', '.join(parameters)))
                # No need to quantize because the string has to fit the decimal otherwise an error occurs.

            else:

                parameters = []
                parameters.append(get_decimal_sep_parameter())
                parameters.append(get_thousand_sep_parameter())
                convert_function.append(("adl_decimal_parse_lz(", ", %s)" % ', '.join(parameters)))

    elif to_type is types.Integer():

        if from_type is types.Integer():
            if forced:
                convert_function.append(("int(", ")"))

        elif from_type is types.Decimal():
            # Quantize e.g. 99.9 => 100
            convert_function.append((None, ".quantize(1)"))
            convert_function.append(("int(", ")"))

        elif from_type is types.Date():
            convert_function.append(("(", " - %s).days" % self.get_date_min()))

        elif from_type is types.String():

            if not isinstance(to_pict, pictures.UnknownPicture):

                total_digits, decimal_digits = to_pict.get_digits()
                integer_digits = total_digits - decimal_digits
                parameters = []
                parameters.append("integer_max=%s" % integer_digits)
                if not default_decimal_sep:
                    parameters.append(get_decimal_sep_parameter())
                    parameters.append(get_thousand_sep_parameter())
                if strict is False:
                    parameters.append("strict=False")
                convert_function.append(("adl_integer_parse(", ", %s)" % ', '.join(parameters)))

            else:
                parameters = []
                parameters.append(get_decimal_sep_parameter())
                parameters.append(get_thousand_sep_parameter())
                convert_function.append(("adl_decimal_parse_lz(", ", %s)" % ', '.join(parameters)))

    return convert_function


def convert_type(visitor_func):

    @wraps(visitor_func)
    def wrapper(self, node):

        if node.conversion_types:

            from_type = node.basic_type
            from_pict = node.basic_picture.picture

            convert_function = []

            for to_form in node.conversion_types:

                to_type = to_form.type
                to_pict = to_form.picture.picture

                convert_function = do_convert(self,
                                              to_type,
                                              to_pict,
                                              from_type,
                                              from_pict,
                                              convert_function)

                from_pict = to_form.picture.picture
                from_type = to_form.type

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            result = visitor_func(self, node)

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

        else:
            result = visitor_func(self, node)

        return result
    return wrapper
