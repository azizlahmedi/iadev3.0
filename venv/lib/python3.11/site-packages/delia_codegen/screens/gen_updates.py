from delia_parser import ast, types, pictures
from delia_parser.scope import DisplayScope
from delia_parser.scope import AdlDynScope
from delia_codegen.convert_type import do_convert
from delia_codegen.utils import adl_name_to_py_name


FieldAttribute = {
    "BLINK": 1,
    "UNBLINK": 2,
    "REVERSE": 3,
    "UNREVERSE": 4,
    "UNDERLINE": 5,
    "NOTUNDERLINE": 6
    }


def get_attr(exp, field_ref):
    if exp.value.upper() == 'FALSE':
        attr = FieldAttribute[field_ref.__class__.__name__[4:].upper()] + 1
    else:
        attr = FieldAttribute[field_ref.__class__.__name__[4:].upper()]
    return attr


class FramesUpdates:

    def frame_update_in_local_function_key(self, field_ref, exp=None):
        if isinstance(field_ref, ast.FlagReference):
            attr = get_attr(exp, field_ref)
            field = field_ref.name
        else:
            attr = None
            field = field_ref

        if isinstance(field.scope, AdlDynScope):
            self.frame_update(node=field, frame=None, got_frame_stack=True, attr=attr)
        if isinstance(field.scope, DisplayScope) and field.scope.active_frame:
            self.frame_update(node=field, frame=field.scope.frame_name, got_frame_stack=False, attr=attr)

    def frame_update_not_in_local_function_key(self, field_ref, exp=None):
        if isinstance(field_ref, ast.FlagReference):
            attr = get_attr(exp, field_ref)
            field = field_ref.name
        else:
            attr = None
            field = field_ref

        if isinstance(field.scope, DisplayScope) and field.scope.active_frame:
            self.frame_update(node=field, frame=field.scope.frame_name, got_frame_stack=False, attr=attr)

    def frame_update(self, node, frame, got_frame_stack, attr=None):

        is_array_id = isinstance(node, ast.ArrayId)
        is_array = isinstance(node.definition, ast.Array)

        if is_array_id:
            self.frame_arrayid_update(node, frame, got_frame_stack, attr=attr)
        elif is_array:
            self.frame_array_update(node, frame, got_frame_stack, attr=attr)
        else:
            self.frame_field_update(node, frame, got_frame_stack, attr=attr)

    def frame_field_update(self, node, frame, got_frame_stack, attr=None):

        field_pyname = adl_name_to_py_name(node.name)

        self.src.newline("adl_field_update")

        if got_frame_stack:
            self.src.write("_with_stack")

        self.src.write("(")

        if got_frame_stack:
            self.src.write("frames_stack_ns=frames_stack_ns, ")
        else:
            self.src.write("frame=_frames['%s'], " % adl_name_to_py_name(frame))
        self.src.write("field_name='%s'" % field_pyname)
        self.src.write(", value=")

        # Stringify receiving_field's value
        from_type = node.definition.type
        from_pict = node.definition.picture.picture

        to_type = types.String()
        to_pict = pictures.UnknownPicture()

        convert_function = []
        convert_function = do_convert(self,
                                      to_type,
                                      to_pict,
                                      from_type,
                                      from_pict,
                                      convert_function,
                                      default_decimal_sep=True)

        for (header, _) in reversed(convert_function):
            if header is not None:
                self.src.write(header)

        self.visit(node)

        for (_, footer) in convert_function:
            if footer is not None:
                self.src.write(footer)

        if attr is not None:
            self.src.write(f", attr={attr}")
        self.src.write(")")

    def frame_array_update(self, node, frame, got_frame_stack, attr=None):

        array_pyname = adl_name_to_py_name(node.name)
        fields = node.definition.columns
        lower_bound = node.definition.lower_bound
        upper_bound = node.definition.upper_bound
        self.src.newline("for _index in range(")
        self.src.write("(")
        self.visit(upper_bound)
        self.src.write(" - ")
        self.visit(lower_bound)
        self.src.write(" + 1")
        self.src.write(")")
        self.src.write('):')

        self.src.indent()

        for field in fields:

            field_pyname = adl_name_to_py_name(field.value)

            self.src.newline("adl_array_field_update", no_locations=True)

            if got_frame_stack:
                self.src.write("_with_stack")

            self.src.write("(")

            if got_frame_stack:
                self.src.write("frames_stack_ns=frames_stack_ns, ")
            else:
                self.src.write("frame=_frames['%s'], " % adl_name_to_py_name(frame))
            self.src.write("array_name='%s'" % array_pyname)
            self.src.write(", index=_index")
            self.src.write(", field_name='%s'" % field_pyname)
            self.src.write(", value=")

            # Stringify receiving_field's value
            from_type = field.definition.type
            from_pict = field.definition.picture.picture

            to_type = types.String()
            to_pict = pictures.UnknownPicture()

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function,
                                          default_decimal_sep=True)

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            self.visit(node)
            self.src.write(".%s[_index]" % (field_pyname))

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

            if attr is not None:
                self.src.write(f", attr={attr}")
            self.src.write(")")

        self.src.dedent()

    def frame_arrayid_update(self, node, frame, got_frame_stack, attr=None):

        is_array = isinstance(node.definition, ast.Array)

        array_pyname = adl_name_to_py_name(node.array_definition.name)
        scope_pyname = adl_name_to_py_name(node.scope)
        lower_bound = node.array_definition.lower_bound
        upper_bound = node.array_definition.upper_bound
        check = node.array_definition.check

        if is_array:
            fields = node.array_definition.columns
        else:
            fields = node,

        if isinstance(node.index, (ast.ArrayIndexTo, ast.ArrayIndexAll)):

            self.src.newline("for _index in range(")
            if not isinstance(node.index, ast.ArrayIndexAll):
                self.array_index(node.index.lower, check, lower_bound, upper_bound)
                self.src.write(", ")
                self.array_index(node.index.upper, check, lower_bound, upper_bound, is_upper_bound=True)
            else:
                self.src.write("(")
                self.visit(upper_bound)
                self.src.write(" - ")
                self.visit(lower_bound)
                self.src.write(" + 1")
                self.src.write(")")

            self.src.write('):')
            self.src.indent()

        for field in fields:

            if is_array:
                field_pyname = adl_name_to_py_name(field.value)
            else:
                field_pyname = adl_name_to_py_name(field.name)

            self.src.newline("adl_array_field_update", no_locations=True)

            if got_frame_stack:
                self.src.write("_with_stack")

            self.src.write("(")

            if got_frame_stack:
                self.src.write("frames_stack_ns=frames_stack_ns, ")
            else:
                self.src.write("frame=_frames['%s'], " % adl_name_to_py_name(frame))

            self.src.write("array_name='%s'" % array_pyname)
            self.src.write(", index=")
            if isinstance(node.index, (ast.ArrayIndexTo, ast.ArrayIndexAll)):
                self.src.write("_index")
            else:
                self.array_index(node.index.index, check, lower_bound, upper_bound)

            self.src.write(", field_name='%s'" % field_pyname)
            self.src.write(", value=")

            # Stringify receiving_field's value
            from_pict = field.definition.picture.picture
            from_type = field.definition.type

            to_type = types.String()
            to_pict = pictures.UnknownPicture()

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function,
                                          default_decimal_sep=True)

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            if isinstance(node.scope, AdlDynScope):
                self.src.write("adl_get_ns_with_field_from_frames_stack_ns(procedure, frames_stack_ns, '{tab_name}').{tab_name}.{field_name}".format(
                    tab_name=array_pyname, field_name=field_pyname))
            else:
                self.src.write("%s.%s.%s" % (scope_pyname, array_pyname, field_pyname))

            if isinstance(node.index, (ast.ArrayIndexTo, ast.ArrayIndexAll)):
                self.src.write("[_index]")

            else:
                self.src.write("[")
                self.array_index(node.index.index, check, lower_bound, upper_bound)
                self.src.write("]")

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

            if attr is not None:
                self.src.write(f", attr={attr}")
            self.src.write(")")

        # Dedent _index = range().
        if isinstance(node.index, (ast.ArrayIndexAll, ast.ArrayIndexTo)):
            self.src.dedent()
