from delia_parser import types, pictures
from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.codeblock import CodeBlockNames


class Relation:

    def gen_SameAsRelation(self, node):
        self.gen_Relation(node)

    def gen_Relation(self, node):

        self.gen_unused(node)

        if not self.gen_not_used and not node.used:
            return

        self.collector.append_relation(node)

        relation_name = adl_name_to_py_name(node.name)
        keys = node.keys
        datas = node.datas
        indexes = node.indexes

        self.set_src(self.source[CodeBlockNames.RELATION], node)
        self.src.newline("_relations['{}'] = AdlRelation(".format(relation_name))
        self.src.indent()

        if self.in_schema is True:
            tmp_db = False
            schema_name = adl_name_to_py_name(self.schema_name)
        else:
            tmp_db = True
            schema_name = adl_name_to_py_name(self.proc_name)

        self.src.newline("schema='{}',".format(schema_name))
        self.src.newline("name='{}',".format(relation_name))
        if node.dest is not None and adl_name_to_py_name(node.dest) != relation_name:
            self.src.newline("stored_in='{}',".format(adl_name_to_py_name(node.dest)))

        def gen_row(row):

            _type = row.type
            _picture = row.definition.picture.picture

            if _type in (types.Integer(), types.Decimal()):
                datatype = 'decimal'
                if not isinstance(_picture, pictures.UnknownPicture):
                    subtype = '%s' % str(_picture.get_digits())
                else:
                    subtype = None

            elif _type is types.Date():
                datatype = 'date'
                subtype = None

            elif _type is types.String():
                datatype = 'str'
                subtype = '%d' % _picture.size

            self.src.newline("('{}', '{}', {}),".format(adl_name_to_py_name(row), datatype, subtype))

        for key in keys:

            if key == keys[0]:
                self.src.newline("keys=(")
                self.src.indent()

            gen_row(key)

            if key == keys[-1]:
                self.src.dedent()
                self.src.newline("),")

        for data in datas:

            if data == datas[0]:
                self.src.newline("datas=(")
                self.src.indent()

            gen_row(data)

            if data == datas[-1]:
                self.src.dedent()
                self.src.newline("),")

        for index in indexes:
            if index == indexes[0]:
                self.src.newline("indices=(")
            for index_name in index:
                if index_name == index[0]:
                    self.src.newline("(")

                self.src.write("'%s', " % adl_name_to_py_name(index_name))

                if index_name == index[-1]:
                    self.src.write("),")

            if index == indexes[-1]:
                self.src.write("),")

        if tmp_db is True:
            self.src.newline("tmp_db=True,")

        self.src.dedent()
        self.src.newline(')')
        self.src.newline()
