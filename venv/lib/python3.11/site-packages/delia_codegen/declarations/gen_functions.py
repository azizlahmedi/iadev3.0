# -*- coding: utf-8 -*-

from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.convert_type import do_convert
from delia_codegen.codeblock import CodeBlockNames
from delia_parser import types, pictures


class Function:

    def gen_Function(self, node):
        self.gen_unused(node)

        if not node.used:
            return

        self.set_src(self.source[CodeBlockNames.FUNCTION], node)

        func_name = adl_name_to_py_name(node.name)
        receiving_parameters = node.receiving_parameters
        returning_parameters = node.returning_parameters
        attributes = node.attributes
        decls = node.decls
        stmts = node.stmts
        ns_name = adl_name_to_py_name(node.scope)

        parametres = ""
        if attributes:
            parametres += '"_result", '

        for param in returning_parameters + receiving_parameters:
                parametres += '"%s", ' % adl_name_to_py_name(param)

        if parametres:
            self.source[CodeBlockNames.FUNCTION_NS].newline('%s = FunctionNamespaceFactory("%s", (%s)).maker()' % (ns_name, func_name, parametres))

        self.src.newline("def %s(%s):" % (
            func_name,
            ", ".join(
                [adl_name_to_py_name(param)
                    for param in receiving_parameters])))

        self.src.indent()

        self.src.stop_gen_locations()
        # Add locals variables to the procedure which can be assigned in the body of the function.
        self.src.add(self.source[CodeBlockNames.LOCAL])

        if parametres:
            self.src.newline('%s.reset()' % ns_name)

        # Assign parameters in the newly created scope
        for param in returning_parameters:
            self.src.newline()
            self.src.write("%s.%s = %s" % (ns_name,
                                           adl_name_to_py_name(param),
                                           self.get_default_value(param)))

        if attributes:
            self.src.newline('%s._result = %s' % (ns_name, self.get_default_value(node)))

        if parametres:
            self.src.newline('%s.track()' % ns_name)

        for param in receiving_parameters:
            self.src.newline()
            self.src.write("%s.%s = %s" % (ns_name,
                                           adl_name_to_py_name(param),
                                           adl_name_to_py_name(param)))

        self.src.start_gen_locations()

        self.visit(decls)
        self.visit(stmts)

        self.src.stop_gen_locations()
        if parametres:
            self.src.newline('%s.done()' % ns_name)

        if not attributes:
            if len(returning_parameters) == 0:
                self.src.newline("return")
            else:
                self.src.newline("return ")

                if len(returning_parameters) > 1:
                    self.src.write("(")

                for param in returning_parameters:
                    self.src.write("%s.%s" % (ns_name,
                                              adl_name_to_py_name(param)))
                    if param != returning_parameters[-1]:
                        self.src.write(", ")

                if len(returning_parameters) > 1:
                    self.src.write(")")
        else:
            self.src.newline("return %s._result" % ns_name)

        self.src.newline()
        self.src.dedent()
        self.src.start_gen_locations()

    def gen_FunctionStmt(self, node):

        func_name = adl_name_to_py_name(node.name)
        calling_parameters = node.calling_parameters
        accepting_parameters = node.accepting_parameters

        receiving_parameters = node.definition.receiving_parameters
        returning_parameters = node.definition.returning_parameters

        if len(accepting_parameters) > 0:
            self.src.newline("_return = ")
        else:
            self.src.newline()

        self.src.write("%s" % func_name)
        self.src.write("(")
        max_param = len(calling_parameters) - 1

        for pos, param in enumerate(calling_parameters):

            # Implicit conversion of input parameters
            from_pict = param.picture.picture
            from_type = param.type

            to_pict = receiving_parameters[pos].definition.picture.picture
            to_type = receiving_parameters[pos].definition.type

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function)

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            self.visit(param)

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

            if pos != max_param:
                self.src.write(", ")

        self.src.write(")")

        self.src.stop_gen_locations()
        for pos, param in enumerate(accepting_parameters):

            # Implicit conversion of returned parameters
            self.src.newline()
            self.visit(param)
            self.src.write(" = ")

            to_pict = param.picture.picture
            to_type = param.type

            from_pict = returning_parameters[pos].definition.picture.picture
            from_type = returning_parameters[pos].definition.type

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function)

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            if len(accepting_parameters) == 1:
                self.src.write("_return")
            else:
                self.src.write("_return[%d]" % pos)

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

            # FIELD.UPDATES
            if node.in_local_function_key:
                self.frame_update_in_local_function_key(field_ref=param)
            else:
                self.frame_update_not_in_local_function_key(field_ref=param)
        self.src.start_gen_locations()

    def gen_FLI(self, node):
        self.gen_unused(node)

        if not node.used:
            return

        ast_type_to_python_type = {types.Integer(): 'int',
                                   types.Decimal(): 'Decimal',
                                   types.Date(): '_date',
                                   types.String(): 'str',
                                   }

        self.set_src(self.source[CodeBlockNames.FLI], node)

        func_name = adl_name_to_py_name(node.name)
        receiving_parameters = node.receiving_parameters
        returning_parameters = node.returning_parameters
        attributes = node.attributes
        file_spec = node.file_spec.value

        self.src.newline("def %s(%s):" % (
            func_name,
            ", ".join(
                [adl_name_to_py_name(param)
                    for param in receiving_parameters])))

        self.src.stop_gen_locations()
        self.src.indent()

        self.src.newline("_function = _load_fli(")

        self.src.write("module=")
        self.visit(file_spec)

        self.src.write(", name='%s'" % func_name)

        self.src.write(", input_params_type=(")
        for param in receiving_parameters:
            self.src.write(ast_type_to_python_type[param.type])
            self.src.write(", ")
        self.src.write(")")

        self.src.write(", output_params_type=(")
        if attributes:
            self.src.write(ast_type_to_python_type[node.type])
            self.src.write(", ")
        else:
            for param in returning_parameters:
                self.src.write(ast_type_to_python_type[param.type])
                self.src.write(", ")
        self.src.write(")")

        self.src.write(")")

        if len(returning_parameters) > 0 or attributes:
            self.src.newline("_result = ")
        else:
            self.src.newline()

        if len(returning_parameters) > 1:
            self.src.write('list(')

        self.src.write('_function(')

        for param in receiving_parameters:
            self.src.write(adl_name_to_py_name(param))
            if param != receiving_parameters[-1]:
                self.src.write(', ')

        if len(returning_parameters) > 1:
            self.src.write(')')

        self.src.write(')')
        if node.type is types.String():
            node_picture = node.picture.picture
            if not isinstance(node_picture, pictures.UnknownPicture):
                self.src.write(".ljust({size})[:{size}]".format(size=node_picture.size))

        # For conversion from FLI function.
        # We assume types are correct by not necessarily the pictures.
        for pos, param in enumerate(returning_parameters):

            to_type = param.type
            to_pict = param.picture.picture

            from_type = to_type
            from_pict = pictures.UnknownPicture()

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function,
                                          forced=True)

            if convert_function != []:
                if len(returning_parameters) == 1:
                    self.src.newline("_result = ")
                else:
                    self.src.newline("_result[%d] = " % pos)

                for (header, _) in reversed(convert_function):
                    if header is not None:
                        self.src.write(header)

                if len(returning_parameters) == 1:
                    self.src.write("_result")
                else:
                    self.src.write("_result[%d]" % pos)

                for (_, footer) in convert_function:
                    if footer is not None:
                        self.src.write(footer)

        if len(returning_parameters) > 0 or attributes:
            self.src.newline("return _result")
        else:
            self.src.newline("return")

        self.src.newline()
        self.src.dedent()
        self.src.start_gen_locations()
