# -*- coding: utf-8 -*-
import json
import delia_commons
import os

class Mapper:

    def __init__(self, macro, file, absolute=False):
        if delia_commons.context.Context().initialize_done:
            self.project_path = delia_commons.context.Context().project_path
        else:
            raise delia_commons.exceptions.DeliaError("project path must be done")
        self.metadata = {}
        self.metadata["FILES"] = []
        self.metadata["MACROS"] = macro
        self.absolute = absolute
        if self.absolute:
            self.metadata["FILES"] = file
        else:
            self.use_relative_path(file)
        self.map = {}


    @property
    def proc_name(self,):
        return self.metadata["PROCEDURE_NAME"]

    @proc_name.setter
    def proc_name(self, proc_name):
        self.metadata["PROCEDURE_NAME"] = proc_name

    @property
    def schema_name(self):
        return self.metadata["SCHEMA_NAME"]

    @schema_name.setter
    def schema_name(self, schema_name):
        self.metadata["SCHEMA_NAME"] = schema_name

    @property
    def files(self):
        return self.metadata["FILES"]

    @files.setter
    def files(self, file_list):
        if self.absolute:
            self.metadata["FILES"] = file_list
        else:
            self.use_relative_path(file_list)

    @property
    def macros(self):
        return self.metadata["MACROS"]

    @macros.setter
    def macros(self, macro_list):
        self.metadata["MACROS"] = macro_list

    def set_metadata(self, metadata):
        self.metadata.update(metadata)

    def get(self):
        return (self.metadata, self.map)

    def add(self, adl_location, py_location):
        if adl_location is None:
            return
        adl_lineno, adl_column, file, macro_stack = adl_location
        if not self.absolute:
            file = os.path.relpath(file, self.project_path).replace(os.path.sep, "/")
        adl_file = self.files.index(file)
        if py_location not in self.map:
            self.map[py_location] = (adl_lineno, adl_column, adl_file, macro_stack)

    @classmethod
    def save(klass, data, output_path):
        klass.save_as_gzfile(klass.get_json(data), output_path)

    @classmethod
    def save_as_gzfile(klass, data, output_path):
        import gzip
        with gzip.open(output_path, 'wt') as fd:
            fd.write(data)

    @classmethod
    def get_json(klass, data):
        return json.dumps([list(data[0].items()), list(data[1].items())], indent=1)

    def use_relative_path(self, file):
        try:
            if self.project_path:
                for path in file:
                    val = os.path.relpath(path, self.project_path).replace(os.path.sep, "/")
                    self.metadata["FILES"].append(val)
        except Exception as e:
            raise Exception("An error is raised {}\n".format(e))
