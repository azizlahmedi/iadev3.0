from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.codeblock import CodeBlockNames
from delia_codegen.convert_type import convert_type
from delia_parser import ast, types


class Report:

    def ReportParameter(self, node):
        self.visit(node.value)

    gen_PageNum = \
        gen_PageDivider = \
        gen_TopMargin = \
        gen_BottomMargin = \
        gen_HeadingSize = \
        gen_FootingSize = \
        gen_PageSize = \
        gen_PageTop = \
        ReportParameter

    def report_begin(self, report):
        name = report.definition.name
        dest = report.definition.dest
        append = report.definition.append
        parameters = report.definition.parameters
        conditions = report.definition.conditions

        report_name = adl_name_to_py_name(name)
        self.src.newline("%s.begin(" % report_name)

        if isinstance(dest, ast.Terminal):
            self.src.write("to_terminal=True")

        else:

            self.src.write("path=")
            self.visit(dest)

            if append is True:
                self.src.write(", mode='a'")
            else:
                self.src.write(", mode='w'")

        for param in parameters:
            if isinstance(param, ast.PageNum):
                self.src.write(", page_num=")
                self.visit(param)
            elif isinstance(param, ast.PageDivider):
                self.src.write(", page_div=")
                self.visit(param)
            elif isinstance(param, ast.TopMargin):
                self.src.write(", top_margin=")
                self.visit(param)
            elif isinstance(param, ast.BottomMargin):
                self.src.write(", bottom_margin=")
                self.visit(param)
            elif isinstance(param, ast.HeadingSize):
                self.src.write(", heading_size=")
                self.visit(param)
            elif isinstance(param, ast.FootingSize):
                self.src.write(", footing_size=")
                self.visit(param)
            elif isinstance(param, ast.PageSize):
                self.src.write(", page_size=")
                self.visit(param)
            elif isinstance(param, ast.PageTop):
                self.src.write(", page_top=")
                self.visit(param)
            elif isinstance(param, ast.LineLength):
                # Don't care ?
                pass
            elif isinstance(param, ast.LineNum):
                # Don't care ?
                pass

        group_footings = []
        for condition in conditions:
            if isinstance(condition, ast.ReportHeading):
                self.src.write(", report_heading=True")
            elif isinstance(condition, ast.ReportFooting):
                self.src.write(", report_footing=True")
            elif isinstance(condition, ast.GroupFooting):
                group_footings.append(condition.field_name)

        if group_footings:
            self.src.write(", group_footings=(")
            for group in group_footings:
                self.src.write("'%s', " % adl_name_to_py_name(group))
            self.src.write(")")

        self.src.write(")")

    def report_start(self, report):
        report_name = adl_name_to_py_name(report.definition.name)
        if report.definition.query_scope is None:
            self.src.newline(f"{report_name}.start(None)")
        else:
            self.src.newline(f"{report_name}.start({adl_name_to_py_name(report.definition.query_scope)})")

    def report_end(self, report):
        report_name = adl_name_to_py_name(report.definition.name)
        self.src.newline("%s.end()" % report_name)

    def gen_Report(self, node):

        self.gen_unused(node)

        if not node.used:
            return

        self.in_report_decl = True
        self.set_src(self.source[CodeBlockNames.REPORT_DECLARATION], node)

        report_name = adl_name_to_py_name(node.name)
        report_class_name = report_name[0].upper() + report_name[1:]

        # Class initialization
        self.src.newline("class %s(AdlReport):" % (report_class_name))
        self.src.indent()

        self.src.newline("def __init__(self):")
        self.src.indent()
        self.src.newline("self.query_scope = None")
        self.src.newline("AdlReport.__init__(self, '%s')" % str(node.name))
        self.src.dedent()

        self.src.newline()
        self.src.newline("def start(self, query_scope=None):")
        self.src.indent()
        self.src.newline("self.query_scope = query_scope")
        self.src.newline("AdlReport.start(self)")
        self.src.dedent()

        def get_proc_context():
            self.src.add(self.source[CodeBlockNames.LOCAL])

        for pos, condition in enumerate(node.conditions):

            if pos == 0:
                self.src.newline()

            if isinstance(condition, ast.ReportHeading):
                self.src.newline("def report_heading(self, only_body=False):")
                self.src.indent()
                get_proc_context()
                self.src.newline(f"{adl_name_to_py_name(node.query_scope)} = self.query_scope")
                self.visit(condition.stmts)
                self.src.newline("self.end_report_heading(only_body=only_body)")
                self.src.dedent()

            elif isinstance(condition, ast.ReportFooting):
                self.src.newline("def report_footing(self, only_body=False):")
                self.src.indent()
                get_proc_context()
                self.src.newline(f"{adl_name_to_py_name(node.query_scope)} = self.query_scope")
                self.visit(condition.stmts)
                self.src.newline("self.end_report_footing(only_body=only_body)")
                self.src.dedent()

            elif isinstance(condition, ast.PageHeading):
                self.src.newline("def page_heading(self, only_body=False):")
                self.src.indent()
                get_proc_context()
                self.src.newline(f"{adl_name_to_py_name(node.query_scope)} = self.query_scope")
                self.visit(condition.stmts)
                self.src.newline("self.end_page_heading(only_body=only_body)")
                self.src.dedent()

            elif isinstance(condition, ast.PageFooting):
                self.src.newline("def page_footing(self, only_body=False):")
                self.src.indent()
                get_proc_context()
                self.src.newline(f"{adl_name_to_py_name(node.query_scope)} = self.query_scope")
                self.visit(condition.stmts)
                self.src.newline("self.end_page_footing(only_body=only_body)")
                self.src.dedent()

            elif isinstance(condition, ast.GroupHeading):
                condition_field = condition.field_name
                condition_field_pyname = adl_name_to_py_name(condition_field)
                group_python_name = 'group_heading_%s' % condition_field_pyname
                self.src.newline("def %s(self):" % group_python_name)
                self.src.indent()
                get_proc_context()
                self.src.newline(f"{adl_name_to_py_name(node.query_scope)} = self.query_scope")
                self.src.newline("self.start_group_heading()")
                self.visit(condition.stmts)
                self.src.dedent()

            elif isinstance(condition, ast.GroupFooting):
                condition_field = condition.field_name
                condition_field_pyname = adl_name_to_py_name(condition_field)
                group_python_name = 'group_footing_%s' % condition_field_pyname
                self.src.newline("def %s(self):" % group_python_name)
                self.src.indent()
                get_proc_context()
                self.src.newline(f"{adl_name_to_py_name(node.query_scope)} = self.query_scope")
                self.src.newline("self.start_group_footing()")
                self.visit(condition.stmts)
                if node.avg:
                    self.src.newline("self.reset_avg('%s')" % condition_field_pyname)
                if node.sum:
                    self.src.newline("self.reset_sum('%s')" % condition_field_pyname)
                if node.min:
                    self.src.newline("self.reset_min('%s')" % condition_field_pyname)
                if node.max:
                    self.src.newline("self.reset_max('%s')" % condition_field_pyname)
                if node.count:
                    self.src.newline("self.reset_count('%s')" % condition_field_pyname)
                self.src.dedent()

            if pos != len(node.conditions) - 1:
                self.src.newline()

        self.src.dedent()

        # Class instance
        self.source[CodeBlockNames.REPORT_INSTANCE].newline("%s = %s()" % (report_name, report_class_name))
        self.in_report_decl = False

    def gen_WriteReport(self, node):
        report_name_list = node.report_names
        stmts = node.stmts

        for report in report_name_list:
            self.report_begin(report)
            self.report_start(report)

        self.visit(stmts)

        for report in report_name_list:
            self.report_end(report)

    def gen_Force(self, node):

        if hasattr(node.report_name, "definition"):
            report_name = node.report_name.definition
        else:
            report_name = node.report_name

        if hasattr(node.report_cond, "definition"):
            report_cond = node.report_cond.definition
        else:
            report_cond = node.report_cond

        if self.in_report_decl:
            prefix = "self"
        else:
            prefix = "%s" % adl_name_to_py_name(report_name.name)

        if isinstance(report_cond, (ast.ReportHeading,
                                    ast.ReportFooting,
                                    ast.PageHeading,
                                    ast.PageFooting,
                                    )):

            if isinstance(report_cond, ast.ReportHeading):
                function = "report_heading"
            elif isinstance(report_cond, ast.ReportFooting):
                function = "report_footing"
            elif isinstance(report_cond, ast.PageHeading):
                function = "page_heading"
            elif isinstance(report_cond, ast.PageFooting):
                function = "page_footing"

            self.src.newline("%s.%s(only_body=True)" % (prefix, function))

        elif isinstance(report_cond, (ast.GroupHeading, ast.GroupFooting)):
                if isinstance(report_cond, ast.GroupHeading):
                    function = 'group_heading_'
                elif isinstance(report_cond, ast.GroupFooting):
                    function = 'group_footing_'

                function += adl_name_to_py_name(report_cond.field_name)

                self.src.newline("%s.%s()" % (prefix, function))

    @convert_type
    def ReportItem(self, node):

        report_name = node.report_name

        if self.in_report_decl:
            prefix = "self"
        else:
            prefix = "%s" % adl_name_to_py_name(report_name)

        if isinstance(node, ast.ReportPageNum):
            param = "page_num"
        elif isinstance(node, ast.ReportPageSize):
            param = "page_size"
        elif isinstance(node, ast.ReportLineNum):
            param = "line_num"
        elif isinstance(node, ast.ReportPageDivider):
            param = "page_div"
        elif isinstance(node, ast.ReportBottomMargin):
            param = "bottom_margin"
        elif isinstance(node, ast.ReportTopMargin):
            param = "top_margin"
        elif isinstance(node, ast.ReportHeadingSize):
            param = "heading_size"
        elif isinstance(node, ast.ReportFootingSize):
            param = "footing_size"
        elif isinstance(node, ast.ReportLineLength):
            # Don't Care
            return

        self.src.write("%s.%s" % (prefix, param))

    gen_ReportPageNum = \
        gen_ReportPageSize = \
        gen_ReportLineNum = \
        gen_ReportPageDivider = \
        gen_ReportBottomMargin = \
        gen_ReportTopMargin = \
        gen_ReportHeadingSize = \
        gen_ReportFootingSize = \
        gen_ReportLineLength = \
        ReportItem

    @convert_type
    def gen_CumulativeFunction(self, node):

        function_pyname = adl_name_to_py_name(node.name)
        assert(function_pyname in ('min', 'max', 'avg', 'sum', 'count'))

        report = node.report_name
        report_pyname = adl_name_to_py_name(report)

        if function_pyname in ('min', 'max', 'avg', 'sum'):
            param = node.parameters[0]
            param_type = param.type
            param_pyname = adl_name_to_py_name(param.name)
        else:
            param_type = None
            param_pyname = None

        if self.in_report_decl:
            prefix = "self"
        else:
            prefix = report_pyname

        # TODO: check if these conversion if a nonsens.
        if function_pyname == 'avg' and param_type is types.Integer():
            self.src.write('int(')

        if node.in_report_footing:
            if param_pyname:
                self.src.write("%s.%s_all('%s')" % (prefix, function_pyname, param_pyname))
            else:
                self.src.write("%s.%s_all()" % (prefix, function_pyname))
        else:
            group_pyname = adl_name_to_py_name(node.group_footing_condition)
            if param_pyname:
                self.src.write("%s.%s('%s', '%s')" % (prefix, function_pyname, group_pyname, param_pyname))
            else:
                self.src.write("%s.%s('%s')" % (prefix, function_pyname, group_pyname))

        if function_pyname == 'avg' and param_type is types.Integer():
            self.src.write(')')

    def cumulate(self, report):
        name = report.definition.name

        c_avg = report.definition.avg
        c_sum = report.definition.sum
        c_min = report.definition.min
        c_max = report.definition.max
        c_count = report.definition.count

        c_avg_all = report.definition.avg_all
        c_sum_all = report.definition.sum_all
        c_min_all = report.definition.min_all
        c_max_all = report.definition.max_all
        c_count_all = report.definition.count_all

        if self.in_report_decl:
            prefix = "self"
        else:
            prefix = "%s" % adl_name_to_py_name(name)

        def call(function, fields):
            for field in fields:
                field_pyname = adl_name_to_py_name(field.name)
                self.src.newline("{prefix}.{function}".format(prefix=prefix, function=function))
                self.src.write('(')
                self.src.write("'{field}', ".format(field=field_pyname))
                self.visit(field)
                self.src.write(')')

        call('cumulate_avg', c_avg)
        call('cumulate_sum', c_sum)
        call('cumulate_min', c_min)
        call('cumulate_max', c_max)

        call('cumulate_avg_all', c_avg_all)
        call('cumulate_sum_all', c_sum_all)
        call('cumulate_min_all', c_min_all)
        call('cumulate_max_all', c_max_all)

        if c_count:
            self.src.newline("{prefix}.cumulate_count()".format(prefix=prefix))
        if c_count_all:
            self.src.newline("{prefix}.cumulate_count_all()".format(prefix=prefix))
