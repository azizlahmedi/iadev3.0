from delia_parser import ast, types, pictures
from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.convert_type import do_convert


class Accept:

    def gen_AcceptInputId(self, node):
        self.gen_Id(node)
        self.visit(node.input_picture)

    def gen_AcceptInputArrayId(self, node):
        self.gen_ArrayId(node)

    def gen_Accept(self, node):

        if isinstance(node.echo, ast.NoEcho):
            echo = False
        else:
            echo = True

        for field_id in node.field_names:
            field_name = str(field_id.name)

            if not field_id.input_picture:
                _picture = field_id.picture.picture
                _type = field_id.type
                _default = self.get_default_value(field_id)
            else:
                _picture = field_id.input_picture.picture.picture
                _type = field_id.input_picture.type
                _default = self.get_default_from_picture(_type, field_id.input_picture)

            if _type is types.Integer():
                datatype = 'integer'
                size = _picture._get_size()
                total, decimal_digits = _picture.get_digits()
                integer_digits = total - decimal_digits
                subtype = '({size}, {integer_digits})'.format(
                    size=size,
                    integer_digits=integer_digits,
                )

            elif _type is types.Decimal():
                datatype = 'decimal'
                size = _picture._get_size()
                total, decimal_digits = _picture.get_digits()
                integer_digits = total - decimal_digits
                if _picture._get_point() == 'V':
                    decimal_pos = decimal_digits
                else:
                    decimal_pos = None
                subtype = '({size}, {integer_digits}, {decimal_digits}, {decimal_pos})'.format(
                    size=size,
                    integer_digits=integer_digits,
                    decimal_digits=decimal_digits,
                    decimal_pos=decimal_pos,
                )

            elif _type is types.Date():
                datatype = 'date'

                if isinstance(_picture, pictures.UnknownPicture):
                    size = self.get_date_default_size()
                    date_fmt = self.get_date_default_fmt()
                    empty_is_default = False
                else:
                    size = _picture.size
                    date_fmt = _picture.normal_form(ignore_ws=True)
                    empty_is_default = _picture.empty_is_default()

                subtype = "({size}, '{date_fmt}', {empty_is_default})".format(
                    size=size,
                    date_fmt=date_fmt,
                    empty_is_default=empty_is_default,
                )

            elif _type is types.String():
                datatype = 'str'
                size = _picture.size
                subtype = '{size}'.format(
                    size=size,
                )
            else:
                raise NotImplementedError("Not supported type: ", _type)

            prompt = None
            error_prompt = None
            for for_clauses in node.prompt_clauses:
                field_clauses = for_clauses.field_clauses
                field_name = for_clauses.field_name
                if field_id.name == field_name:
                    for errors_prompt_clause in field_clauses:
                        if isinstance(errors_prompt_clause, ast.PromptClause):
                            prompt = self.add_String(errors_prompt_clause.clause_value.value)
                        else:
                            error_prompt = self.add_String(errors_prompt_clause.clause_value.value)
                    break

            if prompt is None:
                prompt = repr('%s:' % str(field_id.name))

            if error_prompt is None:
                if datatype in ('integer', 'decimal'):
                    msg_datatype = 'numeric'
                elif datatype == 'str':
                    msg_datatype = 'string'
                elif datatype == 'date':
                    msg_datatype = 'date'
                error_prompt = repr('%%s: Your input must be a %s for "%s"' % (msg_datatype, str(field_name)))

            stmt = f"adl_accept(datatype='{datatype}', subtype={subtype}, default={_default}, echo={echo}, prompt={prompt}, error={error_prompt}"
            stmt += f", field_name='{field_name}', dd=_data_descs['{self.dd_names[adl_name_to_py_name(field_id.name)]}'])"

            if not field_id.input_picture:

                self.src.newline()
                self.visit(field_id)
                self.src.write(" = ")
                self.src.write(stmt)

            else:

                to_type = field_id.type
                to_pict = field_id.picture.picture

                self.src.newline()
                self.visit(field_id)
                self.src.write(" = ")

                convert_function = []
                convert_function = do_convert(self,
                                              to_type,
                                              to_pict,
                                              _type,
                                              _picture,
                                              convert_function)

                for (header, _) in reversed(convert_function):
                    if header is not None:
                        self.src.write(header)

                self.src.write(stmt)

                for (_, footer) in convert_function:
                    if footer is not None:
                        self.src.write(footer)

            # FIELD.UPDATES
            if node.in_local_function_key:
                self.frame_update_in_local_function_key(field_ref=field_id)
            else:
                self.frame_update_not_in_local_function_key(field_ref=field_id)
