from delia_parser import ast, types, pictures
from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.interfaces.gen_sources import Source
from delia_codegen.interfaces.gen_reports import Report
from delia_codegen.interfaces.gen_accepts import Accept

from delia_codegen.convert_type import (
    convert_type,
    do_convert,
)


class Interfaces(Source,
                 Report,
                 Accept):

    def io_path(self, node):
        self.src.write('_vms_to_unix(')
        self.visit(node.value)
        self.src.write(')')

    def gen_Text(self, node):
        self.io_path(node)

    def gen_File(self, node):
        self.io_path(node)

    def gen_DeleteFile(self, node):
        self.src.newline('adl_file_delete(')
        self.visit(node.file_spec)
        self.src.write(')')

    def exists(self, node):
        self.src.write('adl_file_exists(')
        self.src.write('_vms_to_unix(')
        self.visit(node.left)
        self.src.write(')')
        self.src.write(')')

    def gen_FileExists(self, node):
        self.exists(node)

    def gen_TextExists(self, node):
        self.exists(node)

    def gen_TypeToMessageArea(self, node):
        self.output_items(node.output_list, '_type_to_message_area')

    def gen_TypeToTerminal(self, node):
        self.output_items(node.output_list, '_type_to_terminal')

    def gen_Type(self, node):
        self.output_items(node.output_list, '_type')

    def gen_Print(self, node):

        if self.in_report_decl is True:
            class_name = 'self'
        else:
            class_name = adl_name_to_py_name(node.report_name)

        self.output_items(node.output_list, class_name)

    def output_items(self, output_items, class_name):

        size = len(output_items)

        def output_getter(outputs):
            # [DeliaDELIA-3111]: Handle string concat as comma separator in TYPE and PRINT
            if isinstance(outputs, list):
                for output in outputs:
                    yield from output_getter(output)
            elif isinstance(outputs, ast.Plus) and outputs.left.type is types.String() and outputs.right.type is types.String():
                yield from output_getter(outputs.left)
                yield from output_getter(outputs.right)
            else:
                yield outputs

        if size == 0 and class_name in ('_wait', '_abort', '_type_to_message_area'):
            self.src.newline("%s.end()" % class_name)

        else:
            for output in output_getter(output_items):

                # Skip PAGE.TOP in REPORT.HEADING, PAGE.HEADING or PAGE.FOOTING
                if isinstance(output, ast.ReportPageTop) and output.in_page_report_headers_or_page_footers:
                    self.src.newline("pass # SKIP PRINT PAGE.TOP")
                    continue

                self.src.newline("%s" % class_name)

                if isinstance(output, ast.ControlCharacter):

                    if output.token.lower() == '@cr':
                        self.src.write(".add_newline()")

                    elif output.token.lower() == '@ff':
                        self.src.write(".write('\f')")

                    else:
                        self.src.write(".write(")
                        self.visit(output)
                        self.src.write(")")

                elif isinstance(output, ast.InputOutputItem):

                    if isinstance(output, ast.Tab):
                        self.src.write(".add_tab(")

                    elif isinstance(output, ast.TabTo):
                        self.src.write(".add_tab_to(")

                    elif isinstance(output, ast.Skip):
                        self.src.write(".add_skip(")

                    elif isinstance(output, ast.SkipTo):
                        self.src.write(".add_skip_to(")

                    value = output.value

                    from_type = value.type
                    from_pict = value.picture.picture

                    to_type = types.Integer()
                    to_pict = pictures.UnknownPicture()

                    convert_function = do_convert(self, to_type, to_pict, from_type, from_pict, [], False)

                    for (header, _) in reversed(convert_function):
                        if header is not None:
                            self.src.write(header)

                    self.visit(value)

                    for (_, footer) in convert_function:
                        if footer is not None:
                            self.src.write(footer)

                    self.src.write(")")

                elif isinstance(output, ast.ReportPageTop):
                    self.src.write(".add_page()")

                else:
                    self.src.write(".write(")

                    from_type = output.type
                    from_pict = output.picture.picture

                    to_type = types.String()
                    to_pict = pictures.UnknownPicture()

                    convert_function = do_convert(self, to_type, to_pict, from_type, from_pict, [], False)

                    for (header, _) in reversed(convert_function):
                        if header is not None:
                            self.src.write(header)

                    self.visit(output)

                    for (_, footer) in convert_function:
                        if footer is not None:
                            self.src.write(footer)

                    self.src.write(')')

            else:
                if class_name in ('_type', '_type_to_terminal') and \
                        not (isinstance(output, ast.ControlCharacter) and output.token.lower() in ['@cr', '@ff']):
                    self.src.newline("%s.flush()" % class_name)
                elif class_name in ('_wait', '_abort', '_type_to_message_area'):
                    self.src.newline("%s.end()" % class_name)
