from delia_parser import ast
from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.convert_type import do_convert


class Insert:

    def gen_Insert(self, node):
        relation = node.relation_name
        relation_python_name = adl_name_to_py_name(relation)
        duplicate_clause = node.duplicate_clause
        using_keys = node.using_keys
        using_datas = node.using_datas

        if not duplicate_clause or \
            isinstance(duplicate_clause.clause, ast.Nothing) or \
            (isinstance(duplicate_clause.clause, ast.Stmts) and
                len(duplicate_clause.clause) == 1 and
                isinstance(duplicate_clause.clause[0], ast.Nothing)):
            empty_duplicate_cause = True
        else:
            empty_duplicate_cause = False

        query_id = self.collector.append_insert(relation=relation_python_name)

        if not empty_duplicate_cause:
            self.src.newline("if not ")
        else:
            self.src.newline()

        self.src.write("_insert('%s').execute(" % query_id)

        # parameter: relation
        # Build argument list

        self.src.write("keys=(")
        for key, value in using_keys.items():

            # Implicit conversion
            from_type = value.type
            from_pict = value.picture.picture

            to_type = key.type
            to_pict = key.picture.picture

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function)

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            self.visit(value)

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

            self.src.write(", ")
        self.src.write(")")

        if using_datas:
            self.src.write(", datas=(")

            for data, value in using_datas.items():

                # Implicit conversion
                from_type = value.type
                from_pict = value.picture.picture

                to_type = data.type
                to_pict = data.picture.picture

                convert_function = []
                convert_function = do_convert(self,
                                              to_type,
                                              to_pict,
                                              from_type,
                                              from_pict,
                                              convert_function)

                for (header, _) in reversed(convert_function):
                    if header is not None:
                        self.src.write(header)

                self.visit(value)

                for (_, footer) in convert_function:
                    if footer is not None:
                        self.src.write(footer)

                self.src.write(", ")
            self.src.write(")")

        if duplicate_clause:
            self.src.write(", skip_duplicate=True")

        self.src.write(")")

        if not empty_duplicate_cause:
            self.src.write(":")
            self.src.indent()
            self.visit(node.duplicate_clause)
            self.src.dedent()
