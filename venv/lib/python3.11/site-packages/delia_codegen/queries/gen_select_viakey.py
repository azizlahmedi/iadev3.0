from delia_parser import ast
from delia_codegen.utils import adl_name_to_py_name


class SelectViaKey:

    def select_via_key(self, node):

        relation = node.relation_name
        relation_python_name = adl_name_to_py_name(relation)
        py_scope = adl_name_to_py_name(node.scope)
        qualified_rel_alias = node.qualified_rel_alias

        is_where_optimized = qualified_rel_alias.is_where_optimized
        if not is_where_optimized:
            where_clause = qualified_rel_alias.where_clause
        else:
            where_clause = None

        via_values = qualified_rel_alias.via_values

        then_stmts = node.then_else_clause.then_stmts
        else_stmts = node.then_else_clause.else_stmts

        for_update = node.got_alter

        fetched = []
        for col in relation.definition.columns:
            if col in node.scope.fetched_columns:
                fetched.append(col)

        fetched_python_name = ["'%s'" % adl_name_to_py_name(fetch) for fetch in fetched]
        where_routine_params = [adl_name_to_py_name(field) for field in node.scope.where_routine_params]

        query_id = self.collector.append_select_viakey(
            relation=relation_python_name,
            fields=fetched_python_name,
            for_update=for_update)

        self.src.newline("for %s in _select_viakey('%s').fetchOne(" % (py_scope, query_id))

        self.render_via_values(via_values)

        if where_clause:
            self.src.write("where_routine=lambda %s: " % ', '.join(where_routine_params))
            self.visit(where_clause)

        self.src.write("):")
        self.src.indent()

        self.visit(then_stmts)
        self.src.newline("break", no_locations=True)
        self.src.dedent()

        if else_stmts and not (len(else_stmts) == 1 and isinstance(else_stmts[0], ast.Nothing)):
            self.src.newline("else:")
            self.src.indent()
            self.visit(else_stmts)
            self.src.dedent()
