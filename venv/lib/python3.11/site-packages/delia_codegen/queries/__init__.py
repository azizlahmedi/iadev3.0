from functools import cmp_to_key
from operator import itemgetter
from delia_parser import ast, types

from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.queries.gen_alters import Alter
from delia_codegen.queries.gen_deletes import Delete
from delia_codegen.queries.gen_inserts import Insert
from delia_codegen.queries.gen_implicit_select import ImplicitSelect
from delia_codegen.queries.gen_select import Select
from delia_codegen.queries.gen_select_join import SelectJoin
from delia_codegen.queries.gen_select_viakey import SelectViaKey
from delia_codegen.queries.gen_select_where import SelectWhere
from delia_codegen.queries.gen_foreach import ForEach
from delia_codegen.queries.gen_foreach_viakey import ForEachViaKey
from delia_codegen.queries.gen_foreach_join import ForEachJoin
from delia_codegen.convert_type import do_convert, convert_type
from delia_codegen.codeblock import CodeBlockNames
from delia_parser.ast import InnerJoinClause, LeftOuterJoinClause, RightOuterJoinClause, FullOuterJoinClause


JoinClassName = {InnerJoinClause: "InnerJoin", LeftOuterJoinClause: "LeftOuterJoin", RightOuterJoinClause: "RightOuterJoin", FullOuterJoinClause: "FullOuterJoin"}


class Queries(Alter,
              Delete,
              Insert,
              ImplicitSelect,
              Select,
              SelectViaKey,
              SelectWhere,
              ForEach,
              ForEachViaKey,
              SelectJoin,
              ForEachJoin):

    def build_group_list(self, group_clause):
        if group_clause:
            return [(item.scope.name, item.name) for item in group_clause.group_list]
        else:
            return []

    def build_sort_list(self, sort_list):

        def direction_from_instance(direction_instance):
            if isinstance(direction_instance, ast.Descending):
                return "desc"
            else:
                return "asc"

        sort_list = [(item.field.scope.name, item.field.name, direction_from_instance(item.order))
                     for item in sort_list]

        return sort_list

    def render_via_values(self, via_values):
        for value in via_values:
            if isinstance(value, tuple):

                exp = value[0]
                field = value[1]

                if isinstance(exp, ast.Default):
                    self.src.write(self.get_default_value(field))
                else:
                    # Implicit conversion.
                    from_type = exp.type
                    from_pict = exp.picture.picture

                    to_type = field.type
                    to_pict = field.picture.picture

                    convert_function = []
                    convert_function = do_convert(self,
                                                  to_type,
                                                  to_pict,
                                                  from_type,
                                                  from_pict,
                                                  convert_function)

                    for (header, _) in reversed(convert_function):
                        if header is not None:
                            self.src.write(header)

                    self.visit(exp)

                    for (_, footer) in convert_function:
                        if footer is not None:
                            self.src.write(footer)

            else:
                self.visit(value)
            self.src.write(", ")

    def gen_Changing(self, node):
        py_name = adl_name_to_py_name(node.left.name)
        alias = adl_name_to_py_name(node.left.scope)
        self.src.write("%s.changing.%s" % (alias, py_name))

    def gen_NotChanging(self, node):
        self.src.write("not ")
        self.gen_Changing(node)

    def gen_Select(self, node):

        qualified_rel_alias = node.qualified_rel_alias
        join_clause_list = qualified_rel_alias.join_clause_list
        is_where_optimized = qualified_rel_alias.is_where_optimized

        if not is_where_optimized:
            where_clause = qualified_rel_alias.where_clause
        else:
            where_clause = None
        is_via_key = qualified_rel_alias.is_via_key

        if join_clause_list:
            self.select_join(node)
        elif is_via_key:
            self.select_via_key(node)
        elif where_clause:
            self.select_where(node)
        else:
            self.select(node)

    def gen_For(self, node):

        qualified_rel_alias = node.qualified_rel_alias
        is_via_key = qualified_rel_alias.is_via_key
        join_clause_list = qualified_rel_alias.join_clause_list

        if isinstance(node.relation_name.type, types.Source):
            self.for_each_source(node)
        elif join_clause_list:
            self.for_each_join(node)
        elif is_via_key:
            self.for_each_via_key(node)
        else:
            self.for_each(node)

    def gen_AggregateFunction(self, node):
        if node.basic_type is types.Integer():
            self.src.write('int(')

        self.src.write('{}._results[{}]'.format(adl_name_to_py_name(node.parameters[0].scope), node.position))

        if node.basic_type is types.Integer():
            self.src.write(')')

    def build_queries(self):
        relations = self.collector.relations
        insert = self.collector.insert
        update = self.collector.update
        delete = self.collector.delete
        delete_viakey = self.collector.delete_viakey
        select = self.collector.select
        select_join = self.collector.select_join
        select_viakey = self.collector.select_viakey
        foreach = self.collector.foreach
        foreach_join = self.collector.foreach_join

        src = self.source[CodeBlockNames.RELATION_LOCAL]
        for relation in sorted(relations):
            src.newline("_REL_{relation} = _relations['{relation}']".format(relation=relation))

        src = self.source[CodeBlockNames.INSERT]
        for relation in sorted(insert):
            src.newline("self.Insert_param['%s'] = {" % relation.upper())
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            src.dedent()
            src.newline("}")

        src = self.source[CodeBlockNames.ALTER]
        for relation, datas, index in sorted(update, key=itemgetter(0, 2)):
            src.newline("self.Update_param['%s#%d'] = {" % (relation.upper(), index))
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            src.newline("'updated': ")
            for pos, data in enumerate(datas):
                if pos == 0:
                    src.write("(")
                src.write('"%s", ' % adl_name_to_py_name(data))
                if pos == (len(datas) - 1):
                    src.write("),")
            src.dedent()
            src.newline("}")

        src = self.source[CodeBlockNames.DELETE]
        for relation, where, index in sorted(delete, key=itemgetter(0, 2)):
            src.newline("self.Delete_param['%s#%d'] = {" % (relation.upper(), index))
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            if where:
                src.newline("'where': {},".format(where))
            src.dedent()
            src.newline("}")

        src = self.source[CodeBlockNames.DELETE_VIA_KEY]
        for relation in sorted(delete_viakey):
            src.newline("self.DeleteViaKey_param['%s'] = {" % relation.upper())
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            src.dedent()
            src.newline("}")

        src = self.source[CodeBlockNames.SELECT]
        for relation, fields, exprs, group, sort, where, for_update, index in sorted(select, key=itemgetter(0, 7)):
            src.newline("self.Select_param['%s#%d'] = {" % (relation.upper(), index))
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            if fields:
                src.newline("'fetched': ")
                for pos, field in enumerate(fields):
                    if pos == 0:
                        src.write("(")
                    src.write('%s, ' % adl_name_to_py_name(field))
                    if pos == (len(fields) - 1):
                        src.write("),")
            if exprs:
                src.newline("'fetched_expr': ")
                for pos, (sql_funtion, sql_function_default_value, val) in enumerate(exprs):
                    if pos == 0:
                        src.write("(")
                    src.write('({!r}, {}, {}), '.format(sql_funtion, str(sql_function_default_value), val))
                    if pos == (len(exprs) - 1):
                        src.write("),")
            if group:
                src.newline("'group': ")
                for pos, (scope, name) in enumerate(group):
                    if pos == 0:
                        src.write("(")
                    src.write("(_REL_%s, '%s'), " % (adl_name_to_py_name(scope), adl_name_to_py_name(name)))
                    if pos == (len(group) - 1):
                        src.write("),")
            if sort:
                src.newline("'sort': ")
                for pos, (_, name, direction) in enumerate(sort):
                    if pos == 0:
                        src.write("(")
                    src.write("(_REL_%s, '%s', '%s'), " % (relation, adl_name_to_py_name(name), direction))
                    if pos == (len(sort) - 1):
                        src.write("),")
            if where:
                src.newline("'where': {},".format(where))
            if for_update:
                src.newline("'for_update': True,")

            src.dedent()
            src.newline("}")

        src = self.source[CodeBlockNames.SELECT_JOIN]
        for relation, fields, default_values, exprs, join, group, sort, where, index in sorted(select_join, key=itemgetter(0, 8)):
            src.newline("self.SelectJoin_param['%s#%d'] = {" % (relation.upper(), index))
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            if fields:
                src.newline("'fetched': ")
                for pos, field in enumerate(fields):
                    if pos == 0:
                        src.write("(")
                    src.write('%s, ' % adl_name_to_py_name(field))
                    if pos == (len(fields) - 1):
                        src.write("),")
            if default_values:
                src.newline("'default_values': ")
                for pos, value in enumerate(default_values):
                    if pos == 0:
                        src.write("(")
                    src.write('%s' % value)
                    src.write(", ")
                    if pos == (len(default_values) - 1):
                        src.write("),")
            if exprs:
                src.newline("'fetched_expr': ")
                for pos, (sql_funtion, sql_function_default_value, val) in enumerate(exprs):
                    if pos == 0:
                        src.write("(")
                    src.write('({!r}, {}, {}), '.format(sql_funtion, str(sql_function_default_value), val))
                    if pos == (len(exprs) - 1):
                        src.write("),")

            src.newline("'join': (".format(where))
            src.indent()
            for join_class_name, join_relation, join_fields, join_default_values, join_expression, join_clause in join:
                src.newline('%s(' % join_class_name)
                src.indent()
                src.newline("relation=_REL_%s," % join_relation)

                if join_fields:
                    src.newline("fetched=")
                    for pos, field in enumerate(join_fields):
                        if pos == 0:
                            src.write("(")
                        src.write('%s, ' % adl_name_to_py_name(field))
                        if pos == (len(join_fields) - 1):
                            src.write("),")

                if join_default_values:
                    src.newline("default_values=")
                    for pos, value in enumerate(join_default_values):
                        if pos == 0:
                            src.write("(")
                        src.write('%s, ' % value)
                        if pos == (len(join_default_values) - 1):
                            src.write("),")

                if join_expression:
                    src.newline("fetched_expr=")
                    src.write('{},'.format(join_expression))

                src.newline("expr=")
                src.write('{}'.format(join_clause))

                src.dedent()
                src.newline('),')

            src.dedent()
            src.newline("),")

            if where:
                src.newline("'where': {},".format(where))
            if group:
                src.newline("'group': ")
                for pos, (scope, name) in enumerate(group):
                    if pos == 0:
                        src.write("(")
                    src.write("(_REL_%s, '%s'), " % (adl_name_to_py_name(scope), adl_name_to_py_name(name)))
                    if pos == (len(group) - 1):
                        src.write("),")
            if sort:
                src.newline("'sort': ")
                for pos, (scope, name, direction) in enumerate(sort):
                    if pos == 0:
                        src.write("(")
                    src.write("(_REL_%s, '%s', '%s'), " % (adl_name_to_py_name(scope), adl_name_to_py_name(name), direction))
                    if pos == (len(sort) - 1):
                        src.write("),")

            src.dedent()
            src.newline("}")

        src = self.source[CodeBlockNames.SELECT_VIA_KEY]
        for relation, fields, for_update, index in sorted(select_viakey, key=itemgetter(0, 3)):
            src.newline("self.SelectViaKey_param['%s#%d'] = {" % (relation.upper(), index))
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            if fields:
                src.newline("'fetched': ")
                for pos, field in enumerate(fields):
                    if pos == 0:
                        src.write("(")
                    src.write('%s, ' % adl_name_to_py_name(field))
                    if pos == (len(fields) - 1):
                        src.write("),")
            if for_update:
                src.newline("'for_update': True,")
            src.dedent()
            src.newline("}")

        src = self.source[CodeBlockNames.FOR_EACH]
        for relation, fields, exprs, group, sort, where, for_update, index in sorted(foreach, key=itemgetter(0, 7)):
            src.newline("self.ForEach_param['%s#%d'] = {" % (relation.upper(), index))
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            if fields:
                src.newline("'fetched': ")
                for pos, field in enumerate(fields):
                    if pos == 0:
                        src.write("(")
                    src.write('%s, ' % adl_name_to_py_name(field))
                    if pos == (len(fields) - 1):
                        src.write("),")
            if exprs:
                src.newline("'fetched_expr': ")
                for pos, (sql_funtion, sql_function_default_value, val) in enumerate(exprs):
                    if pos == 0:
                        src.write("(")
                    src.write('({!r}, {}, {}), '.format(sql_funtion, str(sql_function_default_value), val))
                    if pos == (len(exprs) - 1):
                        src.write("),")
            if group:
                src.newline("'group': ")
                for pos, (scope, name) in enumerate(group):
                    if pos == 0:
                        src.write("(")
                    src.write("(_REL_%s, '%s'), " % (adl_name_to_py_name(scope), adl_name_to_py_name(name)))
                    if pos == (len(group) - 1):
                        src.write("),")
            if sort:
                src.newline("'sort': ")
                for pos, (_, name, direction) in enumerate(sort):
                    if pos == 0:
                        src.write("(")
                    src.write("(_REL_%s, '%s', '%s'), " % (relation, adl_name_to_py_name(name), direction))
                    if pos == (len(sort) - 1):
                        src.write("),")
            if where:
                src.newline("'where': {},".format(where))
            if for_update:
                src.newline("'for_update': True,")

            src.dedent()
            src.newline("}")

        src = self.source[CodeBlockNames.FOR_EACH_JOIN]
        for relation, fields, default_values, exprs, join, group, sort, where, index in sorted(foreach_join, key=itemgetter(0, 8)):
            src.newline("self.ForEachJoin_param['%s#%d'] = {" % (relation.upper(), index))
            src.indent()
            src.newline("'relation': _REL_%s," % relation)
            if fields:
                src.newline("'fetched': ")
                for pos, field in enumerate(fields):
                    if pos == 0:
                        src.write("(")
                    src.write('%s, ' % adl_name_to_py_name(field))
                    if pos == (len(fields) - 1):
                        src.write("),")
            if default_values:
                src.newline("'default_values': ")
                for pos, value in enumerate(default_values):
                    if pos == 0:
                        src.write("(")
                    src.write('%s' % value)
                    src.write(", ")
                    if pos == (len(default_values) - 1):
                        src.write("),")
            if exprs:
                src.newline("'fetched_expr': ")
                for pos, (sql_funtion, sql_function_default_value, val) in enumerate(exprs):
                    if pos == 0:
                        src.write("(")
                    src.write('({!r}, {}, {}), '.format(sql_funtion, str(sql_function_default_value), val))
                    if pos == (len(exprs) - 1):
                        src.write("),")

            src.newline("'join': (".format(where))
            src.indent()
            for join_class_name, join_relation, join_fields, join_default_values, join_expression, join_clause in join:
                src.newline('%s(' % join_class_name)
                src.indent()
                src.newline("relation=_REL_%s," % join_relation)

                if join_fields:
                    src.newline("fetched=")
                    for pos, field in enumerate(join_fields):
                        if pos == 0:
                            src.write("(")
                        src.write('%s, ' % adl_name_to_py_name(field))
                        if pos == (len(join_fields) - 1):
                            src.write("),")

                if join_default_values:
                    src.newline("default_values=")
                    for pos, value in enumerate(join_default_values):
                        if pos == 0:
                            src.write("(")
                        src.write('%s, ' % value)
                        if pos == (len(join_default_values) - 1):
                            src.write("),")

                if join_expression:
                    src.newline("fetched_expr=")
                    src.write('{},'.format(join_expression))

                src.newline("expr=")
                src.write('{}'.format(join_clause))

                src.dedent()
                src.newline('),')

            src.dedent()
            src.newline("),")

            if where:
                src.newline("'where': {},".format(where))
            if group:
                src.newline("'group': ")
                for pos, (scope, name) in enumerate(group):
                    if pos == 0:
                        src.write("(")
                    src.write("(_REL_%s, '%s'), " % (adl_name_to_py_name(scope), adl_name_to_py_name(name)))
                    if pos == (len(group) - 1):
                        src.write("),")
            if sort:
                src.newline("'sort': ")
                for pos, (scope, name, direction) in enumerate(sort):
                    if pos == 0:
                        src.write("(")
                    src.write("(_REL_%s, '%s', '%s'), " % (adl_name_to_py_name(scope), adl_name_to_py_name(name), direction))
                    if pos == (len(sort) - 1):
                        src.write("),")

            src.dedent()
            src.newline("}")

    def select_join(self, node):
        is_foreach = isinstance(node, ast.For)
        relation = node.relation_name
        relation_python_name = adl_name_to_py_name(relation)
        qualified_rel_alias = node.qualified_rel_alias
        join_clause_list = qualified_rel_alias.join_clause_list

        assert(not node.got_alter)
        if is_foreach:
            assert(not node.report_names)
            assert(not node.got_changing)

        grouped_clause = qualified_rel_alias.grouped_clause
        sort_list = qualified_rel_alias.sort_list

        via_expressions = qualified_rel_alias.via_expressions
        via_values = qualified_rel_alias.via_values

        grouped_fields = self.build_group_list(grouped_clause)
        sorted_fields = self.build_sort_list(sort_list)
        if via_expressions:
            where_sql = str(via_expressions)
        else:
            where_sql = None

        fetched = []
        fetched_default_values = []
        for col in relation.definition.columns:
            if col in node.scope.fetched_columns:
                fetched.append(col)
                fetched_default_values.append(self.get_default_value(col, force_literal_value=True))
        fetched_python_name = ["'%s'" % adl_name_to_py_name(fetch) for fetch in fetched]
        fetched_expression = node.scope.fetched_expressions

        py_scopes = [adl_name_to_py_name(node.scope)]
        join_list = []
        values = []

        for join_clause in join_clause_list:
            join_relation_name = adl_name_to_py_name(join_clause.relation_name)
            join_scope = join_clause.scope
            join_fetched = []
            join_fetched_default_values = []
            for col in join_clause.relation_name.definition.columns:
                if col in join_scope.fetched_columns:
                    join_fetched.append(col)
                    join_fetched_default_values.append(self.get_default_value(col, force_literal_value=True))
            join_fetched_python_name = ["'%s'" % adl_name_to_py_name(fetch) for fetch in join_fetched]
            join_fetched_expression = join_scope.fetched_expressions
            join_expressions = str(join_clause.join_expressions)
            join_values = join_clause.join_values

            py_scopes.append(adl_name_to_py_name(join_scope))
            join_list.append((JoinClassName[type(join_clause)], join_relation_name, join_fetched_python_name,
                              join_fetched_default_values, join_fetched_expression, join_expressions))
            values += join_values

        if is_foreach:
            collector = self.collector.append_foreach_join
        else:
            collector = self.collector.append_select_join

        query_id = collector(
            relation=relation_python_name,
            fields=fetched_python_name,
            default_values=fetched_default_values,
            expr=fetched_expression,
            group=grouped_fields,
            sort=sorted_fields,
            join=join_list,
            where=where_sql)

        if is_foreach:
            self.src.newline("for %s in _foreach_join('%s')" % (", ".join(py_scopes), query_id))
            self.src.write(".fetchMany(")
        else:
            self.src.newline("for %s in _select_join('%s')" % (", ".join(py_scopes), query_id))
            self.src.write(".fetchOne(")

        values += via_values
        if values:
            self.render_via_values(values)
        self.src.write("):")

        self.src.indent()
        if is_foreach:
            self.visit(node.stmts)
            self.src.dedent()
        else:
            self.visit(node.then_else_clause.then_stmts)
            self.src.newline("break", no_locations=True)
            self.src.dedent()
            if node.then_else_clause.else_stmts and \
                    not (len(node.then_else_clause.else_stmts) == 1 and
                         isinstance(node.then_else_clause.else_stmts[0], ast.Nothing)):
                self.src.newline("else:")
                self.src.indent()
                self.visit(node.then_else_clause.else_stmts)
                self.src.dedent()
