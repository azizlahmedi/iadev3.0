from delia_parser import ast
from delia_codegen.utils import adl_name_to_py_name


class Delete:

    def gen_DeleteRelation(self, node):
        relation = node.relation_name
        relation_python_name = adl_name_to_py_name(relation)
        qualified_rel_alias = node.qualified_rel_alias

        is_where_optimized = qualified_rel_alias.is_where_optimized
        if not is_where_optimized:
            where_clause = qualified_rel_alias.where_clause
        else:
            where_clause = None

        via_expressions = qualified_rel_alias.via_expressions
        via_values = qualified_rel_alias.via_values
        is_via_key = qualified_rel_alias.is_via_key

        if is_via_key:

            query_id = self.collector.append_delete_viakey(relation=relation_python_name)

            self.src.newline("_delete_viakey('%s').execute(" % query_id)

            self.src.write("(")
            self.render_via_values(via_values)
            self.src.write(")")

            self.src.write(")")

        else:

            if node.all or not via_expressions:
                where_sql = None
            else:
                where_sql = str(via_expressions)

            query_id = self.collector.append_delete(relation=relation_python_name, where=where_sql)

            if not where_clause:
                self.src.newline("_delete('%s').execute((" % query_id)
                if where_sql:
                    self.render_via_values(via_values)
                self.src.write(")")
            else:
                where_routine_params = [adl_name_to_py_name(field) for field in node.scope.where_routine_params]
                self.src.newline("_delete('%s').execute_where_routine((" % query_id)
                if where_sql:
                    self.render_via_values(via_values)
                self.src.write("), ")
                self.src.write("where_routine=lambda %s: " % ', '.join(where_routine_params))
                self.visit(where_clause)

            self.src.write(")")
