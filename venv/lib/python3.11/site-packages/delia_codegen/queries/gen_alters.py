from delia_codegen.utils import adl_name_to_py_name
from delia_codegen.convert_type import do_convert


class Alter:

    def gen_Alter(self, node):

        if node.to_skip:
            self.src.newline("pass  # SKIP ALTER")
            return

        py_scope = adl_name_to_py_name(node.scope)
        relation_definition = node.scope.relation_definition
        relation_python_name = adl_name_to_py_name(relation_definition.name)
        using_parametres = node.using_parametres

        query_id = self.collector.append_update(relation=relation_python_name, datas=using_parametres.keys())

        self.src.newline("_update('%s').execute(" % query_id)
        self.src.write("keys={}._alter_keys, ".format(py_scope))
        self.src.write("datas=")
        self.src.write("(")

        # Implicit conversion
        for data, value in using_parametres.items():

            from_type = value.type
            from_pict = value.picture.picture

            to_type = data.type
            to_pict = data.picture.picture

            convert_function = []
            convert_function = do_convert(self,
                                          to_type,
                                          to_pict,
                                          from_type,
                                          from_pict,
                                          convert_function)

            for (header, _) in reversed(convert_function):
                if header is not None:
                    self.src.write(header)

            self.visit(value)

            for (_, footer) in convert_function:
                if footer is not None:
                    self.src.write(footer)

            self.src.write(", ")

        self.src.write("))")
