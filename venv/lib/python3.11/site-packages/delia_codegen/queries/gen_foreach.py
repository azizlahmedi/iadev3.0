from delia_parser import ast
from delia_codegen.utils import adl_name_to_py_name


class ForEach:

    def for_each(self, node):

        relation = node.relation_name
        relation_python_name = adl_name_to_py_name(relation)
        py_scope = adl_name_to_py_name(node.scope)
        qualified_rel_alias = node.qualified_rel_alias

        is_where_optimized = qualified_rel_alias.is_where_optimized
        if not is_where_optimized:
            where_clause = qualified_rel_alias.where_clause
        else:
            where_clause = None

        sort_list = qualified_rel_alias.sort_list
        grouped_clause = qualified_rel_alias.grouped_clause

        via_expressions = qualified_rel_alias.via_expressions
        via_values = qualified_rel_alias.via_values

        for_update = node.got_alter
        changing_used = node.got_changing

        grouped_fields = self.build_group_list(grouped_clause)
        sorted_fields = self.build_sort_list(sort_list)
        if via_expressions:
            where_sql = str(via_expressions)
        else:
            where_sql = None

        report_names = node.report_names

        fetched = []
        for col in relation.definition.columns:
            if col in node.scope.fetched_columns:
                fetched.append(col)

        fetched_python_name = ["'%s'" % adl_name_to_py_name(fetch) for fetch in fetched]
        fetched_expression = node.scope.fetched_expressions
        where_routine_params = [adl_name_to_py_name(field) for field in node.scope.where_routine_params]

        query_id = self.collector.append_foreach(
            relation=relation_python_name,
            fields=fetched_python_name,
            expr=fetched_expression,
            group=grouped_fields,
            sort=sorted_fields,
            where=where_sql,
            for_update=for_update)

        # Start the report
        if report_names:
            for report in report_names:
                self.report_begin(report)

        self.src.newline("for %s in _foreach('%s')" % (py_scope, query_id))
        if changing_used:
            self.src.write(".fetchManyChanging(")
        else:
            self.src.write(".fetchMany(")

        if where_sql:
            self.render_via_values(via_values)

        if where_clause:
            self.src.write("where_routine=lambda %s: " % ', '.join(where_routine_params))
            self.visit(where_clause)

        self.src.write("):")

        self.src.indent()

        # Set the context of the report with the current row.
        if report_names:
            for report in report_names:
                self.report_start(report)
                self.cumulate(report)

        order_fields = [field.field.name for field in sort_list]

        if report_names:
            for report in report_names:
                report_name = adl_name_to_py_name(report.definition.name)
                report_group_heading_condition = [condition.field_name
                                                  for condition in report.definition.conditions
                                                  if isinstance(condition, ast.GroupHeading)]

                for field in order_fields:
                    if field in report_group_heading_condition:
                        self.src.newline("if {scope}.changing_prev.{field}:".format(
                            scope=py_scope,
                            field=adl_name_to_py_name(field)))
                        self.src.indent()
                        self.src.newline("{report}.group_heading_{condition}()".format(
                            condition=adl_name_to_py_name(field),
                            report=report_name))
                        self.src.dedent()

        self.visit(node.stmts)

        # Call the GROUP.FOOTING
        if report_names:
            for report in report_names:
                report_name = adl_name_to_py_name(report.definition.name)
                report_group_footing_condition = [condition.field_name
                                                  for condition in report.definition.conditions
                                                  if isinstance(condition, ast.GroupFooting)]

                for field in reversed(order_fields):
                    if field in report_group_footing_condition:
                        self.src.newline("if {scope}.changing.{field}:".format(
                            scope=py_scope,
                            field=adl_name_to_py_name(field)))
                        self.src.indent()
                        self.src.newline("{report}.group_footing_{condition}()".format(
                            condition=adl_name_to_py_name(field),
                            report=report_name))
                        self.src.dedent()

        self.src.dedent()

        if report_names:
            for report in report_names:
                self.report_end(report)
