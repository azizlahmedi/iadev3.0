from delia_codegen.utils import adl_name_to_py_name

DEBUG = False


def count_relation(relation, queries):
    count = 0
    for rel, *_ in queries:
        if rel == relation:
            count += 1
    return count


class Collector:

    def __init__(self):
        self._fields = []
        self._arrays = []
        self._relations = []
        self._fields_in_relations = []
        self._select_viakey = []
        self._select = []
        self._select_join = []
        self._foreach = []
        self._foreach_join = []
        self._insert = []
        self._delete_viakey = []
        self._delete = []
        self._update = []

    def append_field(self, field):
        field_name = adl_name_to_py_name(field.name)
        self._fields.append(field_name)

    def append_array(self, array):
        array_name = adl_name_to_py_name(array.name)
        self._arrays.append(array_name)

    def append_relation(self, relation):
        relation_name = adl_name_to_py_name(relation.name)
        self._relations.append(relation_name)
        for column in relation.columns:
            field_name = adl_name_to_py_name(column.value)
            if field_name not in self._fields_in_relations:
                self._fields_in_relations.append(field_name)

    @classmethod
    def compare_sort(kls, sort1, sort2):
        if not sort1 and not sort2:
            return True
        if (sort1 and not sort2) or (not sort1 and sort2):
            return False
        if len(sort1) != len(sort2):
            return False
        return all(sort1[i] == sort2[i] for i in range(len(sort1)))

    @classmethod
    def compare_group(kls, group1, group2):
        return kls.compare_sort(group1, group2)

    def append_select_viakey(self, relation, fields, for_update):
        for _relation, _fields, _for_update, pos in self._select_viakey:
            if (
                    _relation == relation and
                    _for_update == for_update and
                    set(_fields) == set(fields)
            ):
                if DEBUG:
                    print("SELECT.VIA.KEY:", end=' ')
                    print(_relation, _fields, _for_update, end=' ')
                    print("==", end=' ')
                    print(relation, fields, for_update)
                break
        else:
            pos = count_relation(relation, self._select_viakey)
            self._select_viakey.append((relation, fields, for_update, pos))

        return "%s#%d" % (relation.upper(), pos)

    def append_select(self, relation, fields, expr, group, sort, where, for_update):
        compare_group = self.compare_group
        compare_sort = self.compare_sort
        for _relation, _fields, _expr, _group, _sort, _where, _for_update, pos in self._select:
            if (
                    _relation == relation and
                    _for_update == for_update and
                    set(_fields) == set(fields) and
                    _expr == expr and
                    compare_group(_group, group) and
                    compare_sort(_sort, sort) and
                    _where == where
            ):
                if DEBUG:
                    print("SELECT:", end=' ')
                    print(_relation, _fields, _expr, _group, _sort, _where, _for_update, end=' ')
                    print("==", end=' ')
                    print(relation, fields, expr, group, sort, where, for_update)
                break
        else:
            pos = count_relation(relation, self._select)
            self._select.append((relation, fields, expr, group, sort, where, for_update, pos))
        return "%s#%d" % (relation.upper(), pos)

    def append_select_join(self, relation, fields, default_values, expr, join, group, sort, where):
        compare_group = self.compare_group
        compare_sort = self.compare_sort
        for _relation, _fields, _default_values, _expr, _join, _group, _sort, _where, pos in self._foreach_join:
            if (
                    _relation == relation and
                    set(_fields) == set(fields) and
                    _expr == expr and
                    compare_group(_group, group) and
                    compare_sort(_sort, sort) and
                    _where == where and
                    _join == join
            ):
                if DEBUG:
                    print("FOR.EACH.JOIN:", end=' ')
                    print(_relation, _fields, _default_values, _expr, _join, _group, _sort, _where, end=' ')
                    print("==", end=' ')
                    print(relation, fields, default_values, expr, join, group, sort, where)
                break
        else:
            pos = count_relation(relation, self._select_join)
            self._select_join.append((relation, fields, default_values, expr, join, group, sort, where, pos))
        return "%s#%d" % (relation.upper(), pos)

    def append_foreach(self, relation, fields, expr, group, sort, where, for_update):
        compare_group = self.compare_group
        compare_sort = self.compare_sort
        for _relation, _fields, _expr, _group, _sort, _where, _for_update, pos in self._foreach:
            if (
                    _relation == relation and
                    _for_update == for_update and
                    set(_fields) == set(fields) and
                    _expr == expr and
                    compare_group(_group, group) and
                    compare_sort(_sort, sort) and
                    _where == where
            ):
                if DEBUG:
                    print("FOR.EACH:", end=' ')
                    print(_relation, _fields, _expr, _group, _sort, _where, _for_update, end=' ')
                    print("==", end=' ')
                    print(relation, fields, expr, group, sort, where, for_update)
                break
        else:
            pos = count_relation(relation, self._foreach)
            self._foreach.append((relation, fields, expr, group, sort, where, for_update, pos))
        return "%s#%d" % (relation.upper(), pos)

    def append_foreach_join(self, relation, fields, default_values, expr, join, group, sort, where):
        compare_group = self.compare_group
        compare_sort = self.compare_sort
        for _relation, _fields, _default_values, _expr, _join, _group, _sort, _where, pos in self._foreach_join:
            if (
                    _relation == relation and
                    set(_fields) == set(fields) and
                    _expr == expr and
                    compare_group(_group, group) and
                    compare_sort(_sort, sort) and
                    _where == where and
                    _join == join
            ):
                if DEBUG:
                    print("FOR.EACH.JOIN:", end=' ')
                    print(_relation, _fields, _default_values, _expr, _join, _group, _sort, _where, end=' ')
                    print("==", end=' ')
                    print(relation, fields, default_values, expr, join, group, sort, where)
                break
        else:
            pos = count_relation(relation, self._foreach_join)
            self._foreach_join.append((relation, fields, default_values, expr, join, group, sort, where, pos))
        return "%s#%d" % (relation.upper(), pos)

    def append_insert(self, relation):
        if relation not in self._insert:
            self._insert.append(relation)
        return "%s" % relation.upper()

    def append_delete_viakey(self, relation):
        if relation not in self._delete_viakey:
            self._delete_viakey.append(relation)
        return "%s" % relation.upper()

    def append_delete(self, relation, where):
        for _relation, _where, pos in self._delete:
            if (
                    _relation == relation and
                    _where == where
            ):
                if DEBUG:
                    print("DELETE:", end=' ')
                    print(_relation, _where, end=' ')
                    print("==", end=' ')
                    print(relation, where)
                break
        else:
            pos = count_relation(relation, self._delete)
            self._delete.append((relation, where, pos))
        return "%s#%d" % (relation.upper(), pos)

    def append_update(self, relation, datas):
        for _relation, _datas, pos in self._update:
            if (
                    _relation == relation and
                    set(_datas) == set(datas)
            ):
                if DEBUG:
                    print("UPDATE:", end=' ')
                    print(_relation, _datas, end=' ')
                    print("==", end=' ')
                    print(relation, datas)
                break
        else:
            pos = count_relation(relation, self._update)
            self._update.append((relation, datas, pos))
        return "%s#%d" % (relation.upper(), pos)

    @property
    def fields(self):
        return self._fields

    @property
    def arrays(self):
        return self._arrays

    @property
    def relations(self):
        return self._relations

    @property
    def fields_in_relations(self):
        return self._fields_in_relations

    @property
    def select_viakey(self):
        return self._select_viakey

    @property
    def select(self):
        return self._select

    @property
    def select_join(self):
        return self._select_join

    @property
    def foreach(self):
        return self._foreach

    @property
    def foreach_join(self):
        return self._foreach_join

    @property
    def insert(self):
        return self._insert

    @property
    def delete_viakey(self):
        return self._delete_viakey

    @property
    def delete(self):
        return self._delete

    @property
    def update(self):
        return self._update
