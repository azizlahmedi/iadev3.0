# -*- coding: utf-8 -*-
import os

import polib

from delia_mlg.backends import french_lowercase

to_be_replaced = '\ue000'


def find(offset, msgid, legacy_msgid):
    index = msgid[offset:].find(legacy_msgid)
    if index != -1:
        return index + offset
    return -1


def propagate(candidates, msgstr, offset, parts, count_parts):
    if to_be_replaced not in msgstr:
        candidates.append((count_parts, msgstr))
        return
    if len(parts) == 0:
        return
    current_offset, legacy_msgid, legacy_msgstr = parts[0]
    # Add the current part
    if current_offset >= offset:
        new_offset = current_offset + len(legacy_msgstr)
        new_msgstr = msgstr[:current_offset] + legacy_msgstr + msgstr[new_offset:]
        if to_be_replaced not in new_msgstr[:new_offset]:
            propagate(candidates, new_msgstr, new_offset, parts[1:], count_parts + 1)
    # Do not add the current part
    if to_be_replaced not in msgstr[:offset]:
        propagate(candidates, msgstr, offset, parts[1:], count_parts)


class MergeBackend(object):
    def __init__(self, sanity_backend):
        self.sanity_backend = sanity_backend

    def load_legacy_msgids(self, lang, po_path):
        msgids = {}
        if not os.path.isfile(po_path):
            return msgids
        msgids_strip = {}
        po = polib.pofile(po_path, encoding='utf-8')
        for entry in po.translated_entries():
            msgid = entry.msgid
            msgstr = self.sanity_backend.sanitize(lang, msgid, entry.msgstr)
            if msgstr:
                msgids[msgid] = msgstr
                min_index = min(len(msgid) - len(msgid.lstrip()), len(msgstr) - len(msgstr.lstrip()))
                max_index = len(msgid) - min(len(msgid) - len(msgid.rstrip()), len(msgstr) - len(msgstr.rstrip()))
                if min_index != max_index:
                    msgids_strip[msgid[min_index:max_index]] = msgstr[min_index:max_index]
        for msgid, msgstr in msgids_strip.items():
            if msgid not in msgids:
                msgids[msgid] = msgstr
        return msgids

    def merge(self, lang, msgid, legacy_msgids):
        parts = []
        for legacy_msgid, legacy_msgstr in legacy_msgids.items():
            offset = 0
            index = find(offset, msgid, legacy_msgid)
            while index != -1:
                parts.append((index, legacy_msgid, legacy_msgstr))
                offset = index + 1
                index = find(offset, msgid, legacy_msgid)
        parts.sort(key=lambda p: p[0])
        msgstr = ''
        for c in msgid:
            if c.lower() in french_lowercase:
                msgstr += to_be_replaced
            else:
                msgstr += c
        candidates = []
        propagate(candidates, msgstr, 0, parts, 0)
        if len(candidates) == 0:
            return None
        candidates.sort(key=lambda c: c[0])
        msgstr = candidates[0][1]
        return self.sanity_backend.sanitize(lang, msgid, msgstr)
