# -*- coding: utf-8 -*-
import configparser
import json
import logging
import os
import shutil
import sys
import tempfile

import polib

from delia_mlg import backends, merge, tools, consts, legacy_merge

log = logging.getLogger(__name__)


class Services(object):
    def __init__(self, config_backend, sanity_backend, source_backend, translation_backend_redis, frame_backend, untranslated_backend, merge_backend, redis_backend, gt_translate_backend, force_backend):
        self.config_backend = config_backend
        self.sanity_backend = sanity_backend
        self.source_backend = source_backend
        self.translation_backend_redis = translation_backend_redis
        self.frame_backend = frame_backend
        self.untranslated_backend = untranslated_backend
        self.merge_backend = merge_backend
        self.redis_backend = redis_backend
        self.gt_translate_backend = gt_translate_backend
        self.force_backend = force_backend

    # =========================================================================
    # INTERNAL
    # =========================================================================

    def get_svn_procedures(self, project_path):
        project_config = configparser.ConfigParser()
        project_config.read(os.path.join(project_path, 'project.cfg'))
        schema_version = project_config.getint('schema', 'version')
        # Check if look on MV or on file system
        if schema_version > 2009:
            # Look for .adl file, bib* and schema excluded
            for root, dirs, files in os.walk(os.path.join(project_path, 'adl', 'src', 'mag')):
                for f in files:
                    basename, ext = os.path.splitext(f)
                    if ext == '.adl' and not basename.startswith('bib_') and basename != consts.schema_name:
                        yield basename.replace('_', '.')
        else:
            # Get MV
            sys.path.insert(0, os.path.dirname(os.path.join(project_path, project_config.get('mv', 'path'))))
            # Import MV
            import mv
            # Process
            for procedure_name, procedure_data in mv.mv[schema_version].items():
                if procedure_data.get('svn'):
                    yield procedure_name

    def append_msgids(self, translation_backend, procedure_name, msgids):
        # Go threw the languages
        for lang in self.source_backend.languages():
            # Get the PO
            po = self.source_backend.get_procedure_po(procedure_name, lang)
            # Store of PO was changed
            changed = False
            # Go threw messages and append it if not already in
            for msgid in msgids:
                # Check if already in
                if po.find(msgid) is None:
                    # If not, create the entry
                    entry = polib.POEntry(msgid=msgid)
                    # Translate it
                    translation_backend.translate_po_entry(entry, lang)
                    # Add it to the PO
                    po.append(entry)
                    # Set the flag
                    changed = True
            # If changed and save asked, actually save
            if changed:
                po.save()

    def translate_all_po(self, translation_backend, procedure_name, languages=None, force=False, lookup=False):
        # Get languages
        languages = languages if languages else self.source_backend.languages()
        # Go threw languages
        for lang in languages:
            # Get PO path
            po = self.source_backend.get_procedure_po(procedure_name, lang)
            # Translate and check if changed
            changed = translation_backend.translate_po(po, force=force, lookup=lookup)
            # If changed and save asked, actually save
            if changed:
                po.save()

    # =========================================================================
    # ENDPOINTS
    # =========================================================================

    def languages(self):
        """
        Get languages.
        """
        return self.source_backend.languages()

    def translate(self, procedure_names, lang=None, force=False):
        """
        For each procedure, update its .po, translate all languages if none are specified, and finally commit the result.
        """
        # Process
        for procedure_name in procedure_names:
            # Update procedure
            self.source_backend.update_procedure(procedure_name)
            # Translate
            self.translate_all_po(self.translation_backend_redis, procedure_name, force=force, languages=[lang, ] if lang else None)
            # Commit POs
            self.source_backend.commit_procedure(procedure_name)

    def gettext_extract(self, project_path, procedure_names):
        # Process
        for procedure_name in procedure_names:
            # Get messages
            msgids = self.gt_translate_backend.parse(project_path, procedure_name)
            # Update POs
            self.source_backend.update_procedure(procedure_name)
            # Add messages
            self.append_msgids(self.translation_backend_redis, procedure_name, msgids)
            # Commit POs
            self.source_backend.commit_procedure(procedure_name)

    def frame_extract(self, project_path, procedure_names):
        # Process
        for procedure_name in procedure_names:
            # Get messages
            msgids = self.frame_backend.parse_all(project_path, procedure_name)
            # Update POs
            self.source_backend.update_procedure(procedure_name)
            # Add messages
            self.append_msgids(self.translation_backend_redis, procedure_name, msgids)
            # Commit POs
            self.source_backend.commit_procedure(procedure_name)

    def integrate_untranslated(self, untranslated_dir):
        # Load untranslated
        untranslated = self.untranslated_backend.walk(untranslated_dir)
        # Process
        for procedure_name, msgids in untranslated.items():
            # Update POs
            self.source_backend.update_procedure(procedure_name)
            # Add messages
            self.append_msgids(self.translation_backend_redis, procedure_name, msgids)
            # Commit POs
            self.source_backend.commit_procedure(procedure_name)

    def translator_extract(self, procedure_names, lang, output_path):
        # Get or create PO
        translator_po = backends.POFileWrapper(output_path, lang)
        # Process
        for procedure_name in procedure_names:
            # Update POs
            self.source_backend.update_procedure(procedure_name)
            # Get PO path
            po = self.source_backend.get_procedure_po(procedure_name, lang)
            # Go threw the entries to fill translator PO
            for entry in po:
                # If already in translator PO, do nothing
                if translator_po.find(entry.msgid) is None:
                    # Create a new entry
                    new_entry = polib.POEntry(msgid=entry.msgid)
                    # Try to translate it
                    if not self.translation_backend_redis.translate_po_entry(new_entry, lang):
                        # If no exact match, try to guess
                        # TODO: guess
                        pass
                    # Add to the translator PO
                    translator_po.append(new_entry)
        # Save
        translator_po.save(sort=False)

    def versioning(self, project_path, procedure_names, json_path):
        # Store revisions
        revisions = {}
        # Process
        for procedure_name in procedure_names:
            # Get messages from frames
            msgids = self.frame_backend.parse_all(project_path, procedure_name)
            # Get messages from GETTEXT
            msgids.update(self.gt_translate_backend.parse(project_path, procedure_name))
            # Update POs
            revision = self.source_backend.update_procedure(procedure_name)
            # Add messages
            self.append_msgids(self.translation_backend_redis, procedure_name, msgids)
            # Translate
            self.translate_all_po(self.translation_backend_redis, procedure_name)
            # Commit POs and store new revision
            new_revision = self.source_backend.commit_procedure(procedure_name)
            if new_revision is None:
                new_revision = revision
            revisions[procedure_name] = new_revision
        # Check if dump revisions in JSON
        if json_path:
            with open(json_path, 'w', encoding='utf-8') as json_fd:
                json.dump(revisions, json_fd)

    def bulk_extract(self, project_path=None, untranslated_dir=None):
        # Check if project path is specified
        if project_path:
            # Process
            for procedure_name in self.get_svn_procedures(project_path):
                # Get messages from frames
                msgids = self.frame_backend.parse_all(project_path, procedure_name)
                # Get messages from GETTEXT
                msgids.update(self.gt_translate_backend.parse(project_path, procedure_name))
                # Add messages
                self.append_msgids(self.translation_backend_redis, procedure_name, msgids)
                # Translate
                self.translate_all_po(self.translation_backend_redis, procedure_name)
        # Check if untranslated directory specified
        if untranslated_dir:
            # Load untranslated
            untranslated = self.untranslated_backend.walk(untranslated_dir)
            # Process
            for procedure_name, msgids in untranslated.items():
                # Add messages
                self.append_msgids(self.translation_backend_redis, procedure_name, msgids)
                # Translate
                self.translate_all_po(self.translation_backend_redis, procedure_name)

    def bulk_translate2(self, project_path, legacy_po_dir=None):
        # Process
        global_po_translation_backend = backends.TranslationBackend(
            backends.GlobalPOBackend(self.source_backend, self.sanity_backend),
            self.sanity_backend,
        )
        for procedure_name in self.get_svn_procedures(project_path):
            # Translate
            # self.translate_all_po(self.translation_backend_redis, procedure_name)
            self.translate_all_po(
                global_po_translation_backend,
                procedure_name,
                lookup=True,  # TODO: delete
            )

    def bulk_translate(self, project_path, legacy_po_dir=None):
        # Process
        for procedure_name in self.get_svn_procedures(project_path):
            # Translate
            self.translate_all_po(self.translation_backend_redis, procedure_name)
            # self.translate_all_po(backends.TranslationBackend(backends.GlobalPOBackend(self.source_backend, self.sanity_backend), self.sanity_backend), procedure_name); return
        # Legacy merge
        for lang in self.source_backend.languages():
            # Convert global PO
            translations = legacy_merge.convert_global_po(self.source_backend.get_global_po(lang))
            # Go threw procedures
            for procedure_name in self.get_svn_procedures(project_path):
                # Get the PO
                po = self.source_backend.get_procedure_po(procedure_name, lang)
                # Merge
                if legacy_merge.merge(self.sanity_backend, po, translations):
                    # Save only if changed
                    po.save()
        # New merge
        if legacy_po_dir:
            # Go threw the POs
            for po in self.source_backend.scan_all():
                # Check if changed
                changed = False
                # Get legacy PO path
                legacy_po_path = po.path.replace(self.source_backend.checkout_backend.root, legacy_po_dir)
                # Load legacy
                legacy_msgids = self.merge_backend.load_legacy_msgids(po.lang, legacy_po_path)
                # Go threw the untranslated
                for entry in po.untranslated_entries():
                    # Merge
                    msgstr = self.merge_backend.merge(po.lang, entry.msgid, legacy_msgids)
                    # If merged, store the translation and set the flag for saving the file
                    if msgstr:
                        # Store translation
                        entry.msgstr = msgstr
                        # Set the flag
                        changed = True
                if changed:
                    # Save only if changed
                    po.save()

    def generate_legacy_global_po(self, legacy_po_dir, legacy_mo_dir=None):
        # Create work folder
        with tempfile.TemporaryDirectory() as temp:
            # Store POs
            all_po = {}
            # Process
            for msgid, msgstrs in self.redis_backend.scan_iter():
                # Iterate on languages
                for lang, msgstr in msgstrs.items():
                    # Sanitize translation
                    msgstr = self.sanity_backend.sanitize(lang, msgid, msgstr)
                    # If valid, store it
                    if msgstr:
                        # Get or create PO
                        if lang not in all_po:
                            # Path
                            po_path = os.path.join(temp, '%s_%s.po' % (tools.as_basename(consts.schema_name), lang))
                            # Create file
                            all_po[lang] = backends.POFileWrapper(po_path, lang)
                        # Add entry
                        all_po[lang].append(polib.POEntry(msgid=msgid, msgstr=msgstr))
            # Save
            for po in all_po.values():
                # Save
                po.save()
                # Create directory of not exist
                os.makedirs(os.path.join(legacy_po_dir, po.lang), exist_ok=True)
                # Copy
                shutil.copy(po.path, os.path.join(legacy_po_dir, po.lang, '%s_%s.po' % (tools.as_basename(consts.schema_name), po.lang)))
                # Check if must compile
                if legacy_mo_dir:
                    # Create directory of not exist
                    os.makedirs(os.path.join(legacy_mo_dir, po.lang), exist_ok=True)
                    # Compile
                    po.save_as_mofile(os.path.join(legacy_mo_dir, po.lang, '%s_%s.mo' % (tools.as_basename(consts.schema_name), po.lang)))

    def generate_global_po(self):
        # Iterate on languages
        for lang in self.source_backend.languages():
            # Get global PO
            global_po = self.source_backend.get_global_po(lang)
            # Store messages and their weight
            msgids = {}
            # Go threw the POs
            for procedure_po in self.source_backend.scan_lang(lang):
                # Go threw translated sentences to append them
                for entry in procedure_po.translated_entries():
                    if backends.count_alpha(entry.msgid) >= consts.msgid_min_alpha_auto_translate:
                        msgstr = self.sanity_backend.sanitize(lang, entry.msgid, entry.msgstr)
                        if msgstr:
                            if entry.msgid not in msgids:
                                msgids[entry.msgid] = {}
                            if msgstr not in msgids[entry.msgid]:
                                msgids[entry.msgid][msgstr] = 0
                            msgids[entry.msgid][msgstr] += 1
            # Check if changed
            changed = False
            # Get the one with the max occurrence
            for msgid, msgstrs in msgids.items():
                msgstr = sorted(msgstrs.items(), key=lambda x: x[1], reverse=True)[0][0]
                entry = global_po.find(msgid)
                if entry:
                    if entry.msgstr != msgstr:
                        entry.msgstr = msgstr
                        changed = True
                else:
                    global_po.append(polib.POEntry(msgid=msgid, msgstr=msgstr))
                    changed = True
            # Delete non existing
            schedule_deletion = []
            for entry in global_po:
                if entry.msgid not in msgids:
                    schedule_deletion.append(entry)
            for entry in schedule_deletion:
                global_po.remove(entry)
            # Save the PO
            if changed:
                global_po.save()

    def bulk_synchronize_legacy_po(self, legacy_po_dir):
        # Go threw the POs
        for po in self.source_backend.scan_all():
            # Store if changed
            changed = False
            # Get the old PO path
            legacy_po_path = po.path.replace(self.source_backend.checkout_backend.root, legacy_po_dir)
            # Check if exists
            if os.path.exists(legacy_po_path):
                # Open the old PO
                legacy_po = polib.pofile(legacy_po_path, encoding='utf-8')
                # Go threw the entries
                for entry in po:
                    # Get the old entry
                    old_entry = legacy_po.find(entry.msgid)
                    # Check if old entry exists and is translated
                    if old_entry and old_entry.translated():
                        # Get the old translation
                        old_msgstr = self.sanity_backend.sanitize(po.lang, entry.msgid, old_entry.msgstr)
                        # If is valid and differs from the existing one, store it
                        if old_msgstr and old_msgstr != entry.msgstr:
                            # Set
                            entry.msgstr = old_msgstr
                            # Mark as changed
                            changed = True
            # If changed, save the PO
            if changed:
                po.save()

    def bulk_clean(self):
        # Go threw the POs
        for po in self.source_backend.scan_all():
            # Clean the PO
            if self.sanity_backend.clean_po(po):
                # If changed, save it
                po.save()
            # Force the PO
            if self.force_backend.force_po(po):
                # If changed, save it
                po.save()


def create_services(config_path):
    config_backend = backends.ConfigBackend(config_path)
    checkout_backend = backends.CheckoutBackend(
        config_backend.svn_checkout,
        config_backend.svn_username,
        config_backend.svn_password,
        config_backend.svn_binary,
    )
    source_backend = backends.SourceBackend(checkout_backend)
    sanity_backend = backends.SanityBackend(source_backend.get_blacklist())
    redis_backend = backends.RedisBackend(config_backend.redis_url)
    force_backend = backends.ForceBackend(source_backend, sanity_backend)
    translation_backend_redis = backends.TranslationBackend(
        redis_backend,
        sanity_backend,
        force_backend,
    )
    frame_backend = backends.FrameBackend(sanity_backend)
    gt_translate_backend = backends.GtTranslateBackend(sanity_backend)
    untranslated_backend = backends.UntranslatedBackend(sanity_backend)
    merge_backend = merge.MergeBackend(sanity_backend)
    return Services(config_backend, sanity_backend, source_backend, translation_backend_redis, frame_backend, untranslated_backend, merge_backend, redis_backend, gt_translate_backend, force_backend)
