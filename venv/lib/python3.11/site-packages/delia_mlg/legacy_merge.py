# -*- coding: utf-8 -*-
import polib

SEPARATORS = []  # Multilevel separators
SEPARATORS.append(["! ", "!", "|", ":"])  # Order is important
SEPARATORS.append(["{%d}" % i for i in range(30)])  # Order is important
FORBIDDEN_STRINGS = set(["! ", "!", "|", ":"] + ["{%d}" % i for i in range(30)] + ["", "-"])
MIN_MATCH_LEN = 5


def flatten(lst):
    r = []
    for item in lst:
        if isinstance(item, list):
            for i in flatten(item):
                r.append(i)
        else:
            r.append(item)
    return r


def split_with_separators(strings, seps, sep):
    offset = 0
    for index, string in enumerate(strings):
        if sep in string:
            strings[index] = string.split(sep)
            nb_seps = string.count(sep)
            if nb_seps:
                seps.insert(index + offset, [sep, ] * nb_seps)
                offset += nb_seps
    return flatten(strings), flatten(seps)


def is_forbidden(s, forbidden_strings=FORBIDDEN_STRINGS):
    msgid = s
    for forbidden_string in forbidden_strings:
        msgid = msgid.replace(forbidden_string, '')
    return not bool(msgid.strip())


class SplitString:
    def __init__(self, s, separators):
        """Split a string s along several separators (string or char)
        returns a SplitString object where self.parts are the split "words"
        (not really words if space is not in separators)
        and self.separators is the list of separators, in the original order"""

        self.parts = [s, ]
        self.separators = []
        self.translated_index = set()

        for sep in separators:
            self.parts, self.separators = split_with_separators(self.parts, self.separators, sep)
        assert len(self.parts) == len(self.separators) + 1

    def __len__(self):
        return len(self.parts)

    def __iter__(self):
        return iter(self.parts)

    def to_string(self):
        r = [self.parts[0], ]
        for index, s in enumerate(self.separators):
            r.append(s)
            r.append(self.parts[index + 1])
        return "".join(r)


def convert_global_po(global_po, separators=SEPARATORS):
    # Put the dictionary entries in a python dict structure, merge with translations if provided
    translations = {}
    for entry in global_po.translated_entries():
        for sep_level in separators:
            split_msgid = SplitString(entry.msgid, sep_level)
            split_msgstr = SplitString(entry.msgstr, sep_level)
            for msgid, msgstr in zip(split_msgid.parts, split_msgstr.parts):
                if is_forbidden(msgid):
                    continue
                rstrip_msgid = msgid.rstrip()
                if rstrip_msgid not in translations:
                    # Add the right-stripped fragment translation to the dictionary
                    if msgstr.strip() != "":
                        translations[rstrip_msgid] = polib.POEntry(msgid=rstrip_msgid, msgstr=msgstr.rstrip(),
                                                                   flags=entry.flags, comment=entry.comment)
            joined_msgid = split_msgid.to_string().rstrip()  # unit test for rstrip: test_trailing_starting_spaces
            if joined_msgid not in translations:
                # Add the reunited string to the dictionary
                msgstr = split_msgstr.to_string()
                translations[joined_msgid] = polib.POEntry(msgid=joined_msgid, msgstr=msgstr, flags=entry.flags,
                                                           comment=entry.comment)
    return translations


def merge(sanity_backend, po, translations, separators=SEPARATORS):
    changed = False

    extractions = {}
    for entry in po.untranslated_entries():
        extractions[entry.msgid] = polib.POEntry(msgid=entry.msgid, msgstr=entry.msgid)

    for extracted_msgid, entry in list(extractions.items()):

        # Skip matching if the string in the forbidden list
        if is_forbidden(extracted_msgid):
            continue

        # Split the string and match each part with its translation
        frag_msgstrs = None
        msgstr = extractions[extracted_msgid].msgstr

        frag_rtt = None  # RTT = Remain to translate
        remain_to_translate = msgstr
        for sep_level in separators:
            if frag_rtt:
                remain_to_translate = frag_rtt.to_string()
            frag_rtt = SplitString(remain_to_translate, sep_level)
            # Split the msgstr and keep the sep_level and their positions
            if frag_msgstrs:
                msgstr = frag_msgstrs.to_string()
            frag_msgstrs = SplitString(msgstr, sep_level)
            if len(frag_rtt.parts) != len(frag_msgstrs.parts):
                continue
            # Check for a partial translation of the exact msgid
            for index, frag_msgid in enumerate(frag_rtt.parts[:]):
                if is_forbidden(frag_msgid):
                    continue
                if frag_msgid in translations:
                    frag_msgstrs.parts[index] = translations[frag_msgid].msgstr
                    frag_rtt.parts[index] = ' ' * len(translations[frag_msgid].msgstr)
                else:
                    frag_msgid_rstrip = frag_msgid.rstrip()
                    if frag_msgid_rstrip in translations:
                        frag_msgstrs.parts[index] = translations[frag_msgid_rstrip].msgstr.rstrip().ljust(
                            len(frag_msgid))
                        frag_rtt.parts[index] = ' ' * len(frag_msgstrs.parts[index])
                        continue
                    frag_msgid_lstrip = frag_msgid.lstrip()
                    if frag_msgid_lstrip in translations:
                        frag_msgstrs.parts[index] = translations[frag_msgid_lstrip].msgstr.lstrip().rjust(
                            len(frag_msgid))
                        frag_rtt.parts[index] = ' ' * len(frag_msgstrs.parts[index])
                        continue
                    frag_msgid_strip = frag_msgid.strip()
                    if frag_msgid_strip in translations:
                        starting_spaces = ' ' * (len(frag_msgid) - len(frag_msgid.lstrip()))
                        frag_msgstrs.parts[index] = (starting_spaces + translations[frag_msgid_strip].msgstr).ljust(
                            len(frag_msgid))
                        frag_rtt.parts[index] = ' ' * len(frag_msgstrs.parts[index])
                        continue

        msgstr = frag_msgstrs.to_string()

        remain_to_translate = frag_rtt.to_string()
        for forbidden in FORBIDDEN_STRINGS:
            remain_to_translate = remain_to_translate.replace(forbidden, '')

        if remain_to_translate.strip() == '':
            entry = po.find(extracted_msgid)
            if entry:
                msgstr = sanity_backend.sanitize(po.lang, extracted_msgid, msgstr)
                if msgstr:
                    entry.msgstr = msgstr
                    changed = True

    return changed
