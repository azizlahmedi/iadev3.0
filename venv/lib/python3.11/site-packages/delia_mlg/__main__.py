# -*- coding: utf-8 -*-
import argparse
import logging
import os
import sys

from delia_mlg import tools, consts
from delia_mlg.services import create_services

log = logging.getLogger(__name__)


def add_procedure_arguments(parser):
    parser.add_argument(
        '-n', '--procedure-name', dest='procedure_names',
        help='Procedure name.', metavar='newport.module.option',
        action='append',
    )
    parser.add_argument(
        '--procedure-names', dest='procedure_path',
        help='File containing a list of procedures.', metavar='FILE',
    )


def add_lang_argument(parser, required=True):
    parser.add_argument(
        '-l', '--lang', dest='lang', default=None, required=required,
        help='Language.', metavar='ISO',
    )


def add_project_path_argument(parser, required=True):
    parser.add_argument(
        '-p', '--project-path', dest='project_path', default=None, required=required,
        help='project path.',
    )


def add_legacy_po_dir_argument(parser, required=True):
    parser.add_argument(
        '--legacy-po-dir', dest='legacy_po_dir', default=None, required=required,
        help='Path to the legacy PO folder.', metavar='DIR',
    )


def add_untranslated_dir_argument(parser, required=True):
    parser.add_argument(
        '-u', '--untranslated', dest='untranslated_dir', default=None, required=required,
        help='Directory containing untranslated files.', metavar='DIR',
    )


def get_config_path(parser, args):
    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.DEBUG if args.verbose else logging.INFO)
    config_path = args.config_path
    if not os.path.exists(config_path):
        parser.error('-c/--config: %s does not exist' % config_path)
    return config_path


def get_procedure_names(parser, args):
    all_procedure_names = set()
    procedure_names = args.procedure_names
    procedure_path = args.procedure_path
    if not procedure_names and not procedure_path:
        parser.error('-n/--procedure-name or --procedure-names: required')
    if procedure_names:
        all_procedure_names.update([n.lower().strip().replace('_', '.') for n in procedure_names])
    if procedure_path:
        if not os.path.exists(procedure_path):
            parser.error('--procedure-names: %s does not exist' % procedure_path)
        all_procedure_names.update(tools.get_procedure_names(procedure_path))
    return all_procedure_names


def get_lang(parser, args, choices=None):
    lang = args.lang
    if not lang:
        return None
    lang = lang.lower().strip()
    if choices:
        if lang not in choices:
            parser.error('-l/--lang: %s invalid' % lang)
    return lang


def get_project_path(parser, args):
    if not getattr(args, 'project_path', None):
        return None
    project_path = os.path.normpath(os.path.abspath(args.project_path))
    if not os.path.isfile(os.path.join(project_path, 'project.cfg')):
        parser.error('-p/--project-path: %s is invalid' % project_path)
    return project_path


def get_untranslated_dir(parser, args):
    if not getattr(args, 'untranslated_dir', None):
        return None
    untranslated_dir = os.path.normpath(os.path.abspath(args.untranslated_dir))
    if not os.path.isdir(untranslated_dir):
        parser.error('-u/--untranslated: %s is not a directory' % untranslated_dir)
    return untranslated_dir


def get_legacy_po_dir(parser, args):
    if not getattr(args, 'legacy_po_dir', None):
        return None
    legacy_po_dir = os.path.normpath(os.path.abspath(args.legacy_po_dir))
    if not os.path.isdir(legacy_po_dir):
        parser.error('-o/--old-po-dir: %s is not a directory' % legacy_po_dir)
    return legacy_po_dir


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    # Parser
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-v', '--verbose',
        action='store_true', dest='verbose',
        help='Verbose.', default=False,
    )
    parser.add_argument(
        '-c', '--config', dest='config_path', required=True,
        help='configuration file.', metavar='PATH',
    )
    parsers = parser.add_subparsers()

    # Translate
    parser_translate = parsers.add_parser(consts.action_translate)
    add_procedure_arguments(parser_translate)
    add_lang_argument(parser_translate, required=False)
    parser_translate.add_argument(
        '-f', '--force', dest='force',
        help='Override existing translations.',
        action='store_true', default=False,
    )
    parser_translate.set_defaults(action=consts.action_translate)

    # GETTEXT extract
    parser_gettext_extract = parsers.add_parser(consts.action_gettext_extract)
    add_procedure_arguments(parser_gettext_extract)
    add_project_path_argument(parser_gettext_extract)
    parser_gettext_extract.set_defaults(action=consts.action_gettext_extract)

    # Frame extract
    parser_frame_extract = parsers.add_parser(consts.action_frame_extract)
    add_procedure_arguments(parser_frame_extract)
    add_project_path_argument(parser_frame_extract)
    parser_frame_extract.set_defaults(action=consts.action_frame_extract)

    # Integrate untranslated
    parser_integrate_untranslated = parsers.add_parser(consts.action_integrate_untranslated)
    add_untranslated_dir_argument(parser_integrate_untranslated)
    parser_integrate_untranslated.set_defaults(action=consts.action_integrate_untranslated)

    # Translator extract
    parser_translator_extract = parsers.add_parser(consts.action_translator_extract)
    add_procedure_arguments(parser_translator_extract)
    add_lang_argument(parser_translator_extract)
    parser_translator_extract.add_argument(
        '-o', '--output', dest='output_path', required=True,
        help='Output file.', metavar='FILE',
    )
    parser_translator_extract.set_defaults(action=consts.action_translator_extract)

    # Versioning
    parser_versioning = parsers.add_parser(consts.action_versioning)
    add_procedure_arguments(parser_versioning)
    add_project_path_argument(parser_versioning)
    parser_versioning.add_argument(
        '-j', '--json', dest='json_path', default=None,
        help='Output commit revision in JSON file (optional).', metavar='FILE',
    )
    parser_versioning.set_defaults(action=consts.action_versioning)

    # Bulk extract
    parser_bulk_extract = parsers.add_parser(consts.action_bulk_extract)
    add_project_path_argument(parser_bulk_extract, required=False)
    add_untranslated_dir_argument(parser_bulk_extract, required=False)
    parser_bulk_extract.set_defaults(action=consts.action_bulk_extract)

    # Bulk translate
    parser_bulk_translate = parsers.add_parser(consts.action_bulk_translate)
    add_project_path_argument(parser_bulk_translate)
    add_legacy_po_dir_argument(parser_bulk_translate, required=False)
    parser_bulk_translate.set_defaults(action=consts.action_bulk_translate)

    # Generate legacy global PO
    parser_generate_legacy_global_po = parsers.add_parser(consts.action_generate_legacy_global_po)
    add_legacy_po_dir_argument(parser_generate_legacy_global_po)
    parser_generate_legacy_global_po.add_argument(
        '--legacy-mo-dir', dest='legacy_mo_dir', default=None,
        help='Path to the legacy MO folder.', metavar='DIR',
    )
    parser_generate_legacy_global_po.set_defaults(action=consts.action_generate_legacy_global_po)

    # Generate global PO
    parser_generate_global_po = parsers.add_parser(consts.action_generate_global_po)
    parser_generate_global_po.set_defaults(action=consts.action_generate_global_po)

    # Bulk synchronize legacy
    parser_bulk_synchronize_legacy_po = parsers.add_parser(consts.action_bulk_synchronize_legacy_po)
    add_legacy_po_dir_argument(parser_bulk_synchronize_legacy_po)
    parser_bulk_synchronize_legacy_po.set_defaults(action=consts.action_bulk_synchronize_legacy_po)

    # Bulk clean
    parser_bulk_clean = parsers.add_parser(consts.action_bulk_clean)
    parser_bulk_clean.set_defaults(action=consts.action_bulk_clean)

    # Parse
    args = parser.parse_args(argv)
    action = args.action

    # Create logger
    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.DEBUG if args.verbose else logging.INFO)

    # Create services
    services = create_services(args.config_path)

    # Translate
    if action == consts.action_translate:
        lang = get_lang(parser, args, services.languages())
        procedure_names = get_procedure_names(parser, args)
        services.translate(procedure_names, lang, args.force)

    # GETTEXT extract
    elif action == consts.action_gettext_extract:
        project_path = get_project_path(parser, args)
        procedure_names = get_procedure_names(parser, args)
        services.gettext_extract(project_path, procedure_names)

    # Frame extract
    elif action == consts.action_frame_extract:
        project_path = get_project_path(parser, args)
        procedure_names = get_procedure_names(parser, args)
        services.frame_extract(project_path, procedure_names)

    # Integrate untranslated
    elif action == consts.action_integrate_untranslated:
        untranslated_dir = get_untranslated_dir(parser, args)
        services.integrate_untranslated(untranslated_dir)

    # Translator extract
    elif action == consts.action_translator_extract:
        lang = get_lang(parser, args, services.languages())
        procedure_names = get_procedure_names(parser, args)
        services.translator_extract(procedure_names, lang, args.output_path)

    # Versioning
    elif action == consts.action_versioning:
        project_path = get_project_path(parser, args)
        procedure_names = get_procedure_names(parser, args)
        services.versioning(project_path, procedure_names, args.json_path)

    # Bulk extract
    elif action == consts.action_bulk_extract:
        project_path = get_project_path(parser, args)
        untranslated_dir = get_untranslated_dir(parser, args)
        services.bulk_extract(project_path, untranslated_dir)

    # Bulk translate
    elif action == consts.action_bulk_translate:
        project_path = get_project_path(parser, args)
        legacy_po_dir = get_legacy_po_dir(parser, args)
        services.bulk_translate(project_path, legacy_po_dir)

    # Generate legacy global PO
    elif action == consts.action_generate_legacy_global_po:
        legacy_po_dir = get_legacy_po_dir(parser, args)
        services.generate_legacy_global_po(legacy_po_dir, args.legacy_mo_dir)

    # Generate global PO
    elif action == consts.action_generate_global_po:
        services.generate_global_po()

    # Bulk synchronize legacy
    elif action == consts.action_bulk_synchronize_legacy_po:
        legacy_po_dir = get_legacy_po_dir(parser, args)
        services.bulk_synchronize_legacy_po(legacy_po_dir)

    # Bulk clean
    elif action == consts.action_bulk_clean:
        services.bulk_clean()


if __name__ == '__main__':
    main()
