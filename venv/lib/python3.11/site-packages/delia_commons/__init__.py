# -*- coding: utf-8 -*-
__all__ = ['context', 'deliafile', 'exceptions', 'errors', 'singleton']
import os
import sys
import json
import shutil
import gettext
import logging
import logging.config

from . import context, deliafile, exceptions, errors, singleton
from delia_commons.deliafile import normpath, DeliaFile
from delia_commons.context import Context
from delia_commons.release import __version__, __compatibility_version__, description
from delia_commons.config.defaults_conf import defaults_conf
from delia_commons.config.defaults_logconf import defaults_logconf


def is_logging_initialized():
    """ Return true if the logger is initialized, else otherwise. """
    return getattr(logging, 'initialized', False)


application = 'delia'
sys.setrecursionlimit(10**6)

# Set defaults values
default_delia_path = normpath('~/.delia')
default_locale_path = normpath(os.path.join(sys.modules[__name__].__path__[0], 'locale'))
default_config_path = normpath(os.path.join(sys.modules[__name__].__path__[0], 'config', 'defaults.cfg'))
default_log_config_path = normpath(os.path.join(sys.modules[__name__].__path__[0], 'config', 'logconf.json'))

config_path = normpath(os.path.join(default_delia_path, 'delia.cfg'))
log_config_path = normpath(os.path.join(default_delia_path, 'logconf.json'))

# Setup gettext
if os.name == 'nt':
    # Code pour Microsoft Windows
    import locale
    lang = locale.getdefaultlocale()[0][:2]
    try:
        cur_lang = gettext.translation(application, localedir=default_locale_path, languages=[lang])
        cur_lang.install()
    except IOError as e:
        # print e
        # Si la langue locale n'est pas supportée, on définit tout de meme _()
        import builtins
        builtins.__dict__['_'] = lambda text: text
else:
    # Code pour les autres systèmes d'exploitation
    gettext.install(application, localedir=default_locale_path)

# Does delia path exist ?
if not os.path.isdir(default_delia_path):
    os.makedirs(default_delia_path)

# Setup delia configuration
if not os.path.isfile(config_path):
    print(_("Warning : create default config file : '%s'") % config_path)  # pylint: disable-msg=E0602
    open(config_path, "w").write(defaults_conf)

# Setup the logger
if not is_logging_initialized():
    try:
        if getattr(logging, 'initialize_delia_logging_from_default', False):
            defaults_logconf['handlers']['handfile']['filename'] = normpath(os.path.join(default_delia_path, f'delia_{os.getpid()}.log'))
            logging.config.dictConfig(defaults_logconf)
        else:

            if not os.path.isfile(log_config_path):
                print(_("Warning : no such configuration file for the logger: '%s'") % log_config_path)  # pylint: disable-msg=E0602
                print(_("Warning : create default config file for the logger: '%s'") % log_config_path)  # pylint: disable-msg=E0602

                # Enrich the default configuration
                defaults_logconf['handlers']['handfile']['filename'] = normpath(os.path.join(default_delia_path, 'delia_' + "'%(process)d'" + '.log'))
                json_logconf = json.dumps(defaults_logconf, indent=1)
                open(log_config_path, "w").write(json_logconf)

            # Loading the configuration file
            with open(log_config_path, 'r') as f:
                logconf = json.load(f)
                if 'handlers' in logconf and 'handfile' in logconf['handlers'] and 'filename' in logconf['handlers']['handfile']:
                    filepath = logconf['handlers']['handfile']['filename']
                    if "'%(process)d'" in filepath:
                        filepath = logconf['handlers']['handfile']['filename']
                        logconf['handlers']['handfile']['filename'] = filepath.replace("'%(process)d'", str(os.getpid()))
                logging.config.dictConfig(logconf)
    except Exception as e:
        print(e)
        print(_("Warning : Failed to create default config file for the logger: '%s'") % log_config_path)  # pylint: disable-msg=E0602
        hdlr = logging.FileHandler('delia.log', 'a')
        formatter = logging.Formatter('{\'date\': \'%(asctime)s\', \'msg\': "%(message)s", \'values\': {\'pathname\': \'%(pathname)s:%(lineno)d\'}, \'level\': \'%(levelname)s\'}')
        hdlr.setFormatter(formatter)
        hdlr.setLevel(logging.WARN)

        logger = logging.getLogger('delia.commons')
        logger.addHandler(hdlr)
        logger = logging.getLogger('delia.tokenizer')
        logger.addHandler(hdlr)
        logger = logging.getLogger('delia.parser')
        logger.addHandler(hdlr)
        logger = logging.getLogger('delia.preprocessor.include')
        logger.addHandler(hdlr)
        logger = logging.getLogger('delia.preprocessor.macro')
        logger.addHandler(hdlr)
        logger = logging.getLogger('delia.ast')
        logger.addHandler(hdlr)
        logger = logging.getLogger('delia.codegen')
        logger.addHandler(hdlr)
# set logging to initilized ????
# logging.initialized = True
