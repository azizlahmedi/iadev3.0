# -*- coding: utf-8 -*-
import re
from logging import Filter
from .errors import ErrorCode, SYNTAX_ERROR_GROUP, SEMANTIC_ERROR_GROUP
from .singleton import Singleton
from collections.abc import Iterable


class ErrorFilter(Singleton):
    """
    This is a dynamic filter for delia which rejects undesired error message from logs.
    For more info: DELIA-2474 on JIRA.
    """
    # Map keywords and their logic group
    keywords_map = {
        'Wsyntax': SYNTAX_ERROR_GROUP,
        'Wsemantic': SEMANTIC_ERROR_GROUP,
        'all-warnings': [ec.value for ec in list(ErrorCode)]
    }

    def init(self, ec_list=[]):
        self._ec_to_ignore = set()
        self._ec_regex = re.compile('.*(error|warning)\(([0-9]+)\)', re.IGNORECASE)
        self.add_errors(ec_list)

    def __str__(self):
        if self._ec_to_ignore:
            return 'Error code ignored: %s.' % ', '.join(self._ec_to_ignore)
        else:
            return 'No error code ignored.'

    def _extract_error_code(self, msg):
        reg_match = self._ec_regex.match(msg)
        if not reg_match:
            raise ValueError('No error code found.')
        return int(reg_match.group(2))

    def add_errors(self, ec_list):
        if not isinstance(ec_list, Iterable):
            ec_list = [ec_list]

        for cur_ec in ec_list:
            v = self._interpret_ec(cur_ec)
            if v:
                self._ec_to_ignore.update(v)

    def _interpret_ec(self, ec_or_keyword):
        """
            For simplicity sakes, special input can be used to specify a group of error code to process.
            This function, returns:
               - a valid error code if it is supported by delia ;
               - the logic group of error related to the special keyword ;
               - None otherwise.
        """
        if ec_or_keyword in ErrorFilter.keywords_map.keys():
            return ErrorFilter.keywords_map[ec_or_keyword]
        elif int(ec_or_keyword) in list(ErrorCode):
            return [int(ec_or_keyword)]
        else:
            None

    def filter(self, record):
        # REMINDER: True == not filtered
        try:
            ec = self._extract_error_code('%r' % record.msg)
            return ec not in self._ec_to_ignore
        except ValueError:
            return True
