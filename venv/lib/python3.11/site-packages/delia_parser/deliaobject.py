# -*- coding: utf-8 -*-
import delia_preprocessor.deliaobject
from delia_parser.compile_context import CompileContext
from delia_parser.parser import parse
from delia_parser.parser import gen_ast
from delia_parser.visitor import walk
from delia_parser.validate import Validator
from delia_parser.annotate import Annotator
from delia_parser.ast import Root


class DeliaObject(delia_preprocessor.deliaobject.DeliaObject):

    def reset(self, compile_ctx=None):
        if compile_ctx is None:
            self.compile_ctx = CompileContext(root=Root())
        else:
            self.compile_ctx = compile_ctx
        self.annotator = Annotator(self.compile_ctx)
        self.validator = Validator(self.compile_ctx, proc_name=self.name)

    def __get_files(self):
        return self.compile_ctx.files
    files = property(__get_files)

    def __get_macros(self):
        return self.compile_ctx.macros
    macros = property(__get_macros)

    def get_ast(self, compile_ctx):
        self.reset(compile_ctx)
        parse(compile_ctx, tokens=self.scan_all(), parser=gen_ast.Parser())
        return compile_ctx.ast

    def analyze(self, schema=None, verbose=False):
        compile_ctx = CompileContext(root=Root())
        if self.compile_ctx:
            compile_ctx.mapping_enabled = self.compile_ctx.mapping_enabled

        self.reset(compile_ctx)
        if schema is not None:
            schema.reset(compile_ctx)
            schema.get_ast(compile_ctx)
        self.get_ast(compile_ctx)
        walk(ast=compile_ctx.ast, visitor=self.annotator, verbose=verbose)
        return compile_ctx.ast

    def compile(self, schema=None, verbose=False):
        __ = self.analyze(schema=schema, verbose=verbose)
        walk(ast=self.compile_ctx.ast, visitor=self.validator, verbose=verbose)
        return self.compile_ctx.ast


class Procedure(DeliaObject):
    pass


class Schema(DeliaObject):
    pass
