# -*- coding:utf-8 -*-
from delia_parser import ast
from decimal import Decimal


class ControlFlow:

    def visit_CompileDirective(self, node):
        cond = node.cond
        case_stmts = node.case_stmts
        else_stmt = node.else_stmt
        stmts_to_compile = node.stmts_to_compile

        self.visit(cond)

        cond_lit = self.resolve_constant(cond)
        if cond_lit is None:
            return

        for case_labels, stmt in case_stmts:

            self.visit(case_labels)

            for case in case_labels:
                case_lit = self.resolve_constant(case)
                if case_lit is None:
                    return

                if isinstance(cond_lit, ast.String) and isinstance(case_lit, ast.String):
                    if str(cond_lit.value).strip() == str(case_lit.value).strip():
                        stmts_to_compile.append(stmt)
                        break

                elif isinstance(cond_lit, ast.Date) and isinstance(case_lit, ast.Date):
                    if str(cond_lit.value) == str(case_lit.value):
                        stmts_to_compile.append(stmt)
                        break

                elif isinstance(cond_lit, ast.Numeric) and isinstance(case_lit, ast.Numeric):
                    if Decimal(str(cond_lit.value)) == Decimal(str(case_lit.value)):
                        stmts_to_compile.append(stmt)
                        break

                else:
                    return

        if not stmts_to_compile:
            if else_stmt:
                stmts_to_compile.append(else_stmt)
            else:
                stmts_to_compile.append(ast.Nothing())

        self.visit(stmts_to_compile)

    def visit_Conditional(self, node):
        self.visit(node.cond)
        self.visit(node.case_stmts)
        self.visit(node.else_stmt)

    def visit_WhileDo(self, node):
        self.visit(node.cond)
        self.visit(node.stmts)

    def visit_DoWhile(self, node):
        self.visit(node.cond)
        self.visit(node.stmts)

    def visit_If(self, node):
        self.visit(node.cond)
        self.visit(node.then_else_clause)

    def visit_ThenElseClause(self, node):
        self.visit(node.then_stmts)
        self.visit(node.else_stmts)

    def visit_UsingClause(self, node):
        self.visit(node.data_expression)
        self.visit(node.parametre)

    def visit_LabelStmt(self, node):
        self.add_symbol(node.label)
        node.label.report_ind = len(self.reports)
        self.visit(node.stmts)
        self.reports_len = 0

    def visit_Finish(self, node):
        self.visit_Label_Name(node.label_name)
        label_definition = node.label_name.definition
        if isinstance(label_definition, ast.Label):
            node.report_names = self.reports[label_definition.report_ind:]  # TODO: rework

    def visit_Repeat(self, node):
        self.visit_Label_Name(node.label_name)
        label_definition = node.label_name.definition
        if isinstance(label_definition, ast.Label):
            node.report_names = self.reports[label_definition.report_ind:]  # TODO: rewor
