# -*- coding:utf-8 -*-
from delia_parser import ast
from delia_parser.scope import FunctionScope, DequeScopes


class Function:

    def visit_Procedure(self, node):
        self.procedure_scope.node = node
        self.procedure_scope.name = node.name
        node.scope = self.procedure_scope

        self.add_symbol(node)
        self.procedure_scope.add_symbol("procedure", node, self.in_schema)

        params_in_schema = set()

        for param in node.receiving_parameters:
            self.visit(param)
            param.used = True

            if self.procedure_scope.in_schema(param):
                params_in_schema.add(param)

        for param in node.returning_parameters:
            self.visit(param)
            param.used = True

            if self.procedure_scope.in_schema(param):
                params_in_schema.add(param)

        node.params_in_schema = params_in_schema

        self.in_decls = True
        self.visit(node.decls)
        self.in_decls = False
        self.visit(node.stmts)

    def visit_Function(self, node):

        self.add_symbol(node)
        self.visit(node.receiving_parameters)
        self.visit(node.returning_parameters)
        self.visit(node.attributes)

        function_scope = FunctionScope(node, node.name)

        for param in node.receiving_parameters + node.returning_parameters:
            function_scope.add_symbol(param, param.definition)

        node.scope = function_scope

    def visit_FunctionKey(self, node):
        if node.is_globally:
            if not node.annotated:
                self.add_symbol(node)
                self.visit(node.sequence)
                self.procedure_scope.add_functions_key_global(node)
                node.used = True
                node.annotated = True
                self.visit(node.stmts)
        else:
            self.add_symbol(node)
            self.visit(node.sequence)
            self.procedure_scope.add_functions_key_local(node)

    def function_key_local_stmt(self, node):
        self.in_local_function_key = True
        node.used = True
        self.visit(node.stmts)
        self.in_local_function_key = False

    def function_stmt(self, node):
        if not node.annotated:
            node.used = True
            for param in node.receiving_parameters + node.returning_parameters:
                if param.definition:
                    param.definition.used = True

            if not isinstance(node, ast.FLI):
                function_scope = node.scope
                node.used = True
                node.annotated = True
                scopes_save = self.scopes
                self.in_local_function_key = False
                self.scopes = DequeScopes([function_scope, self.procedure_scope])
                self.visit(node.stmts)
                self.scopes = scopes_save

    def visit_FLI(self, node):
        self.add_symbol(node)
        self.visit(node.receiving_parameters)
        self.visit(node.returning_parameters)
        self.visit(node.attributes)
        self.visit(node.file_spec)

    def subroutine_parameters(self, node):
        self.visit(node.calling_parameters)
        self.visit(node.accepting_parameters)

    def visit_RunStmt(self, node):

        node.in_local_function_key = self.in_local_function_key

        self.subroutine_parameters(node)
        for param in node.accepting_parameters:
            self.visit_Name(param)
            self.update_datas_and_others_fields(param)

    def visit_FunctionStmt(self, node):
        self.visit_Name(node.name)
        node.definition = node.name.definition
        if not isinstance(node.definition, ast.Function):
            return

        node.in_local_function_key = self.in_local_function_key

        self.subroutine_parameters(node)

        for param in node.accepting_parameters:
            self.update_datas_and_others_fields(param)

        if not node.definition.annotated:
            self.function_stmt(node.definition)

    def visit_Return(self, node):
        for returning_parameter in self.procedure_scope.node.returning_parameters:
            self.visit_Name(returning_parameter)
            node.returning_parameters.append(returning_parameter)
        self.visit(node.using_clauses)
