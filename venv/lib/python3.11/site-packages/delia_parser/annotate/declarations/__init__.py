# -*- coding:utf-8 -*-
from delia_parser import ast, types, pictures
from delia_parser.annotate.declarations.array import Array
from delia_parser.annotate.declarations.relation import Relation
from delia_parser.annotate.declarations.function import Function

from delia_commons.exceptions import InvalidPictureError


class Declaration(Array,
                  Relation,
                  Function):

    def add_symbol(self, node):
        self.current_scope.add_symbol(node.name, node, self.in_schema)

    def visit_Schema(self, node):
        self.in_schema = True
        self.in_decls = True
        self.add_symbol(node)
        self.visit(node.decls)
        self.in_decls = False
        self.in_schema = False

    def visit_Constant(self, node):
        self.add_symbol(node)
        # To make it easier, generate constant at any time.
        node.used = True
        self.visit(node.value)

    def visit_Field(self, node):
        self.add_symbol(node)
        if isinstance(node.attributes, ast.SameAsAttributes) and node.name == node.attributes.subject_name:
            node.name.definition = None
        else:
            self.visit(node.attributes)

    def visit_Attributes(self, node):
        self.visit(node.picture)
        self.visit(node.field_clauses)

    def visit_VerifyClause(self, node):
        bck_scopes = self.scopes
        self.scopes = []
        self.visit(node.clause_value)
        self.scopes = bck_scopes
        ast.VerifyClause

    def visit_SameAsAttributes(self, node):
        node.definition = self.procedure_scope.get_def(node.subject_name)
        self.visit(node.field_clauses)

        if node.definition and isinstance(node.definition, ast.Field):
            inherited_clauses = node.definition.attributes.clauses
            for inherited_clause in inherited_clauses:
                if isinstance(inherited_clause, ast.VerifyClause):
                    continue
                for clause in node.field_clauses:
                    if isinstance(inherited_clause, type(clause)):
                        break
                else:
                    node.merge_clauses.append(inherited_clause)

    def resolve_constant(self, constant):
        while isinstance(constant, (ast.ConstantRef)):
            constant = constant.definition.value
        if isinstance(constant, ast.Literal):
            return constant
        else:
            return None

    def visit_AsId(self, node):
        self.visit(node.id)

    def visit_AsArrayId(self, node):
        self.visit(node.id)

    def visit_AsConstant(self, node):
        self.visit(node.id)
        value = node.id.definition
        while value and isinstance(value, ast.Constant):
            value = value.value
            if isinstance(value, ast.Name):
                value = value.definition

        if isinstance(value, ast.Literal):
            pictureDef = str(value).upper()
            if 'C' in pictureDef:
                _type = types.String()
            elif '.' in pictureDef or 'V' in pictureDef:
                _type = types.Decimal()
            else:
                _type = types.Integer()

            pictureClass = self.TYPE_TO_PICTURE[_type]
            _picture = pictureClass(value=pictureDef, locations=node.locations)
            node.type = _type
            node.picture = _picture
            self.visit(node.picture)

    def visit_AsPicture(self, node):
        self.visit(node.picture)

    def visit_StringPicture(self, node):

        if isinstance(node.value, ast.ConstantRef):
            self.visit(node.value)
            value = self.resolve_constant(node.value)
            if value:
                node.picture = pictures.StringPicture(str(value))

        elif node.value:
            node.picture = pictures.StringPicture(str(node.value))
        else:
            node.picture = pictures.UnknownPicture()

        if node.value:
            try:
                node.picture.validate()
            except InvalidPictureError:
                # shift of validate pictures in the validation stage
                pass

    def visit_DatePicture(self, node):
        if isinstance(node.value, ast.ConstantRef):
            self.visit(node.value)
            value = self.resolve_constant(node.value)
            if value:
                node.picture = pictures.DatePicture(str(value))

        elif node.value:
            node.picture = pictures.DatePicture(str(node.value))
        else:
            node.picture = pictures.UnknownPicture()

        if node.value:
            try:
                node.picture.validate()
            except InvalidPictureError:
                # shift of validate pictures in the validation stage
                pass

    def visit_IntegerPicture(self, node):
        if isinstance(node.value, ast.ConstantRef):

            self.visit(node.value)
            value = self.resolve_constant(node.value)
            if value:
                node.picture = pictures.IntegerPicture(str(value))
        else:
            node.picture = pictures.IntegerPicture(str(node.value))

        try:
            node.picture.validate()
        except InvalidPictureError:
            # shift of validate pictures in the validation stage
            pass

    def visit_DecimalPicture(self, node):

        if isinstance(node.value, ast.ConstantRef):

            self.visit(node.value)
            value = self.resolve_constant(node.value)
            if value:
                node.picture = pictures.DecimalPicture(str(value))

        else:
            node.picture = pictures.DecimalPicture(str(node.value))

        try:
            node.picture.validate()
        except InvalidPictureError:
            # shift of validate pictures in the validation stage
            pass

    def visit_FloatPicture(self, node):

        # Visit but we don't use the value.
        if isinstance(node.value, ast.ConstantRef):
            self.visit(node.value)

        node.picture = pictures.UnknownPicture()

    def visit_DoublePicture(self, node):

        # Visit but we don't use the value.
        if isinstance(node.value, ast.ConstantRef):
            self.visit(node.value)

        node.picture = pictures.UnknownPicture()

    def visit_UnknownPicture(self, node):
        node.picture = pictures.UnknownPicture()
