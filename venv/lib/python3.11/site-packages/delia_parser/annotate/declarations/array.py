# -*- coding:utf-8 -*-
from delia_parser import ast


class Array:
    def visit_Array(self, node):
        self.add_symbol(node)
        if isinstance(node.array_columns, ast.SameAsArrayColumns) and node.name == node.array_columns.subject_name:
            node.name.definition = None
        else:
            self.visit(node.lower_bound)
            self.visit(node.upper_bound)
            self.visit(node.array_columns)

            if node.check is None:
                node.check_subscripts = self.procedure_scope.node.check_subscripts
            else:
                node.check_subscripts = node.check

    def visit_SameAsArray(self, node):
        self.visit(node.subject_name)
        self.add_symbol(node)

    def visit_ArrayColumns(self, node):
        for column in node.columns:
            self.visit(column)

    def visit_SameAsArrayColumns(self, node):
        definition = self.procedure_scope.get_def(node.subject_name)
        if isinstance(definition, (ast.Array, ast.Relation)):
            node.definition = definition

    def visit_ArrayIndex(self, node):
        self.visit(node.index)

    def visit_ArrayIndexTo(self, node):
        self.visit(node.lower)
        self.visit(node.upper)
