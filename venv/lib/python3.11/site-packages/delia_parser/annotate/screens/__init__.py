# -*- coding:utf-8 -*-

from collections import OrderedDict

from delia_parser import ast
from delia_parser.scope import DisplayScope


class Screen:

    def visit_Display(self, node):

        for frame_name in node.frame_names:
            self.visit_Name(frame_name)

            if isinstance(frame_name.definition, ast.Frame):
                # To generate used for DATA.NAMES
                self.visit(frame_name.definition)

                scope = DisplayScope(self.procedure_scope, node, frame_name)
                self.scopes.appendleft(scope)
                node.scopes.append(scope)
                if frame_name.definition.activated:
                    scope.active_frame = True

        for function_key_name in node.function_key_names:
            self.visit_Name(function_key_name)
            if isinstance(function_key_name.definition, ast.FunctionKey):
                self.function_key_local_stmt(function_key_name.definition)

        self.visit(node.stmts)

        for frame_name in node.frame_names:
            if isinstance(frame_name.definition, ast.Frame):
                self.scopes.popleft()

    def visit_Frame(self, node):

        self.add_symbol(node)

        self.visit(node.name)
        self.visit(node.frame_area)
        self.visit(node.frame_data_info)
        self.visit(node.frame_format_location)

        if str(node.name) not in ("ose.ecran.entete", "ose.ecran.fonctions"):
            node.activated = True

        for frame_data_name in node.frame_data_names:

            self.visit(frame_data_name)

        for controlled_field in node.controlled_field_list:
            self.visit(controlled_field)

            for control_item in controlled_field.control_items:
                if isinstance(control_item, ast.FrameControlHelp):

                    msg = ast.ConcatenatedString.from_values(control_item.value)
                    self.visit(msg)
                    for field_ref in controlled_field.fields_ref:

                        if isinstance(field_ref, ast.ArrayId) and field_ref.array_definition:
                            array_name = field_ref.array_definition.name
                            node.help_msg[(array_name, field_ref.name)] = msg

                        elif isinstance(field_ref.definition, ast.Array):
                                array_name = field_ref.name
                                for field in field_ref.definition.columns:
                                    node.help_msg[(array_name, field.value)] = msg

                        elif isinstance(field_ref.definition, ast.Field):
                            node.help_msg[field_ref.name] = msg

    def visit_FrameFormat(self, node):
        self.add_symbol(node)
        self.visit(node.frame_format_def)

    def visit_Input(self, node):

        self.visit(node.field_names)

        def stringify_key_sequence_values(sequence):
            key = sequence
            assert(isinstance(key, (ast.String, ast.ConstantRef)))

            while not isinstance(key, ast.String):
                if isinstance(key, ast.ConstantRef):
                    key = key.definition.value
                    continue
                break

            assert(isinstance(key, ast.String))
            assert(isinstance(key, ast.Literal))

            return str(key)

        functions_keys_global = OrderedDict()
        functions_keys_display_local = OrderedDict()
        functions_keys_input_local = OrderedDict()

        for function_key in self.procedure_scope.functions_key_global:
            sequence = function_key.sequence
            sequence_as_str = stringify_key_sequence_values(sequence)
            functions_keys_global[sequence_as_str] = function_key

        display_scopes = []

        for display_scope in filter(lambda scope: isinstance(scope, DisplayScope), self.scopes):
            for function_key in display_scope.node.function_key_names:
                function_key_definition = function_key.definition
                if isinstance(function_key_definition, ast.FunctionKey):
                    sequence = function_key_definition.sequence
                    sequence_as_str = stringify_key_sequence_values(sequence)
                    functions_keys_display_local[sequence_as_str] = function_key_definition
            display_scopes.append(display_scope)

        for function_key_name in node.function_key_names:
            self.visit_Name(function_key_name)
            function_key_definition = function_key_name.definition
            if isinstance(function_key_definition, ast.FunctionKey):
                sequence = function_key_definition.sequence
                sequence_as_str = stringify_key_sequence_values(sequence)
                functions_keys_input_local[sequence_as_str] = function_key_definition
                self.function_key_local_stmt(function_key_definition)

        functions_keys = list(functions_keys_input_local.values())

        for key, func in functions_keys_display_local.items():
            if key not in functions_keys_input_local:
                functions_keys.append(func)

        for key, func in functions_keys_global.items():
            if key not in functions_keys_input_local and key not in functions_keys_display_local:
                functions_keys.append(func)

        node.functions_key = functions_keys

        frame_stack = []
        frame_from_field = {}

        for display_scope in filter(lambda scope: scope.active_frame, display_scopes):
            # Assume we've got only one active frame.
            # Should raise an error during the validation.
            frame_name = display_scope.frame_name
            frame_stack.append(frame_name)
            for field in node.field_names:
                frame_definition = frame_name.definition
                if isinstance(frame_definition, ast.Frame):
                    if isinstance(field, ast.ArrayId):
                        array_definition = field.array_definition
                        if array_definition:
                            array_name = array_definition.name
                            if field not in frame_from_field and array_name in frame_definition.frame_data_names:
                                frame_from_field[field] = frame_name
                                break
                    else:
                        if field not in frame_from_field and field.name in frame_definition.frame_data_names:
                            frame_from_field[field] = frame_name
                            break

        node.frame_stack = frame_stack
        node.frame_from_field = frame_from_field

    def visit_Restore(self, node):
        self.visit(node.frame_names)

    def visit_ClearFrame(self, node):
        self.visit(node.frame_names)

    def visit_Wait(self, node):
        self.visit(node.output_list)

    def visit_TypeToMessageArea(self, node):
        self.visit_Type(node)
