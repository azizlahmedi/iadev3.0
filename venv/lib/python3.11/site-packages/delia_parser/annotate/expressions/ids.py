# -*- coding:utf-8 -*-
from delia_parser import ast
from delia_parser.scope import (
    AdlScope,
    DisplayScope,
    AdlDynScope,
    QueryScope,
    AdlOfNameScope,
    WhereRoutineScope,
)
from delia_parser.annotate.convert_type import convert_type


class Ids:

    def get_scope_from_field_id(self, field_id):
        field_name = field_id.name

        scope_id = None
        if isinstance(field_id.scope, AdlDynScope):
            return field_id.scope

        if field_id.of_name is None:

            if self.in_local_function_key:
                if field_id.scope == self.dynamique_scope:
                    scope_id = self.dynamique_scope
                else:
                    for scope in self.scopes:
                        if isinstance(scope, DisplayScope) and scope.has_symbol(field_name):
                            scope_id = self.dynamique_scope
                            break
                        elif scope.has_symbol(field_name):
                            scope_id = scope
                            break
            else:
                for scope in self.scopes:
                    if scope.has_symbol(field_name):
                        scope_id = scope
                        break
        else:
            for scope in self.scopes:
                if scope.name == field_id.of_name or scope.alias_name == field_id.of_name:
                    if scope.has_symbol(field_name):
                        scope_id = scope
                    else:
                        scope_id = AdlOfNameScope(field_id.of_name)
                    break
            else:
                scope_id = AdlOfNameScope(field_id.of_name)

        if scope_id:
            assert(isinstance(scope_id, AdlScope))
        return scope_id

    def get_scope_from_array_id(self, field_id):
        field_name = field_id.name

        array_name = None
        if isinstance(field_name.definition, ast.Field):
            if field_id.of_name is None:
                for scope in self.scopes:
                    arrays = scope.get_arrays_from_column_name(field_name)
                    if len(arrays) == 1:
                        array_name = arrays[0]
                        break
            else:
                array_name = field_id.of_name

            scopes = list(filter(lambda scope: scope.has_symbol(array_name), self.scopes))

        elif isinstance(field_name.definition, ast.Array):
            array_name = field_name
            if field_id.of_name is None:
                scopes = list(filter(lambda scope: scope.has_symbol(array_name), self.scopes))
            else:
                scopes = list(filter(lambda scope: scope.name == field_id.of_name, self.scopes))

        if array_name is None:
            return None, None

        assert(array_name is not None)
        assert(len(scopes) >= 1)

        if self.in_local_function_key and len(scopes) >= 2:
            array_scope = self.dynamique_scope
        else:
            array_scope = scopes[0]

        return array_scope, array_scope.get_def(array_name)

    def visit_SourceInputId(self, node):
        self.visit_Id(node)
        self.visit(node.input_picture)

    def visit_SourceInputArrayId(self, node):
        self.visit_ArrayId(node)

    @convert_type
    def visit_Id(self, node):
        self.visit_Name(node.name)
        self.visit_Name(node.of_name)
        node.scope = self.get_scope_from_field_id(node)
        if isinstance(node.scope, (QueryScope, WhereRoutineScope)):
            node.scope.add_fetched_columns(node.name)

    def visit_ReferenceId(self, node):
        self.visit_Name(node.name)

    def visit_RelationFieldId(self, node):
        self.visit_Name(node.name)
        self.visit_Name(node.of_name)
        node.scope = self.get_scope_from_field_id(node)

    def visit_ViaFieldId(self, node):
        self.visit_Name(node.name)

    @convert_type
    def visit_ReturningFunction(self, node):
        self.visit_Name(node.name)

        if isinstance(node.name.definition, ast.Function):
            node.scope = self.procedure_scope

    @convert_type
    def visit_ArrayId(self, node):
        self.visit_Name(node.name)
        self.visit_Name(node.of_name)
        self.visit_with_one_scope(node.conversion_types, self.procedure_scope)
        self.visit(node.index)
        node.scope, node.array_definition = self.get_scope_from_array_id(node)
        if node.array_definition:
            node.array_definition.used = True
            if isinstance(node.array_definition, ast.Array):
                node.check_subscripts = node.array_definition.check_subscripts
