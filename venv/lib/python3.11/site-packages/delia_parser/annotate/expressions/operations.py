# -*- coding:utf-8 -*-
from delia_parser import ast, types
from delia_parser.annotate.convert_type import convert_type


def get_resulting_type(left_type, right_type, operator):

    if operator in ("**", "/", "//", "%") \
            and not (
                isinstance(left_type, types.Numeric) and
                isinstance(right_type, types.Numeric)
    ):
        return None
    elif operator in ("*", ) \
        and not (
            (
                isinstance(left_type, types.Numeric) and
                isinstance(right_type, types.Numeric)
            ) or (
                isinstance(left_type, types.String) and
                isinstance(right_type, types.Numeric)
            ) or (
                isinstance(left_type, types.Numeric) and
                isinstance(right_type, types.String)
            )
    ):
        return None
    elif operator in ("+", ) \
        and not (
            (
                isinstance(left_type, types.Numeric) and
                isinstance(right_type, types.Numeric)
            ) or (
                isinstance(left_type, types.String) and
                isinstance(right_type, types.String)
            ) or (
                isinstance(left_type, types.Date) and
                isinstance(right_type, types.Numeric)
            ) or (
                isinstance(left_type, types.Numeric) and
                isinstance(right_type, types.Date)
            )
    ):
        return None
    elif operator in ("-", ) \
        and not (
            (
                isinstance(left_type, types.Numeric) and
                isinstance(right_type, types.Numeric)
            ) or (
                isinstance(left_type, types.Date) and
                isinstance(right_type, types.Numeric)
            ) or (
                isinstance(left_type, types.Date) and
                isinstance(right_type, types.Date)
            )
    ):
        return None

    if operator == "/":
        return types.Decimal()

    elif operator == "//":
        return types.Integer()

    elif operator == "%":
        return types.Decimal()

    elif operator == "**":
        return types.Decimal()

    elif operator == "*":
        if (
            isinstance(left_type, types.Integer) and
            isinstance(right_type, types.Integer)
        ):
            return types.Integer()

        elif (
            isinstance(left_type, types.String) or
            isinstance(right_type, types.String)
        ):
            return types.String()
        else:
            return types.Decimal()

    elif operator == "+":
        if (
            isinstance(left_type, types.Integer) and
            isinstance(right_type, types.Integer)
        ):
            return types.Integer()

        elif (
            isinstance(left_type, types.String) and
            isinstance(right_type, types.String)
        ):
            return types.String()

        elif (
            isinstance(left_type, types.Date) or
            isinstance(right_type, types.Date)
        ):
            return types.Date()

        else:
            return types.Decimal()

    elif operator == "-":
        if (
            isinstance(left_type, types.Integer) and
            isinstance(right_type, types.Integer)
        ):
            return types.Integer()

        elif (
            isinstance(left_type, types.Date) and
            isinstance(right_type, types.Numeric)
        ):
            return types.Date()

        elif (
            isinstance(left_type, types.Date) and
            isinstance(right_type, types.Date)
        ):
            return types.Integer()

        else:
            return types.Decimal()
    else:
        raise


class Operations:

    def operation(self, node, operator):
        self.visit(node.left)
        self.visit(node.right)

        left_type = node.left.type
        right_type = node.right.type

        resulting_type = get_resulting_type(left_type, right_type, operator)
        node.type = resulting_type

        if isinstance(resulting_type, types.Date):
            if isinstance(left_type, types.Date):
                node.picture = node.left.picture
            elif isinstance(right_type, types.Date):
                node.picture = node.right.picture
        else:
            node.picture = ast.UnknownPicture()

        self.visit(node.basic_picture)

    @convert_type
    def visit_Pow(self, node):
        self.operation(node, operator="**")

    @convert_type
    def visit_Mul(self, node):
        self.operation(node, operator="*")

    @convert_type
    def visit_Div(self, node):
        self.operation(node, operator="/")

    @convert_type
    def visit_FloorDiv(self, node):
        self.operation(node, operator="//")

    @convert_type
    def visit_Mod(self, node):
        self.operation(node, operator="%")

    @convert_type
    def visit_Plus(self, node):
        self.operation(node, operator="+")

    @convert_type
    def visit_Minus(self, node):
        self.operation(node, operator="-")

    @convert_type
    def visit_Uminus(self, node):
        self.visit(node.right)
        node.type = node.right.type
        node.picture = ast.UnknownPicture()
        self.visit(node.basic_picture)

    @convert_type
    def visit_Uplus(self, node):
        self.visit(node.right)
        node.type = node.right.type
        node.picture = ast.UnknownPicture()
        self.visit(node.basic_picture)
