# -*- coding:utf-8 -*-
from delia_parser import ast
from delia_parser.annotate.convert_type import convert_type
from delia_parser.annotate.expressions.ids import Ids
from delia_parser.annotate.expressions.names import Names
from delia_parser.annotate.expressions.comparisons import Comparisons
from delia_parser.annotate.expressions.operations import Operations
from delia_parser.annotate.expressions.builltins import Builtins


class Expression(Ids,
                 Names,
                 Comparisons,
                 Operations,
                 Builtins):

    @convert_type
    def visit_ConstantRef(self, node):
        self.visit(node.name)
        self.visit(node.basic_picture)

    @convert_type
    def visit_String(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_ControlCharacter(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_ConcatenatedString(self, node):

        new_values = []
        for value in node.values:
            self.visit(value)
            new_value = value
            if isinstance(value, (ast.String, ast.ConstantRef)):
                if isinstance(value, ast.ConstantRef):
                    new_value = value.definition.value
                new_values.append(new_value)
        node.resolved_values = new_values

        node.picture = ast.StringPicture(literal_value=node.value)
        self.visit(node.basic_picture)

    @convert_type
    def visit_Date(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_Integer(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_Decimal(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_Float(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_Double(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_Boolean(self, node):
        self.visit(node.basic_picture)
