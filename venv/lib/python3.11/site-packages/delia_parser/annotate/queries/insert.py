# -*- coding:utf-8 -*-
from delia_parser import ast


class Insert:
    def visit_Insert(self, node):

        relation_name = node.relation_name
        self.visit_Name(relation_name)

        if not node.is_relation_declared:
            return

        rel_definition = relation_name.definition

        self.visit(node.using_clauses)
        self.visit(node.duplicate_clause)

        using_keys = node.using_keys
        using_datas = node.using_datas

        rel_definition.used = True

        keys = rel_definition.keys
        datas = rel_definition.datas

        using_field = {}
        if node.using_clauses is not None:
            for using_clause in node.using_clauses:
                using_field[using_clause.parametre] = using_clause.data_expression

        for key in keys:
            if key in using_field:
                using_keys[key] = using_field[key]
            else:
                using_keys[key] = ast.Id(key, locations=node.locations)

        if datas is not None:
            for data in datas:
                if data in using_field:
                    using_datas[data] = using_field[data]
                else:
                    using_datas[data] = ast.Id(data, locations=node.locations)

        # Visit the values of the using parameters for the fetched datas.
        self.visit(using_keys.values())
        self.visit(using_datas.values())
