# -*- coding:utf-8 -*-
from delia_parser.scope import QueryDeleteScope, WhereClauseScope, WhereRoutineScope


class Delete:

    def visit_DeleteRelation(self, node):

        relation_name = node.relation_name
        alias_name = node.alias_name
        self.relation_name_alias(relation_name, alias_name)

        if not node.is_relation_declared:
            return

        rel_definition = relation_name.definition
        rel_definition.used = True

        query_scope = QueryDeleteScope(self.procedure_scope, node, relation_name, alias_name)
        node.scope = query_scope
        node.parent_scope = self.current_scope

        qualified_rel_alias = node.qualified_rel_alias
        qualified_rel_alias.relation_name = relation_name

        self.visit(qualified_rel_alias.via_clause)
        self.optimize_via_clause(node)
        self.rebuild_viakey_clause(node)

        self.scopes.appendleft(query_scope)

        if not qualified_rel_alias.where_clause:
            self.jsonize_via_clause(node)
        else:

            where_clause_scope = WhereClauseScope(self.procedure_scope, node, relation_name, alias_name)
            self.scopes.appendleft(where_clause_scope)
            self.visit(qualified_rel_alias.where_clause)
            self.scopes.popleft()

            self.optimize_where_clause(node, all_datas=True)
            self.jsonize_via_clause(node)
            if self.procedure_scope.in_schema(relation_name):
                self.optimize_where_clause_better_for_permdb(node, all_datas=True)

            if qualified_rel_alias.where_clause and not qualified_rel_alias.is_where_optimized:
                where_routine_scope = WhereRoutineScope(self.procedure_scope, node, relation_name, alias_name)
                self.scopes.appendleft(where_routine_scope)
                self.visit(qualified_rel_alias.where_clause)
                self.scopes.popleft()
                query_scope.fetched_columns.update(where_routine_scope.fetched_columns)
                query_scope.where_routine_params.update(where_routine_scope.fetched_columns)

        self.scopes.popleft()
