# -*- coding:utf-8 -*-
from delia_parser import ast, types
from delia_parser.visitor import ASTVisitorABC
from delia_parser.annotate.interfaces import Interface
from delia_parser.annotate.declarations import Declaration
from delia_parser.annotate.queries import Query
from delia_parser.annotate.screens import Screen
from delia_parser.annotate.expressions import Expression
from delia_parser.annotate.assignments import Assignment
from delia_parser.annotate.controlflow import ControlFlow
from delia_parser.annotate.controls import Control
from delia_parser.scope import AdlDynScope, ProcedureScope, WhereRoutineScope, DequeScopes


class Annotator(ASTVisitorABC,
                Declaration,
                Interface,
                Query,
                Screen,
                Expression,
                Assignment,
                ControlFlow,
                Control):

    INTERGER_MAX_DIGITS = 30
    TYPE_TO_PICTURE = {types.Date(): ast.DatePicture,  # AST Type : Picture type
                       types.Decimal(): ast.DecimalPicture,
                       types.Double(): ast.DoublePicture,
                       types.Float(): ast.FloatPicture,
                       types.Integer(): ast.IntegerPicture,
                       types.String(): ast.StringPicture, }

    def __init__(self, compile_ctx, visit=None):

        self.in_schema = False
        self.in_local_function_key = False
        self.in_decls = False
        self.reports = []
        self.scopes = DequeScopes()
        self.procedure_scope = ProcedureScope()
        self.scopes.appendleft(self.procedure_scope)
        self.report_conditions = []
        self.dynamique_scope = AdlDynScope(self.procedure_scope)
        ASTVisitorABC.__init__(self, compile_ctx, visit=visit)

    @property
    def current_scope(self):
        return self.scopes[0]

    def visit_with_one_scope(self, node, scope):
        scopes_save = self.scopes
        self.scopes = DequeScopes([scope])
        self.visit(node)
        self.scopes = scopes_save

    def visit_tearDown(self):
        pass
