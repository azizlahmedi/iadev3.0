# -*- coding:utf-8 -*-
from delia_parser import ast, types
from delia_parser.annotate.convert_type import convert_type


class Report:

    def visit_Report(self, node):

        report_name = node.name
        report_parameters = node.parameters
        report_conditions = node.conditions

        self.add_symbol(node)

        self.visit(report_parameters)
        for report_parameter in report_parameters:
            report_parameter.report_name = report_name

        for report_condition in report_conditions:
            report_condition.report_name = report_name
            if not isinstance(report_condition, (ast.ReportCondition, ast.GroupCondition)):
                self.visit(report_condition)
            elif isinstance(report_condition, ast.GroupCondition):
                self.add_symbol(report_condition)

    def report_condition(self, node):
        if isinstance(node, ast.GroupCondition):
            group_field_name = node.field_name
            self.visit(group_field_name)
            self.visit(node.name)
        self.visit(node.report_name)
        self.report_conditions.append(node)
        self.visit(node.stmts)
        self.report_conditions.pop()

    def report_item(self, node, _type, pictureDef):
        pictureClass = self.TYPE_TO_PICTURE[_type]
        node.picture = pictureClass(value=pictureDef)
        node.type = _type
        node.report_name = self.reports[-1]
        self.visit(node.basic_picture)

    @convert_type
    def visit_ReportLineLength(self, node):
        self.report_item(node, _type=types.Integer(), pictureDef="4ZN")

    @convert_type
    def visit_ReportPageNum(self, node):
        self.report_item(node, _type=types.Integer(), pictureDef="4ZN")

    @convert_type
    def visit_ReportPageSize(self, node):
        self.report_item(node, _type=types.Integer(), pictureDef="ZZN")

    @convert_type
    def visit_ReportLineNum(self, node):
        self.report_item(node, _type=types.Integer(), pictureDef="ZZN")

    @convert_type
    def visit_ReportTopMargin(self, node):
        self.report_item(node, _type=types.Integer(), pictureDef="ZZN")

    @convert_type
    def visit_ReportBottomMargin(self, node):
        self.report_item(node, _type=types.Integer(), pictureDef="ZZN")

    @convert_type
    def visit_ReportHeadingSize(self, node):
        self.report_item(node, _type=types.Integer(), pictureDef="ZZN")

    @convert_type
    def visit_ReportFootingSize(self, node):
        self.report_item(node, _type=types.Integer(), pictureDef="ZZN")

    @convert_type
    def visit_ReportPageDivider(self, node):
        self.report_item(node, _type=types.String(), pictureDef='C')

    def visit_ReportPageTop(self, node):  # TODO REWORK
        for _ in filter(lambda current_node: isinstance(current_node, ast.ReportCondition) and not isinstance(current_node, ast.ReportFooting), self.report_conditions):
            node.in_page_report_headers_or_page_footers = True
            break

    def visit_ReportHeading(self, node):
        self.report_condition(node)

    def visit_ReportFooting(self, node):
        self.report_condition(node)

    def visit_PageHeading(self, node):
        self.report_condition(node)

    def visit_PageFooting(self, node):
        self.report_condition(node)

    def visit_GroupHeading(self, node):
        self.add_symbol(node)
        self.report_condition(node)

    def visit_GroupFooting(self, node):
        self.add_symbol(node)
        self.report_condition(node)

    def visit_Force(self, node):
        self.visit(node.report_cond)

        if node.report_name is None:
            for report in self.reports:
                report_name = report
                break
            node.report_name = report_name

        self.visit(node.report_name)

    def visit_Print(self, node):
        if node.report_name is None and len(self.report_conditions) > 0:
            node.report_name = self.report_conditions[0].report_name
        self.visit(node.report_name)
        self.visit(node.output_list)

    def visit_WriteReport(self, node):

        self.scopes.appendleft(self.procedure_scope)
        self.visit(node.report_names)
        self.scopes.popleft()

        for report_name in node.report_names:

            self.reports.append(report_name)

            if isinstance(report_name.definition, ast.Report):
                report_defintion = report_name.definition
                report_defintion.used = True

                self.visit(report_defintion.dest)

                for report_condition in report_defintion.conditions:
                    if isinstance(report_condition, (ast.ReportCondition, ast.GroupCondition)):
                        self.report_condition(report_condition)

        self.visit(node.stmts)

        for report_name in node.report_names:
            self.reports.pop()

    @convert_type
    def visit_CumulativeFunction(self, node):

        def get_picture(node):
            if hasattr(node, 'definition'):
                if node.definition:
                    return node.definition.picture
                else:
                    return None
            else:
                return node.picture

        function_name = str(node.name)
        self.visit(node.parameters)
        self.visit(node.conversion_types)

        parameter = None
        if function_name in ('avg', 'sum', 'min', 'max'):
            parameter = node.parameters[0]

        if len(self.report_conditions) > 0:
            assert(len(self.report_conditions) == 1)
            report_footing_or_group_footing_node = self.report_conditions[0]

            if isinstance(report_footing_or_group_footing_node, ast.ReportFooting):
                in_report_footing = True
            else:
                in_report_footing = False

            node.in_report_footing = in_report_footing
            node.in_group_footing = not in_report_footing

            report = report_footing_or_group_footing_node.report_name.definition
            node.report_name = report

            def append_param_once(param, ids):
                if isinstance(param, ast.Id) and param.name not in [param.name for param in ids]:
                    ids.append(param)

            if in_report_footing:
                if function_name == 'avg':
                    append_param_once(parameter, report.avg_all)
                elif function_name == 'sum':
                    append_param_once(parameter, report.sum_all)
                elif function_name == 'min':
                    append_param_once(parameter, report.min_all)
                elif function_name == 'max':
                    append_param_once(parameter, report.max_all)
                elif function_name == 'count':
                    report.count_all = True
            else:
                if function_name == 'avg':
                    append_param_once(parameter, report.avg)
                elif function_name == 'sum':
                    append_param_once(parameter, report.sum)
                elif function_name == 'min':
                    append_param_once(parameter, report.min)
                elif function_name == 'max':
                    append_param_once(parameter, report.max)
                elif function_name == 'count':
                    report.count = True

                # Store group condition.
                if not in_report_footing:
                    node.group_footing_condition = report_footing_or_group_footing_node.field_name

        if function_name == 'count':

            _type = types.Integer()
            pictureDef = "11ZN"
            pictureClass = self.TYPE_TO_PICTURE[_type]
            node.picture = pictureClass(pictureDef)
            node.type = _type
            self.visit(node.basic_picture)

        else:

            _type = parameter.type
            param_picture = get_picture(parameter)
            if param_picture is None:
                return

            if function_name in ('sum', 'avg'):

                if _type is types.Integer():
                    pictureDef = "%d-N" % self.INTERGER_MAX_DIGITS
                elif _type is types.Decimal():
                    __, decimal_digits = param_picture.picture.get_digits()
                    if decimal_digits:
                        pictureDef = "%d-N.%dN" % (self.INTERGER_MAX_DIGITS - decimal_digits, decimal_digits)
                    else:
                        pictureDef = "%d-N." % (self.INTERGER_MAX_DIGITS)
                elif _type is types.Float():
                    pictureDef = "-N.5NE"
                elif _type is types.Double():
                    pictureDef = "-N.15NE"
                else:
                    return

                pictureClass = self.TYPE_TO_PICTURE[_type]
                node.picture = pictureClass(pictureDef)
                node.type = _type
                self.visit(node.basic_picture)

            elif function_name in ('min', 'max'):
                node.picture = param_picture
                node.type = _type
