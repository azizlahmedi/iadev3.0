# -*- coding:utf-8 -*-


from collections import OrderedDict
from delia_parser import ast


class Source:

    def visit_Source(self, node):
        self.add_symbol(node)

        def gen_inputs(inputs):
            for input_item in inputs:
                if isinstance(input_item, (ast.SourceInputId, ast.SourceInputArrayId)):
                    yield input_item
                elif isinstance(input_item, ast.SourceConditional):
                    for input_case in input_item.input_cases:
                        yield from gen_inputs(input_case.inputs)
                    yield from gen_inputs(input_item.input_else)

        node.input_set = OrderedDict([(input_item.name, input_item)
                                      for input_item
                                      in gen_inputs(node.inputs)]).values()

    def source_conditional(self, node, source_name):
        node.source_name = source_name
        self.visit(node.cond)
        for input_case in node.input_cases:
            for input_ in input_case.inputs:
                self.source_input(input_, source_name)
        for input_ in node.input_else:
            self.source_input(input_, source_name)

    def source_input(self, node, source_name):
        self.visit(node)
        if isinstance(node, ast.SourceConditional):
            self.source_conditional(node, source_name)

    def annote_source(self, node):
        self.visit(node.attributes)
        self.visit(node.prompt)
        for _input in node.inputs:
            self.source_input(_input, node.name)
