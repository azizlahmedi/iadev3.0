# -*- coding:utf-8 -*-


from delia_parser import ast
from delia_parser.annotate.controls.pauses import Pauses
from delia_parser.annotate.convert_type import convert_type


class Control:

    def visit_ControlsForProcedure(self, node):
        for control in node.control_items:
            if isinstance(control, ast.ProcedureSeparator):
                separator = control.value
                self.procedure_scope.node.separator = separator
            elif isinstance(control, ast.ProcedureCheckSubscripts):
                check_subscripts = control.value
                self.procedure_scope.node.check_subscripts = check_subscripts
            elif isinstance(control, ast.ProcedureVerifyAcceptInput):
                verify_accept_input = True
                self.procedure_scope.node.verify_accept_input = verify_accept_input
            elif isinstance(control, ast.ProcedureNoAcceptTerminator):
                no_accept_terminator = True
                self.procedure_scope.node.no_accept_terminator = no_accept_terminator

    def visit_CallingControlLanguageFunction(self, node):
        self.visit(node.value)

    def visit_CallingControlLanguageUsersFunction(self, node):
        self.visit(node.value)

    def visit_CallingControlLanguageDateFunction(self, node):
        self.visit(node.value)

    def visit_CallingControlLanguageDigitSeparatorFunction(self, node):
        self.visit(node.value)

    @convert_type
    def visit_UsersLanguage(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_DateLanguage(self, node):
        self.visit(node.basic_picture)

    @convert_type
    def visit_DigitSeparator(self, node):
        self.visit(node.basic_picture)
