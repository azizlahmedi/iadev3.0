# -*- coding: utf-8 -*-

from delia_parser.ast import Root


class CompileContext:
    def __init__(self, root=Root()):
        self.reset(root)

    def reset(self, root):
        self.__files = []
        self.__macros = {}
        self.__macro_list = []
        self.__mapping_enabled = False
        self.__mapping_absolute = False
        self.__macro_to_function_enabled = False
        self.__struct_stmt_to_function_enabled = False
        self.__to_validate = True
        self.__gen_not_used = False
        self.__jmetadata = None
        self.__with_mapping = False
        self.__with_unused_warns = False
        self.ast = root

    def set_procedure(self, procedure):
        self.ast.set_procedure(procedure)

    def set_schema(self, schema):
        self.ast.set_schema(schema)

    @property
    def files(self):
        return self.__files

    @property
    def macros(self):
        return self.__macros

    @property
    def macro_list(self):
        return self.__macro_list

    @property
    def to_validate(self):
        return self.__to_validate

    @to_validate.setter
    def to_validate(self, val):
        self.__to_validate = val

    @property
    def gen_not_used(self):
        return self.__gen_not_used

    @gen_not_used.setter
    def gen_not_used(self, val):
        self.__gen_not_used = val

    @property
    def jmetadata(self):
        return self.__jmetadata

    @jmetadata.setter
    def jmetadata(self, val):
        self.__jmetadata = val

    @property
    def with_unused_warns(self):
        return self.__with_unused_warns

    @with_unused_warns.setter
    def with_unused_warns(self, val):
        self.__with_unused_warns = val

    @property
    def mapping_absolute(self):
        return self.__mapping_absolute

    @mapping_absolute.setter
    def mapping_absolute(self, val):
        self.__mapping_absolute = val

    @property
    def mapping_enabled(self):
        return self.__mapping_enabled

    @mapping_enabled.setter
    def mapping_enabled(self, val):
        self.__mapping_enabled = val

    @property
    def macro_to_function_enabled(self):
        return self.__macro_to_function_enabled

    @macro_to_function_enabled.setter
    def macro_to_function_enabled(self, val):
        self.__macro_to_function_enabled = val

    @property
    def struct_stmt_to_function_enabled(self):
        return self.__struct_stmt_to_function_enabled

    @struct_stmt_to_function_enabled.setter
    def struct_stmt_to_function_enabled(self, val):
        self.__struct_stmt_to_function_enabled = val

    def get_path(self, value):
        if value and len(self.files) > value:
            return self.files[value]
        else:
            return "<String>"
