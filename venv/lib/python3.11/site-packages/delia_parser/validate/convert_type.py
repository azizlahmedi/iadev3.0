from functools import wraps
from delia_parser import types, pictures
from delia_commons.errors import ErrorCode


type_to_str = {
    types.Date(): "<Date>",
    types.String(): "<String>",
    types.Decimal(): "<Decimal>",
    types.Integer(): "<Integer>",
    types.Float(): "<Float>",
}


def check_convert(self, node, to_type, to_pict, from_type, from_pict):

    if to_type is types.Date():

        if from_type is types.String():

            if not isinstance(to_pict, pictures.UnknownPicture):
                fmt_date = to_pict.normal_form()
                fmt_year = ('%Y', '%y')
                fmt_month = ('%B', '%b', '%m', '%_m')
                fmt_day = ('%d', '%_d')
                fmt_day_month = ('%j', '%_j')

                is_ambiguous = False

                for fmt in fmt_year:
                    if fmt in fmt_date:
                        break
                else:
                    is_ambiguous = True

                for fmt in fmt_day_month:
                    if fmt in fmt_date:
                        break
                else:
                    for fmt in fmt_month:
                        if fmt in fmt_date:
                            break
                    else:
                        is_ambiguous = True

                    for fmt in fmt_day:
                        if fmt in fmt_date:
                            break
                    else:
                        is_ambiguous = True

                if is_ambiguous:
                    self.add_warn(ErrorCode.AMBIGUOUS_DATE_REPRESENTATION, node)

        elif from_type in (types.Date(),
                           types.Decimal(),
                           types.Integer(),
                           types.Float(),
                           types.Double(),
                           ):
            pass

        else:
            self.add_error(ErrorCode.CONVERSION_NOT_SUPPORTED, node, from_pict=from_pict, to_pict=to_pict)

    elif to_type is types.String():

        if from_type in (types.String(), types.Date()):
            pass

        elif from_type in (types.Decimal(),
                           types.Integer(),
                           ):
            if isinstance(from_pict, pictures.UnknownPicture):
                self.add_warn(ErrorCode.AMBIGUOUS_NUMERIC_REPRESENTATION, node)

        else:
            self.add_error(ErrorCode.CONVERSION_NOT_SUPPORTED, node, from_pict=from_pict, to_pict=to_pict)

    elif to_type is types.Decimal():

        if from_type in (types.Decimal(),
                         types.Integer(),
                         types.Float(),
                         types.Double(),
                         types.Date(),
                         types.String(),
                         ):
            pass

        else:
            self.add_error(ErrorCode.CONVERSION_NOT_SUPPORTED, node, from_pict=from_pict, to_pict=to_pict)

    elif to_type is types.Integer():

        if from_type in (types.Integer(),
                         types.Float(),
                         types.Double(),
                         types.Decimal(),
                         types.Date(),
                         types.String(),
                         ):
            pass

        else:
            self.add_error(ErrorCode.CONVERSION_NOT_SUPPORTED, node, from_pict=from_pict, to_pict=to_pict)

    else:
        self.add_error(ErrorCode.CONVERSION_NOT_SUPPORTED, node, from_pict=from_pict, to_pict=to_pict)


def convert_type(visitor_func):

    @wraps(visitor_func)
    def wrapper(self, node):

        if node.conversion_types:

            from_type = node.basic_type
            from_pict = node.basic_picture.picture if node.basic_picture else None

            for to_form in node.conversion_types:

                to_type = to_form.type
                to_pict = to_form.picture.picture if to_form.picture else None

                self.visit(to_form)

                if from_pict is not None and to_pict is not None:
                    check_convert(self, node, to_type, to_pict, from_type, from_pict)

                from_pict = to_form.picture.picture if to_form.picture else None
                from_type = to_form.type

            result = visitor_func(self, node)

        else:
            result = visitor_func(self, node)

        return result
    return wrapper
