# -*- coding:utf-8 -*-
import re
from delia_commons.errors import ErrorCode
from delia_parser import ast, types
from delia_parser.validate.convert_type import convert_type


class Control:

    @convert_type
    def visit_UsersLanguage(self, node):
        pass

    @convert_type
    def visit_DateLanguage(self, node):
        pass

    @convert_type
    def visit_DigitSeparator(self, node):
        pass

    def visit_UsersLanguageIdentifier(self, node):
        literal = self.resolve(node.value)
        if not literal or str(literal) not in ("ENGLISH", "FRENCH", "SPANISH", "GERMAN", "DUTCH"):
            self.add_error(ErrorCode.CONTROLS_FOR_LANGUAGE_USERS_OR_DATE_UNKNOWN_VALUE, node)

    def visit_DateLanguageIdentifier(self, node):
        literal = self.resolve(node.value)
        if not literal or str(literal) not in ("ENGLISH", "FRENCH", "SPANISH", "GERMAN", "DUTCH"):
            self.add_error(ErrorCode.CONTROLS_FOR_LANGUAGE_USERS_OR_DATE_UNKNOWN_VALUE, node)

    def visit_DigitSeparatorLanguageIdentifier(self, node):
        literal = self.resolve(node.value)
        if not literal or str(literal) not in ('.,', ',.'):
            self.add_error(ErrorCode.CONTROLS_FOR_LANGUAGE_DIGIT_SEPARATOR_ILLEGAL_CHARACTER, node)

    def visit_Abort(self, node):
        self.visit(node.output_list)
        for outpout in node.output_list:
            if not isinstance(outpout.type, (types.String, types.Numeric, types.Date)):
                self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, outpout, name=outpout.name, kind='FIELD')

    def visit_Pause(self, node):
        self.visit(node.exp)
        if not isinstance(node.exp.type, types.Numeric):
            self.add_error(ErrorCode.PAUSE_STATEMENT_EXPECTED_NUMERIC, node.exp)

    def visit_PauseForInput(self, node):
        self.visit_Pause(node)
        self.visit(node.then_else_clause)
