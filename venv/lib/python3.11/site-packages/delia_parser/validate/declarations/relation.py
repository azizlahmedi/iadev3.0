#! /usr/bin/env python
# -*- coding:utf-8 -*-


from delia_commons.errors import ErrorCode
from delia_parser import ast


class Relation:
    def visit_Relation(self, node):

        self.relation_names.add(node.name)

        self.check_name(node.name)

        for i,field in enumerate(node.columns):
            if node.columns[i:].count(field) > 1 :
                self.add_error(ErrorCode.RELATION_DATA_FIELD_USED_TOO_MANY_TIME, field, name=field)

        if not node.used:
            return

        for field_name in node.columns:
            if not isinstance(field_name.definition, ast.Field):
                self.add_error(ErrorCode.RELATION_DATA_NOT_FIELD, field_name, relation_name=node.name)
            if self.in_schema and isinstance(field_name.picture, (ast.FloatPicture, ast.DoublePicture)):
                self.add_error(ErrorCode.FLOAT_NOT_SUPPORTED_IN_SCHEMA_RELATION_COLUMNS, node, type="Float", name=field_name)

        for index in node.indexes:
            for index_name in index:
                if index_name not in node.columns:
                    self.add_error(ErrorCode.RELATION_INDEX_NOT_PART_OF_RELATION, index_name, index_name=index_name, relation_name=node.name)

    def visit_SameAsRelation(self, node):

        self.relation_names.add(node.name)

        if node.name == node.subject_name:
            self.add_error(ErrorCode.SAME_AS_ITSELF, node, name=node.name, type="Relation")
        else:
            self.check_name(node.name)

        if not node.used:
            return

        if not node.subject_name.definition:
            self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node, name=node.subject_name)

        elif not isinstance(node.subject_name.definition, ast.Relation):
            self.add_error(ErrorCode.RELATION_SAME_NOT_AS_RELATION, node, name=node.subject_name)
