#! /usr/bin/env python
# -*- coding:utf-8 -*-


from delia_commons.errors import ErrorCode
from delia_parser import types
from delia_parser import ast


class Array:
    def visit_Array(self, node):

        name = node.name
        lower_bound = node.lower_bound
        upper_bound = node.upper_bound

        self.array_names.add(name)

        self.check_name(name)

        if not node.used:
            return

        if isinstance(node.array_columns, ast.SameAsArrayColumns) and node.name == node.array_columns.subject_name:
            self.add_error(ErrorCode.SAME_AS_ITSELF,
                           node,
                           name=node.name,
                           type="ARRAY COLUMN")
            return

        self.visit(lower_bound)
        self.visit(upper_bound)

        ok = True
        for node_boundary in (lower_bound, upper_bound):
            if not isinstance(node_boundary, (ast.Literal, ast.ConstantRef)):
                self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node_boundary, name=node_boundary)
                ok = False
            elif node_boundary.type is not types.Integer():
                self.add_error(ErrorCode.ARRAY_BOUND_NON_INTEGER, node_boundary, array_name=name)
                ok = False

        if ok and eval(str(self.resolve(lower_bound))) > eval(str(self.resolve(upper_bound))):
            self.add_error(ErrorCode.ARRAY_BOUND_LOWER_GREATER_THAN_UPPER, lower_bound, array_name=name)

        for column_name in node.columns:
            if column_name.definition is None:
                self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node, name=column_name)
            elif not isinstance(column_name.definition, ast.Field):
                self.add_error(ErrorCode.ARRAY_DATA_NOT_FIELD, column_name)

    def visit_SameAsArray(self, node):

        self.array_names.add(node.name)
        self.check_name(node.name)

        if not node.used:
            return

        if node.name == node.subject_name:
            self.add_error(ErrorCode.SAME_AS_ITSELF, node, name=node.name, type="Array")
        elif node.subject_name.definition is None:
            self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node, name=node.subject_name)
        elif not isinstance(node.subject_name.definition, (ast.Array, ast.Relation,)):
            self.add_error(ErrorCode.ARRAY_SAME_NOT_AS_ARRAY_OR_RELATION, node, name=node.name)

    def visit_SameAsArrayColumns(self, node):
        if node.name == node.subject_name:
            self.add_error(ErrorCode.SAME_AS_ITSELF, node, name=node.name, type="Array")
        elif node.subject_name.definition is None:
            self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node, name=node.subject_name)
        elif not isinstance(node.subject_name.definition, (ast.Array, ast.Relation,)):
            self.add_error(ErrorCode.ARRAY_SAME_NOT_AS_ARRAY_OR_RELATION, node, name=node.name)

    def visit_ArrayIndex(self, node):
        index = node.index
        self.visit(index)
        if index.type is not types.Integer():
            self.add_error(ErrorCode.ARRAY_INDEX_NON_INTEGER, node, name=node.index)

    def visit_ArrayIndexAll(self, node):
        # Nothing to do
        pass

    def visit_ArrayIndexTo(self, node):
        lower = node.lower
        upper = node.upper
        self.visit(lower)
        self.visit(upper)
        if lower.type is not types.Integer():
            self.add_error(ErrorCode.ARRAY_INDEX_NON_INTEGER, node, name=lower)
        if upper.type is not types.Integer():
            self.add_error(ErrorCode.ARRAY_INDEX_NON_INTEGER, node, name=upper)
