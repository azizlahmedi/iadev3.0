#! /usr/bin/env python
# -*- coding:utf-8 -*-


from decimal import Decimal

from delia_commons.exceptions import InvalidPictureError
from delia_commons.errors import ErrorCode

from delia_parser import ast, types, pictures
from delia_parser.builtins import builtins
from delia_parser.validate.declarations.array import Array
from delia_parser.validate.declarations.relation import Relation
from delia_parser.validate.declarations.function import Function


class Declaration(Array,
                  Relation,
                  Function):

    def check_name(self, name):
        value = str(name)

        if value in builtins:
            return

        if self.in_schema:
            if value in self.names_in_schema:
                self.add_error(ErrorCode.NAME_MULTIPLE_LOCAL_DECLARATION, name, name=value)
            else:
                self.names_in_schema.add(value)
                self.names.add(value)

        else:
            if value in self.names:
                if value in self.names_in_schema:
                    self.names_in_schema.remove(value)
                    self.names.add(value)
                    self.add_warn(ErrorCode.NAME_SCHEMA_REDECLARATION, name, name=value)
                else:
                    self.add_error(ErrorCode.NAME_MULTIPLE_LOCAL_DECLARATION, name, name=value)
            else:
                self.names.add(value)

    def check_locale_name(self, name):
        label_names_stack = [str(l.name) for l in self.labels]
        if name in self.alias_names:
            self.add_error(ErrorCode.NESTED_ALIAS_NAMES, name, name=name)
        elif name in self.names or \
                name in label_names_stack:
            self.add_error(ErrorCode.NAME_MULTIPLE_LOCAL_DECLARATION, name, name=name)

    def resolve(self, node):
        if isinstance(node, ast.ConstantRef):
            def resolve_constant(constant):
                while constant and isinstance(constant, ast.ConstantRef):
                    constant = constant.definition.value
                if isinstance(constant, ast.Literal):
                    return constant.value
                else:
                    return None
            return resolve_constant(node)
        elif isinstance(node, ast.Literal):
            return node.value
        return None

    def visit_Schema(self, node):
        self.visit(node.name)
        self.in_schema = True
        self.visit(node.decls)
        self.in_schema = False

    def visit_Field(self, node):

        def check_verify_clause(verify_clause_value):
            if isinstance(verify_clause_value, (ast.Id, ast.ConstantRef)):
                if verify_clause_value.name != node.name:
                    self.add_error(ErrorCode.VERIFY_CODE_ILLIGAL_EXP, node, name=verify_clause_value.name)
            elif isinstance(verify_clause_value, ast.CallingFunction):
                value = str(verify_clause_value.name)
                if value not in builtins:
                    self.add_error(ErrorCode.VERIFY_CODE_ILLIGAL_EXP, node, name=verify_clause_value.name)
            elif verify_clause_value is not None and hasattr(verify_clause_value, "__iter__"):
                for child in verify_clause_value:
                    check_verify_clause(child)

        self.check_name(node.name)

        if not node.used:
            return

        attributes = node.attributes

        if isinstance(attributes, ast.SameAsAttributes) and node.name == attributes.subject_name:
            self.add_error(ErrorCode.SAME_AS_ITSELF,
                           node,
                           name=node.name,
                           type="Field")
            return

        self.visit(attributes)

        for field_clause in attributes.clauses:

            if isinstance(field_clause, ast.DefaultValue):

                node_picture = node.picture.picture
                clause_picture = field_clause.picture.picture

                if (isinstance(node_picture, pictures.StringPicture) and
                    isinstance(clause_picture, pictures.StringPicture) and
                        clause_picture.size > node_picture.size):

                    self.add_error(ErrorCode.DEFAULT_VALUE_UNMATCH_PICTURE,
                                   node,
                                   name=node.name,
                                   picture=node_picture,
                                   value=repr(field_clause.value))

                elif isinstance(node_picture, pictures.DecimalPicture):

                    clause_value = field_clause.value
                    if clause_value:

                        min_value = Decimal(node_picture.get_smallest())
                        max_value = Decimal(node_picture.get_largest())
                        default_value = Decimal(str(clause_value))

                        if not(min_value <= default_value <= max_value):
                            self.add_error(ErrorCode.DEFAULT_VALUE_UNMATCH_PICTURE,
                                           node,
                                           name=node.name,
                                           picture=node_picture,
                                           value=default_value)
            if isinstance(field_clause, ast.VerifyClause):
                check_verify_clause(field_clause.clause_value)

    def visit_Constant(self, node):

        self.check_name(node.name)

        if not node.used:
            return

        self.visit(node.value)

    def visit_SameAsClause(self, node):
        self.check_name(node.name)

        self.visit(node.subject_name)
        if node.subject_name.definition is None:
            self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node.subject_name, name=node.subject_name)

    def visit_SameAsAttributes(self, node):

        self.visit(node.subject_name)
        if node.subject_name.definition is None:
            self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node.subject_name, name=node.subject_name)

        self.visit(node.field_clauses)

    def visit_AsId(self, node):
        self.visit(node.id)
        if node.id.definition is None:
            self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node.id, name=node.id.name)

        self.visit(node.picture)

    def visit_AsConstant(self, node):
        self.visit(node.picture)

    def visit_AsPicture(self, node):
        self.visit(node.picture)

    def check_picture(self, node):
        try:
            node.picture.validate()
        except InvalidPictureError:
            self.add_error(ErrorCode.PICTURE_ILLEGAL_CHARACTER, node, picture=node.picture)

    def visit_IntegerPicture(self, node):
        self.check_picture(node)

    def visit_DecimalPicture(self, node):
        self.check_picture(node)

    def visit_StringPicture(self, node):
        if node.value:
            try:
                node.picture.validate()
            except InvalidPictureError:
                self.add_error(ErrorCode.PICTURE_ILLEGAL_CHARACTER, node, picture=node.picture)

    def visit_DatePicture(self, node):
        if node.value:
            try:
                node.picture.validate()
            except InvalidPictureError:
                self.add_error(ErrorCode.PICTURE_ILLEGAL_CHARACTER, node, picture=node.picture)
            else:
                form = node.picture.normal_form()
                if "%b" in form:
                    self.add_warn(ErrorCode.DATE_PICTURE_MONTH_ALIGNEMENT_RISK, node)
                if "%a" in form:
                    self.add_warn(ErrorCode.DATE_PICTURE_WEEK_DAY_ALIGNEMENT_RISK, node)
