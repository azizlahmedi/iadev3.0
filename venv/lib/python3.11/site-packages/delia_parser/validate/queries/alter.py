# -*- coding:utf-8 -*-

from delia_commons.errors import ErrorCode
from delia_parser import scope


class Alter:
    def visit_Alter(self, node):

        relation_name = node.relation_name

        self.visit(relation_name)

        relation_definition = relation_name.definition
        if not relation_definition:
            if relation_name not in self.names:
                self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, node.relation_name, name=node.relation_name)
            elif relation_name in self.relation_names:
                self.add_error(ErrorCode.ALTER_OUTSIDE_FOR_EACH_OR_SELECT_SCOPE_OR_ON_OTHER_RELATION, node)
            else:
                self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, node.relation_name, name=node.relation_name, kind="RELATION")

        if not node.is_relation_declared:
            return

        if isinstance(node.scope, scope.QueryForScope):
            for_each_node = node.scope.node
            qualified_rel_alias = for_each_node.qualified_rel_alias
            grouped_clause = qualified_rel_alias.grouped_clause
            join_clause_list = qualified_rel_alias.join_clause_list
            if join_clause_list:
                self.add_error(ErrorCode.ALTER_ON_FIELD_FROM_JOIN, node, relation_name=relation_name)
            if grouped_clause:
                self.add_error(ErrorCode.ALTER_ON_FIELD_FROM_GROUP, node, relation_name=relation_name)

        self.visit(node.using_clauses)

        parametre_set = set()
        if node.using_clauses:
            for using_clause in node.using_clauses:
                if using_clause.parametre in parametre_set:
                    self.add_error(
                        ErrorCode.MULTIPLE_ALTER,
                        using_clause,
                        name=using_clause.parametre,
                        relation_name=relation_name)
                else:
                    parametre_set.add(using_clause.parametre)
                if relation_definition:
                    if using_clause.parametre in relation_definition.keys:
                        self.add_error(ErrorCode.ALTER_USING_CLAUSE_KEY_FIELD_PROHIBITED, using_clause,
                                       name=using_clause.parametre, relation_name=relation_name)
                    elif using_clause.parametre not in relation_definition.datas:
                        self.add_error(ErrorCode.FIELD_WRONG_USAGE, using_clause,
                                       name=using_clause.parametre, relation_name=relation_definition.name)
