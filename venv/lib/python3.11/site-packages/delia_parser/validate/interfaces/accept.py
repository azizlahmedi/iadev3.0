# -*- coding: utf-8 -*-
from delia_commons.errors import ErrorCode
from delia_parser import ast


class Accept:

    def visit_Accept(self, node):
        self.visit(node.field_names)
        field_list = [field.name for field in node.field_names]
        for field in node.field_names:
            if isinstance(field.picture, (ast.FloatPicture, ast.DoublePicture)):
                self.add_error(ErrorCode.FLOAT_NOT_SUPPORTED_IN_ACCEPT_OR_SOURCE_INPUT_LIST, field, type="Float", name=field.name)
        if node.prompt_clauses:
            for prompt_clause in node.prompt_clauses:
                field_name = prompt_clause.field_name
                if not field_name.definition:
                    self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, field_name, name=field_name)
                elif prompt_clause.field_name not in field_list:
                    self.add_error(ErrorCode.PROMPT_FIELD_NOT_IN_ACCEPT_OR_SOURCE_INPUT_LIST, field_name, name=field_name)

    def visit_AcceptInputId(self, node):
        self.visit_Id(node)
        self.visit(node.input_picture)

    def visit_AcceptInputArrayId(self, node):
        self.visit_ArrayId(node)
        self.visit(node.input_picture)
