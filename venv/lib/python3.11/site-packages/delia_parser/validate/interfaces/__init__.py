# -*- coding:utf-8 -*-

from delia_commons.errors import ErrorCode
from delia_parser import ast, types
from delia_parser.validate.interfaces.report import Report
from delia_parser.validate.interfaces.source import Source
from delia_parser.validate.interfaces.accept import Accept


class Interface(Report,
                Source,
                Accept):

    def visit_ClearTerminalInport(self, node):
        raise NotImplementedError("ClearTerminalInport")

    def visit_ClearTerminalOutport(self, node):
        raise NotImplementedError("ClearTerminalOutport")

    def visit_Type(self, node):
        self.visit(node.output_list)
        for out in node.output_list:
            if not isinstance(out, ast.InputOutputItem) and \
                out.definition and \
                    not isinstance(out.type, (types.Numeric, types.Date, types.String)):
                self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, out, name=out.definition.name, kind='FIELD')
            elif isinstance(out, ast.ControlCharacter):
                if out.token.upper() != "@CR" and out.token.upper() != '@FF':
                    try:
                        value = int(out.value)
                        if value not in range(0, 256):
                            self.add_error(ErrorCode.CONTROL_CHARACTERE_INVALID, out, name="", kind='FIELD')
                    except ValueError:
                        self.add_error(ErrorCode.CONTROL_CHARACTERE_UNKNOWN, out, name="", kind='FIELD')




    def visit_Prompt(self, node):
        # Nothing to do.
        pass

    def visit_WriteInvalids(self, node):
        pass

    def check_output_expression(self, node):
        assert(isinstance(node, (ast.Tab, ast.TabTo, ast.Skip, ast.SkipTo,)))
        self.visit(node.value)
        if node.value.type is not None and not isinstance(node.value.type, types.Numeric):
            if isinstance(node, ast.Tab):
                expr_type_str = "@TAB"
            elif isinstance(node, ast.TabTo):
                expr_type_str = "@TAB TO"
            elif isinstance(node, ast.Skip):
                expr_type_str = "@SKIP"
            elif isinstance(node, ast.SkipTo):
                expr_type_str = "@SKIP TO"
            self.add_error(ErrorCode.EXPRESSION_EXPECTED_NUMERIC, node, expr=expr_type_str)

    def visit_Tab(self, node):
        self.check_output_expression(node)

    def visit_TabTo(self, node):
        # check in source free form
        if self.in_source_free_form:
            self.add_error(ErrorCode.SOURCE_FREE_FORM_INVALID_INPUT_ITEM, node, item="@TAB TO")

        self.check_output_expression(node)

    def visit_Skip(self, node):
        self.check_output_expression(node)

    def visit_SkipTo(self, node):
        # check in report scope
        if len(self.report_names) == 0:
            self.add_error(ErrorCode.TYPE_STATEMENT_IN_REPORT_SCOPE, node)

        self.check_output_expression(node)

    def visit_FileExists(self, node):
        self.visit(node.left)

    def visit_TextExists(self, node):
        self.visit(node.left)

    def visit_DeleteFile(self, node):
        self.visit(node.file_spec)
