# -*- coding:utf-8 -*-


from delia_commons.errors import ErrorCode
from delia_parser import ast, types
from delia_parser.validate.convert_type import convert_type


class Operations:

    def operation(self, node, operator):

        self.visit(node.left)
        self.visit(node.right)

        if any(isinstance(n, ast.Default) for n in (node.right, node.left)):
            self.add_error(ErrorCode.DEFAULT_WITH_OPERATOR, node, op=operator)
        else:
            if node.type is None:
                self.add_error(ErrorCode.OPERATION_WITH_INCOMPATIBLE_DATA_TYPE, node, operator=operator)

    @convert_type
    def visit_Pow(self, node):
        self.operation(node, operator="**")

    @convert_type
    def visit_Mul(self, node):
        self.operation(node, operator="*")

    @convert_type
    def visit_Div(self, node):
        self.operation(node, operator="/")

    @convert_type
    def visit_FloorDiv(self, node):
        self.operation(node, operator="//")

    @convert_type
    def visit_Mod(self, node):
        self.operation(node, operator="%")

    @convert_type
    def visit_Plus(self, node):
        self.operation(node, operator="+")

    @convert_type
    def visit_Minus(self, node):
        self.operation(node, operator="-")

    @convert_type
    def visit_Uminus(self, node):
        self.visit(node.right)
        self.visit(node.conversion_types)

        if not isinstance(node.right.type, types.Numeric):
            self.add_error(ErrorCode.OPERATION_UNARY_WITH_INCOMPATIBLE_DATA_TYPE, node)

    @convert_type
    def visit_Uplus(self, node):
        self.visit(node.right)
        self.visit(node.conversion_types)
