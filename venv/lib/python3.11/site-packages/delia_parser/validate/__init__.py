# -*- coding:utf-8 -*-

import time
from collections import deque

from delia_commons.errors import (
    ErrorCode,
    get_error_msg,
)

from delia_commons.exceptions import (
    SemanticError,
    SemanticWarning,
    SemanticErrors,
    SemanticWarnings,
    gen_macro_exceptions,
)

from delia_parser.visitor import ASTVisitorABC
from delia_parser.validate.declarations import Declaration
from delia_parser.validate.expressions import Expression
from delia_parser.validate.queries import Query
from delia_parser.validate.controlflow import ControlFlow
from delia_parser.validate.controls import Control
from delia_parser.validate.interfaces import Interface
from delia_parser.validate.assignments import Assignment
from delia_parser.validate.screens import Screen


class Validator(ASTVisitorABC,
                Declaration,
                Expression,
                Query,
                ControlFlow,
                Control,
                Interface,
                Assignment,
                Screen):

    default_date = time.strptime("17520914", "%Y%m%d")
    MAXIMUM_EXPRESSIONS = 42

    def __init__(self, compile_ctx, visit=None, proc_name=None):
        ASTVisitorABC.__init__(self, compile_ctx, visit=visit)
        self.proc_name = proc_name

        self.in_schema = False
        self.in_source_free_form = False
        self.in_function = False
        self.functions = []

        self.names = set()
        self.names_in_schema = set()
        self.relation_names = set()
        self.array_names = set()

        self.labels = deque()
        self.report_conditions = deque()
        self.report_names = deque()
        self.alias_names = deque()
        self.frame_names = deque()
        self.function_key_names = deque()

        self.errors = SemanticErrors()
        self.warns = SemanticWarnings()

    def visit_tearDown(self):
        if self.errors.has_error():
            raise self.errors
        if self.warns.has_warn():
            raise self.warns

    def add_error(self, code, node, **msg_kwargs):
        macro_stack = [(self.compile_ctx.macro_list[idx], m_lineno, m_col, self.compile_ctx.files[m_path]) for idx, m_lineno, m_col, m_path in node.macro_stack]
        for m_code, m_message, m_filename, m_lineno, m_column in gen_macro_exceptions(code, get_error_msg(code, **msg_kwargs), node.path, node.lineno, node.column, macro_stack):
            self.errors.add_error(SemanticError(m_code, m_message, m_filename, m_lineno, m_column))

    def add_warn(self, code, node, **msg_kwargs):
        macro_stack = [(self.compile_ctx.macro_list[idx], m_lineno, m_col, self.compile_ctx.files[m_path]) for idx, m_lineno, m_col, m_path in node.macro_stack]
        for m_code, m_message, m_filename, m_lineno, m_column in gen_macro_exceptions(code, get_error_msg(code, **msg_kwargs), node.path, node.lineno, node.column, macro_stack):
            self.warns.add_warn(SemanticWarning(m_code, m_message, m_filename, m_lineno, m_column))
