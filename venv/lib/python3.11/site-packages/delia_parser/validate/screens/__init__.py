#! /usr/bin/env python
# -*- coding:utf-8 -*-


from delia_commons.errors import ErrorCode
from delia_parser import ast, types, scope


class Screen:

    def visit_Screen(self, node):
        pass

    def visit_Frame(self, node):

        frame_name = node.name

        self.check_name(frame_name)

        if not node.used:
            return

        frame_data_names = node.frame_data_names
        frame_area = node.frame_area
        frame_format = node.frame_format_location
        self.visit(frame_area)
        self.visit(frame_format)

        # DATA.NAMES
        for frame_data_name in frame_data_names:

            self.visit(frame_data_name)

            frame_data_definition = frame_data_name.definition
            if frame_data_definition is None:
                self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, frame_data_name, name=frame_data_name)
            else:
                if not isinstance(frame_data_definition, (ast.Field, ast.Array)):
                    self.add_error(ErrorCode.EXPECTED_FIELD, frame_data_name, kind="field from the '{}' frame".format(frame_data_name))
                elif isinstance(frame_data_definition, ast.Field):
                    if isinstance(frame_data_definition.picture, (ast.FloatPicture, ast.DoublePicture)):
                        self.add_error(ErrorCode.FLOAT_NOT_SUPPORTED_IN_FRAME_DATA, frame_data_name, type="Float", name=frame_data_name)

        # FRAME.FORMAT
        if not frame_format.definition:
            self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, frame_format, name=frame_format)
        elif not isinstance(frame_format.definition, ast.FrameFormat):
            self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, frame_format, name=frame_format, kind='FRAME.FORMAT')

        # FIELD.CONTROL
        field_control_forms = {}
        array_control_forms = {}
        array_field_control_forms = {}

        for controlled_field in node.controlled_field_list:

            self.visit(controlled_field)

            for control_item in controlled_field.control_items:
                control_form = control_item.form

                for field_ref in controlled_field.fields_ref:

                    field_name = None
                    array_name = None

                    if isinstance(field_ref.scope, scope.AdlOfNameScope):
                        field_name = field_ref.name
                        array_name = field_ref.scope.name
                        if array_name not in frame_data_names:
                            self.add_error(ErrorCode.NOT_A_FRAME_FIELD_ITEM,
                                           field_ref,
                                           name=array_name, frame_name=frame_name)

                    elif isinstance(field_ref, ast.ArrayId) and field_ref.array_definition:
                        field_name = field_ref.name
                        array_name = field_ref.array_definition.name
                        if array_name not in frame_data_names:
                            self.add_error(ErrorCode.NOT_A_FRAME_FIELD_ITEM,
                                           field_ref,
                                           name=field_name, frame_name=frame_name)

                    elif isinstance(field_ref.definition, ast.Array):
                        array_name = field_ref.name
                        if array_name not in frame_data_names:
                            self.add_error(ErrorCode.NOT_A_FRAME_FIELD_ITEM,
                                           field_ref,
                                           name=array_name, frame_name=frame_name)

                    elif isinstance(field_ref.definition, ast.Field):
                        field_name = field_ref.name
                        if field_name not in frame_data_names:
                            self.add_error(ErrorCode.NOT_A_FRAME_FIELD_ITEM,
                                           field_ref,
                                           name=field_name, frame_name=frame_name)

                    else:
                        field_name = field_ref.name
                        self.add_error(ErrorCode.NOT_A_FRAME_FIELD_ITEM,
                                       field_ref,
                                       name=field_name, frame_name=frame_name)

                    if not array_name:
                        if field_name not in field_control_forms:
                            field_control_forms[field_name] = [control_form]
                        else:
                            control_forms = field_control_forms[field_name]
                            if control_form in control_forms:
                                self.add_error(ErrorCode.DISPLAY_FIELD_CONTROL_REDEFINITION,
                                               controlled_field,
                                               field_control=control_form,
                                               name=field_name, frame_name=frame_name)
                            else:
                                control_forms.append(control_form)

                    elif not field_name:

                        if array_name in array_field_control_forms:
                            array_fields = array_field_control_forms[array_name]
                            for control_forms in array_fields.values():
                                if control_form in control_forms:
                                    self.add_error(ErrorCode.DISPLAY_FIELD_CONTROL_REDEFINITION,
                                                   controlled_field,
                                                   field_control=control_form,
                                                   name=array_name, frame_name=frame_name)
                                    continue

                        if array_name not in array_control_forms:
                            array_control_forms[array_name] = [control_form]
                        else:
                            control_forms = array_control_forms[array_name]
                            if control_form in control_forms:
                                self.add_error(ErrorCode.DISPLAY_FIELD_CONTROL_REDEFINITION,
                                               controlled_field,
                                               field_control=control_form,
                                               name=array_name, frame_name=frame_name)
                            else:
                                control_forms.append(control_form)

                    else:

                        if array_name in array_control_forms:
                            control_forms = array_control_forms[array_name]
                            if control_form in control_forms:
                                self.add_error(ErrorCode.DISPLAY_FIELD_CONTROL_REDEFINITION,
                                               controlled_field,
                                               field_control=control_form,
                                               name=array_name, frame_name=frame_name)
                                continue

                        if array_name in array_field_control_forms:
                            array_fields = array_field_control_forms[array_name]
                        else:
                            array_field_control_forms[array_name] = {}
                            array_fields = array_field_control_forms[array_name]

                        if field_name not in array_fields:
                            array_fields[field_name] = [control_form]
                        else:
                            control_forms = array_fields[field_name]
                            if control_form in control_forms:
                                self.add_error(ErrorCode.DISPLAY_FIELD_CONTROL_REDEFINITION,
                                               controlled_field,
                                               field_control=control_form,
                                               name=field_name, frame_name=frame_name)
                            else:
                                control_forms.append(control_form)

    def visit_FrameFormat(self, node):
        self.check_name(node.name)

    def visit_FrameControlHelp(self, node):
        self.visit(node.value)
        for value in node.value:
            value_definition = value.definition
            if value_definition and (
                    value_definition.type is not types.String() or
                    (not isinstance(value, ast.Literal) and not isinstance(value.definition, ast.Constant))):
                self.add_error(ErrorCode.CONSTANT_OR_LITERAL, value, kind="<String>")

    def visit_FrameArea(self, node):
        for bound in (node.first_line, node.last_line):
            self.visit(bound)
            if bound.type is not types.Integer() or \
                    (not isinstance(bound, ast.Literal) and not isinstance(bound.definition, ast.Constant)):
                self.add_error(ErrorCode.CONSTANT_OR_LITERAL, bound, kind="<Integer>")

    def visit_Input(self, node):

        if len(self.frame_names) == 0:
            self.add_error(ErrorCode.NOT_IN_DISPLAY_SCOPE, node)

        for field_name in node.field_names:

            self.visit(field_name)

            if field_name.definition and len(self.frame_names) > 0:
                if field_name not in node.frame_from_field:
                    self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, field_name, name=field_name.name, kind="FIELD of the FRAME currently displayed")

        for function_key_name in node.function_key_names:

            self.function_key_names.appendleft(function_key_name)

            if not function_key_name.definition:
                self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, function_key_name, name=function_key_name)
            elif not isinstance(function_key_name.definition, ast.FunctionKey):
                self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, function_key_name, name=function_key_name, kind="FUNCTION.KEY")
            elif function_key_name.definition.is_globally:
                self.add_error(ErrorCode.GLOBAL_FUNCTION_KEY_USAGE_PROHIBITED, function_key_name)

        # Visit FUNTION.KEY
        for function_key_name in self.function_key_names:
            function_key_definition = function_key_name.definition
            if isinstance(function_key_definition, ast.FunctionKey):
                self.function_key_local_stmt(function_key_definition)

        for function_key_name in node.function_key_names:
            self.function_key_names.popleft()

    def visit_SetCursor(self, node):
        self.add_warn(ErrorCode.DEPRECATED, node, reason="DeprecationWarning")

    def visit_TypeToMessageArea(self, node):
        self.visit_Type(node)

    def visit_Display(self, node):

        active_frames_count = 0

        if len(self.report_conditions):
            self.add_error(ErrorCode.DISPLAY_IN_REPORT_CONDITION, node)

        for frame_name in node.frame_names:

            self.frame_names.appendleft(frame_name)

            self.visit(frame_name)

            if not frame_name.definition:
                self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, frame_name, name=frame_name)
            elif not isinstance(frame_name.definition, ast.Frame):
                self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, frame_name, name=frame_name, kind="FRAME")
            elif frame_name.definition.activated:
                active_frames_count += 1

        if active_frames_count == 0:
            self.add_error(ErrorCode.DISPLAY_WITHOUT_FRAME, node)
        elif active_frames_count > 1:
            self.add_error(ErrorCode.DISPLAY_MULTIPLE_FRAMES, node)

        for function_key_name in node.function_key_names:

            self.function_key_names.appendleft(function_key_name)

            if not function_key_name.definition:
                self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, function_key_name, name=function_key_name)
            elif not isinstance(function_key_name.definition, ast.FunctionKey):
                self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, function_key_name, name=function_key_name, kind="FUNCTION.KEY")
            elif function_key_name.definition.is_globally:
                self.add_error(ErrorCode.GLOBAL_FUNCTION_KEY_USAGE_PROHIBITED, function_key_name)

        self.visit(node.stmts)

        for frame_name in node.frame_names:
            self.frame_names.popleft()

        for function_key_name in node.function_key_names:
            self.function_key_names.popleft()

    def screen_controls(self, node):
        for frame_name in node.frame_names:
            if not frame_name.definition:
                self.add_error(ErrorCode.NAME_UNDECLARED_USAGE, frame_name, name=frame_name)
            elif not isinstance(frame_name.definition, ast.Frame):
                self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, frame_name, name=frame_name, kind="FRAME")
            elif frame_name not in self.frame_names:
                self.add_error(ErrorCode.NOT_IN_DISPLAY_SCOPE, frame_name)

    def visit_ClearFrame(self, node):
        self.screen_controls(node)

    def visit_Restore(self, node):
        self.screen_controls(node)

    def visit_Wait(self, node):
        self.visit(node.output_list)
        for outpout in node.output_list:
            if not isinstance(outpout.type, (types.String, types.Numeric, types.Date)):
                self.add_error(ErrorCode.INVALID_DEFINITION_TYPE, outpout, name=outpout.name, kind='FIELD')
        if not self.frame_names:
            self.add_error(ErrorCode.NOT_IN_DISPLAY_SCOPE, node)
