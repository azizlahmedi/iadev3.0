#!/usr/bin/env python

"""
file automatically generated from grammar file You can edit this module, or import it and subclass the Parser class
"""

from delia_parser.parser.parsetree import BaseParseTree
rules_count = {}


class BisonParser(object):

    """
    Base parser class

    You should subclass this, and provide a bunch of methods called
    on_TargetName', where 'TargetName' is the name of each target in
    your grammar (.y) file.
    """

    def __init__(self, verbose=False):
        self.verbose = verbose

    def _handle(self, compile_ctx, targetname, option, values):
        """
        Callback which receives a target from parser, as a targetname
        and list of term names and values.

        Tries to dispatch to on_TargetName() methods if they exist,
        otherwise wraps the target in a BisonNode object
        """

        handler = getattr(self, "ac_" + targetname, None)
        if handler:
            if self.verbose:
                try:
                    hdlrline = handler.__code__.co_firstlineno
                except:
                    hdlrline = handler.__init__.__code__.co_firstlineno
                print("invoking handler at line %s for %s" %
                      (hdlrline, targetname))
            self.last = handler(
                target=targetname, option=option, values=values)
            if self.verbose:
                print("handler for %s returned %s" %
                      (targetname, repr(self.last)))
        else:
            if self.verbose:
                print("no handler for %s, using default" % targetname)
            self.last = ParseNode(
                target=targetname, option=option, values=values)

        # assumedly the last thing parsed is at the top of the tree
        return self.last


class ParseNode(BaseParseTree):

    """
    This is the base class from which all your
    parse nodes are derived.
    Add methods to this class as you need them
    """

    def __init__(self, **kw):
        BaseParseTree.__init__(self, **kw)

    def __str__(self):
        """Customise as needed"""
        return "<%s instance at 0x%x>" % (self.__class__.__name__, hash(self))

    def __repr__(self):
        """Customise as needed"""
        return str(self)

    def dump(self, indent=0):
        """
        Dump out human-readable, indented parse tree
        Customise as needed - here, or in the node-specific subclasses
        """
        BaseParseTree.dump(self, indent)  # alter as needed


# ------------------------------------------------------
# Define a node class for each grammar target
# ------------------------------------------------------

class schema_Node(ParseNode):

    """
    Holds "schema" parse target and its components.
        schema
            : SCHEMA name BEGIN_TOKEN schema_decl_list END
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class constant_decl_Node(ParseNode):

    """
    Holds "constant_decl" parse target and its components.
        constant_decl
            : CONSTANT constant_def_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class constant_def_Node(ParseNode):

    """
    Holds "constant_def" parse target and its components.
        constant_def
            : name EQ literal
            | name EQ concatenated_string
            | name EQ boolean_literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class controls_decl_schema_Node(ParseNode):

    """
    Holds "controls_decl_schema" parse target and its components.
        controls_decl_schema
            : CONTROLS FOR con_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class con_opt_Node(ParseNode):

    """
    Holds "con_opt" parse target and its components.
        con_opt
            : con_alt retry_info
            | con_alt canonical_info
            | lang_alt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class con_alt_Node(ParseNode):

    """
    Holds "con_alt" parse target and its components.
        con_alt
            : DIRECTORY
            | rel_key
            | rel_key name_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class lang_alt_Node(ParseNode):

    """
    Holds "lang_alt" parse target and its components.
        lang_alt
            : LANGUAGE language_specs
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class retry_info_Node(ParseNode):

    """
    Holds "retry_info" parse target and its components.
        retry_info
            : interval_clause max_opt
            | maximum_clause interval_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class canonical_info_Node(ParseNode):

    """
    Holds "canonical_info" parse target and its components.
        canonical_info
            : CONCURRENT UPDATE ORDER is_opt canon_order_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class canon_order_list_Node(ParseNode):

    """
    Holds "canon_order_list" parse target and its components.
        canon_order_list
            : canon_order_list CANON_ORDER_OP name
            | name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class language_specs_Node(ParseNode):

    """
    Holds "language_specs" parse target and its components.
        language_specs
            : USERS quoted_string date_digit_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class date_digit_opt_Node(ParseNode):

    """
    Holds "date_digit_opt" parse target and its components.
        date_digit_opt
            : DATE quoted_string
            | DATE quoted_string DIGIT SEPARATOR quoted_string
            | DIGIT SEPARATOR quoted_string
            | DIGIT SEPARATOR quoted_string DATE quoted_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class interval_clause_Node(ParseNode):

    """
    Holds "interval_clause" parse target and its components.
        interval_clause
            : RETRY_INTERVAL integer
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class maximum_clause_Node(ParseNode):

    """
    Holds "maximum_clause" parse target and its components.
        maximum_clause
            : RETRY_MAXIMUM integer
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class procedure_Node(ParseNode):

    """
    Holds "procedure" parse target and its components.
        procedure
            : procedure_signature procedure_body
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class procedure_signature_Node(ParseNode):

    """
    Holds "procedure_signature" parse target and its components.
        procedure_signature
            : PROCEDURE name procedure_receiving_parameter_list procedure_returning_parameter_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class procedure_receiving_parameter_list_Node(ParseNode):

    """
    Holds "procedure_receiving_parameter_list" parse target and its components.
        procedure_receiving_parameter_list
            : LPAREN formal_parameter_list RPAREN
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class procedure_returning_parameter_list_Node(ParseNode):

    """
    Holds "procedure_returning_parameter_list" parse target and its components.
        procedure_returning_parameter_list
            : RETURNING LPAREN formal_parameter_list RPAREN
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class procedure_body_Node(ParseNode):

    """
    Holds "procedure_body" parse target and its components.
        procedure_body
            : no_b_stmt
            | BEGIN_TOKEN decl_list stmt_list END
            | label BEGIN_TOKEN decl_list stmt_list END
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class label_Node(ParseNode):

    """
    Holds "label" parse target and its components.
        label
            : name COLON
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class no_b_stmt_Node(ParseNode):

    """
    Holds "no_b_stmt" parse target and its components.
        no_b_stmt
            : struct_stmt
            | label struct_stmt
            | simple_stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class stmt_Node(ParseNode):

    """
    Holds "stmt" parse target and its components.
        stmt
            : BEGIN_TOKEN stmt_list END
            | label BEGIN_TOKEN stmt_list END
            | no_b_stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class controls_decl_Node(ParseNode):

    """
    Holds "controls_decl" parse target and its components.
        controls_decl
            : CONTROLS FOR all_info
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class all_info_Node(ParseNode):

    """
    Holds "all_info" parse target and its components.
        all_info
            : proc_alt proc_con_info_list
            | rel_alt rel_con_info
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class rel_alt_Node(ParseNode):

    """
    Holds "rel_alt" parse target and its components.
        rel_alt
            : rel_key
            | rel_key name_list
            | name_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class rel_con_info_Node(ParseNode):

    """
    Holds "rel_con_info" parse target and its components.
        rel_con_info
            : retry_info
            | retry_info update_info
            | update_info
            | update_info retry_info
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class proc_con_info_Node(ParseNode):

    """
    Holds "proc_con_info" parse target and its components.
        proc_con_info
            : CHECK SUBSCRIPTS on_off
            | NO ACCEPT TERMINATOR
            | VERIFY ACCEPT INPUT
            | SEPARATOR char_literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class update_info_Node(ParseNode):

    """
    Holds "update_info" parse target and its components.
        update_info
            : CHECKPOINT_ON_UPDATE
            | CONCURRENT UPDATE on_off
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class function_decl_Node(ParseNode):

    """
    Holds "function_decl" parse target and its components.
        function_decl
            : function_signature stmt_in_decl
            | function_signature IN file_spec
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class function_signature_Node(ParseNode):

    """
    Holds "function_signature" parse target and its components.
        function_signature
            : FUNCTION name LPAREN name_list_opt RPAREN RETURNING LPAREN name_list RPAREN field_attributes_opt
            | FUNCTION name LPAREN name_list_opt RPAREN field_attributes_opt
            | FUNCTION name RETURNING LPAREN name_list RPAREN field_attributes_opt
            | FUNCTION name field_attributes_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class function_key_decl_Node(ParseNode):

    """
    Holds "function_key_decl" parse target and its components.
        function_key_decl
            : function_key_signature stmt_in_decl
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class function_key_signature_Node(ParseNode):

    """
    Holds "function_key_signature" parse target and its components.
        function_key_signature
            : FUNCTION_KEY name IS concatenated_string GLOBALLY
            | FUNCTION_KEY name IS concatenated_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class frm_frmt_decl_Node(ParseNode):

    """
    Holds "frm_frmt_decl" parse target and its components.
        frm_frmt_decl
            : FRAME_FORMAT name frame_format_def
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class frame_format_def_Node(ParseNode):

    """
    Holds "frame_format_def" parse target and its components.
        frame_format_def
            : concatenated_string
            | frame_format_def concatenated_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class frame_decl_Node(ParseNode):

    """
    Holds "frame_decl" parse target and its components.
        frame_decl
            : FRAME name FROM frame_format_location border frame_area_opt frame_data_info frame_data_names controlled_field_list
            | FRAME name FROM frame_format_location border frame_area_opt controlled_field_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class frame_format_location_Node(ParseNode):

    """
    Holds "frame_format_location" parse target and its components.
        frame_format_location
            : name
            | FILE_TOKEN quoted_string
            | TEXT quoted_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class border_Node(ParseNode):

    """
    Holds "border" parse target and its components.
        border
            : 
            | BORDER ON
            | BORDER OFF
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class frame_data_info_Node(ParseNode):

    """
    Holds "frame_data_info" parse target and its components.
        frame_data_info
            : DATA quoted_string OR quoted_string
            | DATA quoted_string
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class frame_data_names_Node(ParseNode):

    """
    Holds "frame_data_names" parse target and its components.
        frame_data_names
            : DATA_NAME frame_data_list
            | DATA_NAMES frame_data_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class frame_area_Node(ParseNode):

    """
    Holds "frame_area" parse target and its components.
        frame_area
            : FRAME_AREA frame_area_data TO frame_area_data
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class controlled_field_Node(ParseNode):

    """
    Holds "controlled_field" parse target and its components.
        controlled_field
            : FIELD_CONTROL LPAREN field_ref_list RPAREN control_item_list
            | FIELD_CONTROL field_ref control_item_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class field_ref_Node(ParseNode):

    """
    Holds "field_ref" parse target and its components.
        field_ref
            : name
            | name LBRACKET ALL RBRACKET of_op name
            | name of_op name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class control_item_Node(ParseNode):

    """
    Holds "control_item" parse target and its components.
        control_item
            : BLANK
            | BLINK
            | BOLD
            | COLOR integer
            | DIM
            | HELP message
            | INITIAL_TOKEN
            | MINIMUM_LENGTH integer
            | OPAQUE
            | PROTECTED
            | REQUIRED
            | REVERSE
            | TERMINATE_FIELD
            | UNDERLINE
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class message_Node(ParseNode):

    """
    Holds "message" parse target and its components.
        message
            : char_literal
            | message COMMA char_literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class report_decl_Node(ParseNode):

    """
    Holds "report_decl" parse target and its components.
        report_decl
            : report_head report_parameters report_cond_def_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class report_head_Node(ParseNode):

    """
    Holds "report_head" parse target and its components.
        report_head
            : REPORT name_opt append_opt TO char_set_spec report_file
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class file_spec_Node(ParseNode):

    """
    Holds "file_spec" parse target and its components.
        file_spec
            : concatenated_string
            | FILE_TOKEN concatenated_string
            | TERMINAL
            | TEXT concatenated_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class report_param_Node(ParseNode):

    """
    Holds "report_param" parse target and its components.
        report_param
            : report_arith_item decl_arith_exp
            | report_char_item char_literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class report_cond_def_Node(ParseNode):

    """
    Holds "report_cond_def" parse target and its components.
        report_cond_def
            : group_cond stmt_in_decl
            | report_cond stmt_in_decl
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class group_cond_Node(ParseNode):

    """
    Holds "group_cond" parse target and its components.
        group_cond
            : GROUP_HEADING name_opt ON name
            | GROUP_FOOTING name_opt ON name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class screen_decl_Node(ParseNode):

    """
    Holds "screen_decl" parse target and its components.
        screen_decl
            : SCREEN for_def screen_def_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class for_def_Node(ParseNode):

    """
    Holds "for_def" parse target and its components.
        for_def
            : 
            | FOR quoted_string
            | ECHO
            | no_echo
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class screen_def_Node(ParseNode):

    """
    Holds "screen_def" parse target and its components.
        screen_def
            : char_item char_literal
            | FIELD_FLAGS name_list
            | FUNCTION_LENGTH integer
            | FUNCTION_SEPARATOR char_literal
            | LINE_LENGTH integer
            | MESSAGE_AREA integer TO_integer
            | SCREEN_SIZE integer
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class TO_integer_Node(ParseNode):

    """
    Holds "TO_integer" parse target and its components.
        TO_integer
            : 
            | TO integer
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class source_decl_Node(ParseNode):

    """
    Holds "source_decl" parse target and its components.
        source_decl
            : SOURCE name FROM source_file source_attr_list INPUT input_list prompt_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class source_attr_Node(ParseNode):

    """
    Holds "source_attr" parse target and its components.
        source_attr
            : no_echo
            | BINARY FORM
            | FIXED FORM
            | FREE FORM
            | INVALIDS TO file_spec
            | LINE_LENGTH decl_arith_exp
            | no_verify
            | SEPARATOR char_literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class no_echo_Node(ParseNode):

    """
    Holds "no_echo" parse target and its components.
        no_echo
            : NO ECHO
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class no_verify_Node(ParseNode):

    """
    Holds "no_verify" parse target and its components.
        no_verify
            : NO VERIFY
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class prompt_opt_Node(ParseNode):

    """
    Holds "prompt_opt" parse target and its components.
        prompt_opt
            : 
            | WITH prompt_error_edit
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class prompt_error_edit_Node(ParseNode):

    """
    Holds "prompt_error_edit" parse target and its components.
        prompt_error_edit
            : prompt_err_edit_fld
            | prompt_error_edit COMMA prompt_err_edit_fld
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class prompt_err_edit_fld_Node(ParseNode):

    """
    Holds "prompt_err_edit_fld" parse target and its components.
        prompt_err_edit_fld
            : prompt_err_edit_list FOR name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class prompt_err_edit_opt_Node(ParseNode):

    """
    Holds "prompt_err_edit_opt" parse target and its components.
        prompt_err_edit_opt
            : EDIT arith_exp
            | PROMPT quoted_string
            | PROMPT name
            | ERRORS quoted_string
            | ERRORS name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class output_item_Node(ParseNode):

    """
    Holds "output_item" parse target and its components.
        output_item
            : AT_SKIP arith_exp
            | AT_SKIP TO arith_exp
            | arith_exp
            | tab_info
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class tab_info_Node(ParseNode):

    """
    Holds "tab_info" parse target and its components.
        tab_info
            : AT_TAB arith_exp
            | AT_TAB TO arith_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class input_item_Node(ParseNode):

    """
    Holds "input_item" parse target and its components.
        input_item
            : AT_CR
            | tab_info
            | CONDITIONAL ON decl_arith_exp BEGIN_TOKEN input_case_list END input_else_opt
            | name LBRACKET array_index RBRACKET input_of_opt
            | name format_picture
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class input_case_Node(ParseNode):

    """
    Holds "input_case" parse target and its components.
        input_case
            : case_labels COLON input_case_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class case_labels_Node(ParseNode):

    """
    Holds "case_labels" parse target and its components.
        case_labels
            : literal
            | case_labels OR literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class input_else_opt_Node(ParseNode):

    """
    Holds "input_else_opt" parse target and its components.
        input_else_opt
            : ELSE BEGIN_TOKEN input_case_exp END
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class input_of_opt_Node(ParseNode):

    """
    Holds "input_of_opt" parse target and its components.
        input_of_opt
            : 
            | of_op name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class conditional_stmt_Node(ParseNode):

    """
    Holds "conditional_stmt" parse target and its components.
        conditional_stmt
            : CONDITIONAL ON arith_exp BEGIN_TOKEN case_stmt_list END else_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class case_stmt_Node(ParseNode):

    """
    Holds "case_stmt" parse target and its components.
        case_stmt
            : case_labels COLON stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class else_clause_Node(ParseNode):

    """
    Holds "else_clause" parse target and its components.
        else_clause
            : ELSE stmt
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class display_stmt_Node(ParseNode):

    """
    Holds "display_stmt" parse target and its components.
        display_stmt
            : DISPLAY protected_opt name_list USING name_list stmt
            | DISPLAY protected_opt name_list stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class do_while_stmt_Node(ParseNode):

    """
    Holds "do_while_stmt" parse target and its components.
        do_while_stmt
            : DO stmt WHILE bool_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class for_stmt_Node(ParseNode):

    """
    Holds "for_stmt" parse target and its components.
        for_stmt
            : FOR EACH qualified_rel_alias control_clause DO stmt
            | FOR EACH qualified_rel_alias report_clause control_clause DO stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class sorted_clause_Node(ParseNode):

    """
    Holds "sorted_clause" parse target and its components.
        sorted_clause
            : SORTED
            | SORTED ASCENDING
            | SORTED DESCENDING
            | SORTED ON sort_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class qualified_rel_alias_Node(ParseNode):

    """
    Holds "qualified_rel_alias" parse target and its components.
        qualified_rel_alias
            : name alias_clause where_clause_opt sorted_clause_opt
            | name alias_clause via_clause where_clause_opt sorted_clause_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class alias_clause_Node(ParseNode):

    """
    Holds "alias_clause" parse target and its components.
        alias_clause
            : ALIAS name
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class where_clause_Node(ParseNode):

    """
    Holds "where_clause" parse target and its components.
        where_clause
            : WHERE bool_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class sort_item_Node(ParseNode):

    """
    Holds "sort_item" parse target and its components.
        sort_item
            : order name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class control_clause_Node(ParseNode):

    """
    Holds "control_clause" parse target and its components.
        control_clause
            : CONTROLLED BY name_list
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class if_stmt_Node(ParseNode):

    """
    Holds "if_stmt" parse target and its components.
        if_stmt
            : IF bool_exp then_else_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class then_else_clause_Node(ParseNode):

    """
    Holds "then_else_clause" parse target and its components.
        then_else_clause
            : THEN stmt
            | THEN stmt ELSE stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class pause_for_stmt_Node(ParseNode):

    """
    Holds "pause_for_stmt" parse target and its components.
        pause_for_stmt
            : PAUSE_FOR_INPUT arith_exp then_else_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class protected_stmt_Node(ParseNode):

    """
    Holds "protected_stmt" parse target and its components.
        protected_stmt
            : PROTECTED stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class select_stmt_Node(ParseNode):

    """
    Holds "select_stmt" parse target and its components.
        select_stmt
            : SELECT qualified_rel_alias then_else_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class while_do_stmt_Node(ParseNode):

    """
    Holds "while_do_stmt" parse target and its components.
        while_do_stmt
            : WHILE bool_exp DO stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class write_report_stmt_Node(ParseNode):

    """
    Holds "write_report_stmt" parse target and its components.
        write_report_stmt
            : report_clause stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class report_clause_Node(ParseNode):

    """
    Holds "report_clause" parse target and its components.
        report_clause
            : WRITE REPORT
            | WRITE REPORTS
            | WRITE REPORT name_list
            | WRITE REPORTS name_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class abort_stmt_Node(ParseNode):

    """
    Holds "abort_stmt" parse target and its components.
        abort_stmt
            : ABORT
            | ABORT output_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class accept_stmt_Node(ParseNode):

    """
    Holds "accept_stmt" parse target and its components.
        accept_stmt
            : ACCEPT echo_verify_opt input_fld_name prompt_opt
            | ACCEPT FROM TERMINAL echo_verify_opt input_fld_name prompt_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class input_fld_name_Node(ParseNode):

    """
    Holds "input_fld_name" parse target and its components.
        input_fld_name
            : fld_name
            | input_fld_name COMMA fld_name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class fld_name_Node(ParseNode):

    """
    Holds "fld_name" parse target and its components.
        fld_name
            : AT_CR
            | qualified_name format_picture
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class add_stmt_Node(ParseNode):

    """
    Holds "add_stmt" parse target and its components.
        add_stmt
            : ADD arith_exp TO var_list round_spec
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class round_spec_Node(ParseNode):

    """
    Holds "round_spec" parse target and its components.
        round_spec
            : 
            | round_spec round_spec_elt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class alter_stmt_Node(ParseNode):

    """
    Holds "alter_stmt" parse target and its components.
        alter_stmt
            : ALTER name using_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class using_clause_Node(ParseNode):

    """
    Holds "using_clause" parse target and its components.
        using_clause
            : USING LPAREN using_exp_list RPAREN
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class using_exp_Node(ParseNode):

    """
    Holds "using_exp" parse target and its components.
        using_exp
            : arith_exp FOR name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class checkpoint_stmt_Node(ParseNode):

    """
    Holds "checkpoint_stmt" parse target and its components.
        checkpoint_stmt
            : CHECKPOINT
            | CHECKPOINT name_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class clear_stmt_Node(ParseNode):

    """
    Holds "clear_stmt" parse target and its components.
        clear_stmt
            : CLEAR clear_head
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class clear_head_Node(ParseNode):

    """
    Holds "clear_head" parse target and its components.
        clear_head
            : frame_list
            | TERMINAL direction
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class compile_stmt_Node(ParseNode):

    """
    Holds "compile_stmt" parse target and its components.
        compile_stmt
            : comp_head BEGIN_TOKEN case_stmt_list END else_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class comp_head_Node(ParseNode):

    """
    Holds "comp_head" parse target and its components.
        comp_head
            : COMPILE CONDITIONALLY ON literal
            | COMPILE CONDITIONALLY ON concatenated_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class delete_stmt_Node(ParseNode):

    """
    Holds "delete_stmt" parse target and its components.
        delete_stmt
            : DELETE file_text
            | DELETE FROM qualified_relation ALL
            | DELETE FROM qualified_relation
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class qualified_relation_Node(ParseNode):

    """
    Holds "qualified_relation" parse target and its components.
        qualified_relation
            : name where_clause_opt
            | name via_clause where_clause_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class file_text_Node(ParseNode):

    """
    Holds "file_text" parse target and its components.
        file_text
            : FILE_TOKEN arith_exp
            | TEXT arith_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class function_stmt_Node(ParseNode):

    """
    Holds "function_stmt" parse target and its components.
        function_stmt
            : name param_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class finish_stmt_Node(ParseNode):

    """
    Holds "finish_stmt" parse target and its components.
        finish_stmt
            : FINISH name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class force_stmt_Node(ParseNode):

    """
    Holds "force_stmt" parse target and its components.
        force_stmt
            : FORCE force_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class force_clause_Node(ParseNode):

    """
    Holds "force_clause" parse target and its components.
        force_clause
            : FOR name force_cond
            | force_cond
            | name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class input_stmt_Node(ParseNode):

    """
    Holds "input_stmt" parse target and its components.
        input_stmt
            : INPUT echo_verify_opt qualified_parameter_list USING name_list
            | INPUT echo_verify_opt qualified_parameter_list
            | INPUT FUNCTION_KEY USING name_list
            | INPUT FUNCTION_KEY
            | INPUT input_frame_batch error_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class input_frame_batch_Node(ParseNode):

    """
    Holds "input_frame_batch" parse target and its components.
        input_frame_batch
            : BATCH echo_verify_opt input_frame_batch_opt sending_clause
            | FRAME echo_verify_opt name_list sending_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class input_frame_batch_opt_Node(ParseNode):

    """
    Holds "input_frame_batch_opt" parse target and its components.
        input_frame_batch_opt
            : qualified_name
            | batch_tab
            | input_frame_batch_opt COMMA qualified_name
            | input_frame_batch_opt COMMA batch_tab
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class batch_tab_Node(ParseNode):

    """
    Holds "batch_tab" parse target and its components.
        batch_tab
            : AT_TAB arith_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class echo_verify_opt_Node(ParseNode):

    """
    Holds "echo_verify_opt" parse target and its components.
        echo_verify_opt
            : 
            | echo_verify
            | echo_verify echo_verify
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class sending_clause_Node(ParseNode):

    """
    Holds "sending_clause" parse target and its components.
        sending_clause
            : SENDING sending_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class error_opt_Node(ParseNode):

    """
    Holds "error_opt" parse target and its components.
        error_opt
            : 
            | ON SENDING ERRORS stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class insert_stmt_Node(ParseNode):

    """
    Holds "insert_stmt" parse target and its components.
        insert_stmt
            : INSERT INTO name using_opt duplicate_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class duplicate_opt_Node(ParseNode):

    """
    Holds "duplicate_opt" parse target and its components.
        duplicate_opt
            : 
            | ON DUPLICATE stmt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class let_stmt_Node(ParseNode):

    """
    Holds "let_stmt" parse target and its components.
        let_stmt
            : LET var_list round_spec EQ arith_exp
            | LET flag_name_list EQ bool_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class move_stmt_Node(ParseNode):

    """
    Holds "move_stmt" parse target and its components.
        move_stmt
            : MOVE bool_exp TO flag_name_list
            | MOVE arith_exp TO var_list round_spec
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class pause_stmt_Node(ParseNode):

    """
    Holds "pause_stmt" parse target and its components.
        pause_stmt
            : PAUSE arith_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class print_stmt_Node(ParseNode):

    """
    Holds "print_stmt" parse target and its components.
        print_stmt
            : PRINT TO name output_list
            | PRINT output_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class prompt_stmt_Node(ParseNode):

    """
    Holds "prompt_stmt" parse target and its components.
        prompt_stmt
            : PROMPT output_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class repeat_stmt_Node(ParseNode):

    """
    Holds "repeat_stmt" parse target and its components.
        repeat_stmt
            : REPEAT name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class restore_stmt_Node(ParseNode):

    """
    Holds "restore_stmt" parse target and its components.
        restore_stmt
            : RESTORE frame_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class frame_list_Node(ParseNode):

    """
    Holds "frame_list" parse target and its components.
        frame_list
            : FRAME name_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class return_stmt_Node(ParseNode):

    """
    Holds "return_stmt" parse target and its components.
        return_stmt
            : RETURN
            | RETURN using_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class run_stmt_Node(ParseNode):

    """
    Holds "run_stmt" parse target and its components.
        run_stmt
            : RUN name param_opt
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class param_opt_Node(ParseNode):

    """
    Holds "param_opt" parse target and its components.
        param_opt
            : LPAREN arith_exp_list_opt RPAREN ACCEPTING LPAREN qualified_parameter_list RPAREN
            | LPAREN arith_exp_list_opt SEMICOLON qualified_parameter_list_opt RPAREN
            | LPAREN arith_exp_list_opt RPAREN
            | ACCEPTING LPAREN qualified_parameter_list RPAREN
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class set_cursor_stmt_Node(ParseNode):

    """
    Holds "set_cursor_stmt" parse target and its components.
        set_cursor_stmt
            : SET_CURSOR qualified_name
            | SET_CURSOR AFTER qualified_name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class subtract_stmt_Node(ParseNode):

    """
    Holds "subtract_stmt" parse target and its components.
        subtract_stmt
            : SUBTRACT arith_exp FROM var_list round_spec
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class type_stmt_Node(ParseNode):

    """
    Holds "type_stmt" parse target and its components.
        type_stmt
            : TYPE type_to_opt output_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class type_to_opt_Node(ParseNode):

    """
    Holds "type_to_opt" parse target and its components.
        type_to_opt
            : 
            | TO MESSAGE_AREA
            | TO TERMINAL
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class wait_stmt_Node(ParseNode):

    """
    Holds "wait_stmt" parse target and its components.
        wait_stmt
            : WAIT output_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class write_invalids_stmt_Node(ParseNode):

    """
    Holds "write_invalids_stmt" parse target and its components.
        write_invalids_stmt
            : WRITE_INVALIDS of_op name output_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class format_picture_Node(ParseNode):

    """
    Holds "format_picture" parse target and its components.
        format_picture
            : AS BYTE LPAREN integer RPAREN
            | AS name
            | as_picture
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class of_name_opt_Node(ParseNode):

    """
    Holds "of_name_opt" parse target and its components.
        of_name_opt
            : 
            | of_op name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class rplce_function_Node(ParseNode):

    """
    Holds "rplce_function" parse target and its components.
        rplce_function
            : SUBSTR named_actual_param
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class named_actual_param_Node(ParseNode):

    """
    Holds "named_actual_param" parse target and its components.
        named_actual_param
            : LPAREN qualified_name COMMA arith_exp_list RPAREN
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class date_function_Node(ParseNode):

    """
    Holds "date_function" parse target and its components.
        date_function
            : DAY date_fld
            | MONTH date_fld
            | YEAR date_fld
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class date_fld_Node(ParseNode):

    """
    Holds "date_fld" parse target and its components.
        date_fld
            : LPAREN qualified_name RPAREN
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class array_decl_Node(ParseNode):

    """
    Holds "array_decl" parse target and its components.
        array_decl
            : ARRAY name array_def
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class array_def_Node(ParseNode):

    """
    Holds "array_def" parse target and its components.
        array_def
            : LBRACKET bound TO bound RBRACKET check_subscripts DATA columns_array
            | SAME AS name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class bound_Node(ParseNode):

    """
    Holds "bound" parse target and its components.
        bound
            : PLUS integer
            | MINUS integer
            | integer
            | name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class check_subscripts_Node(ParseNode):

    """
    Holds "check_subscripts" parse target and its components.
        check_subscripts
            : CHECK SUBSCRIPTS on_off
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class columns_array_Node(ParseNode):

    """
    Holds "columns_array" parse target and its components.
        columns_array
            : name_list
            | SAME AS name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class field_decl_Node(ParseNode):

    """
    Holds "field_decl" parse target and its components.
        field_decl
            : field_key field_def_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class field_def_Node(ParseNode):

    """
    Holds "field_def" parse target and its components.
        field_def
            : name field_attributes
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class field_attributes_Node(ParseNode):

    """
    Holds "field_attributes" parse target and its components.
        field_attributes
            : as_picture field_clauses
            | SAME AS name field_clauses
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class as_picture_Node(ParseNode):

    """
    Holds "as_picture" parse target and its components.
        as_picture
            : AS picture
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class picture_Node(ParseNode):

    """
    Holds "picture" parse target and its components.
        picture
            : quoted_string
            | DATE
            | DATE quoted_string
            | FLOAT
            | FLOAT quoted_string
            | LONG_FLOAT
            | LONG_FLOAT quoted_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class field_clauses_Node(ParseNode):

    """
    Holds "field_clauses" parse target and its components.
        field_clauses
            : 
            | field_clauses default_value
            | field_clauses verify_clause
            | field_clauses prompt_error
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class default_value_Node(ParseNode):

    """
    Holds "default_value" parse target and its components.
        default_value
            : DEFAULT literal
            | DEFAULT concatenated_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class verify_clause_Node(ParseNode):

    """
    Holds "verify_clause" parse target and its components.
        verify_clause
            : VERIFY bool_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class prompt_error_Node(ParseNode):

    """
    Holds "prompt_error" parse target and its components.
        prompt_error
            : WITH error_clause
            | WITH prompt_clause
            | WITH error_clause AND prompt_clause
            | WITH prompt_clause AND error_clause
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class error_clause_Node(ParseNode):

    """
    Holds "error_clause" parse target and its components.
        error_clause
            : ERRORS concatenated_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class prompt_clause_Node(ParseNode):

    """
    Holds "prompt_clause" parse target and its components.
        prompt_clause
            : PROMPT concatenated_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class relation_decl_Node(ParseNode):

    """
    Holds "relation_decl" parse target and its components.
        relation_decl
            : RELATION name stored_in relation_def relation_index
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class stored_in_Node(ParseNode):

    """
    Holds "stored_in" parse target and its components.
        stored_in
            : STORED IN quoted_string
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class relation_def_Node(ParseNode):

    """
    Holds "relation_def" parse target and its components.
        relation_def
            : IS KEY name_list DATA name_list
            | IS KEY name_list
            | SAME AS name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class relation_index_Node(ParseNode):

    """
    Holds "relation_index" parse target and its components.
        relation_index
            : 
            | INDEX ON ALL
            | INDEX ON name_list
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class bool_exp_Node(ParseNode):

    """
    Holds "bool_exp" parse target and its components.
        bool_exp
            : bool_exp OR bool_exp
            | bool_exp OR rel_op arith_exp
            | bool_exp OR arith_exp
            | bool_exp AND bool_exp
            | bool_exp AND rel_op arith_exp
            | bool_exp AND arith_exp
            | bool_exp EQV bool_exp
            | bool_exp XOR bool_exp
            | arith_exp IS picture_ref
            | arith_exp IS NOT picture_ref
            | qualified_name boolean_word
            | qualified_name NOT boolean_word
            | FILE_TOKEN arith_exp EXISTS
            | TEXT arith_exp EXISTS
            | LPAREN bool_exp RPAREN
            | NOT LPAREN bool_exp RPAREN
            | arith_exp rel_op arith_exp
            | boolean_literal
            | flag_name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class flag_name_Node(ParseNode):

    """
    Holds "flag_name" parse target and its components.
        flag_name
            : flag_types FLAG_OF qualified_name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class picture_ref_Node(ParseNode):

    """
    Holds "picture_ref" parse target and its components.
        picture_ref
            : name
            | name LBRACKET array_index RBRACKET
            | name LBRACKET array_index RBRACKET of_op name
            | picture
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class arith_exp_Node(ParseNode):

    """
    Holds "arith_exp" parse target and its components.
        arith_exp
            : LPAREN arith_exp RPAREN format_picture
            | data format_picture
            | PLUS arith_exp %prec UNARY
            | MINUS arith_exp %prec UNARY
            | arith_exp POW arith_exp
            | arith_exp STAR arith_exp
            | arith_exp SLASH arith_exp
            | arith_exp MOD arith_exp
            | arith_exp PLUS arith_exp
            | arith_exp MINUS arith_exp
            | DEFAULT
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class data_Node(ParseNode):

    """
    Holds "data" parse target and its components.
        data
            : ident_ref
            | report_arith_item of_name_opt
            | report_char_item of_name_opt
            | mag_function
            | number
            | character_constant
            | qualified_name
            | date_literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class literal_Node(ParseNode):

    """
    Holds "literal" parse target and its components.
        literal
            : PLUS number
            | MINUS number
            | number
            | char_literal
            | date_literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class date_literal_Node(ParseNode):

    """
    Holds "date_literal" parse target and its components.
        date_literal
            : DATE quoted_string
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class concatenated_string_Node(ParseNode):

    """
    Holds "concatenated_string" parse target and its components.
        concatenated_string
            : concatenated_string PLUS char_literal
            | char_literal
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class mag_function_Node(ParseNode):

    """
    Holds "mag_function" parse target and its components.
        mag_function
            : name LPAREN arith_exp_list RPAREN
            | SUBSTR actual_param_opt
            | COUNT actual_param_opt
            | YEAR actual_param_opt
            | MONTH actual_param_opt
            | DAY actual_param_opt
            | CKSUM LPAREN checksum_type COMMA arith_exp RPAREN
            | NEXT_DATE LPAREN week_day COMMA arith_exp RPAREN
            | LARGEST LPAREN qualified_name RPAREN
            | SMALLEST LPAREN qualified_name RPAREN
            | lang_func
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class actual_param_opt_Node(ParseNode):

    """
    Holds "actual_param_opt" parse target and its components.
        actual_param_opt
            : LPAREN arith_exp_list RPAREN
            | 
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class lang_func_Node(ParseNode):

    """
    Holds "lang_func" parse target and its components.
        lang_func
            : DATE LANGUAGE
            | DIGIT SEPARATOR
            | USERS LANGUAGE
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class implicit_select_Node(ParseNode):

    """
    Holds "implicit_select" parse target and its components.
        implicit_select
            : name LPAREN name via_clause RPAREN
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class ident_ref_Node(ParseNode):

    """
    Holds "ident_ref" parse target and its components.
        ident_ref
            : name LPAREN arith_exp_list_opt RPAREN
            | implicit_select
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class qualified_name_Node(ParseNode):

    """
    Holds "qualified_name" parse target and its components.
        qualified_name
            : name
            | name LBRACKET array_index RBRACKET of_op name
            | name LBRACKET array_index RBRACKET
            | name of_op name
            | name of_op PROCEDURE
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class array_index_Node(ParseNode):

    """
    Holds "array_index" parse target and its components.
        array_index
            : ALL
            | arith_exp
            | arith_exp TO arith_exp
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class via_clause_Node(ParseNode):

    """
    Holds "via_clause" parse target and its components.
        via_clause
            : VIA KEY
            | VIA LPAREN key_value_list RPAREN
            | VIA key_value
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class key_value_Node(ParseNode):

    """
    Holds "key_value" parse target and its components.
        key_value
            : ident_ref
            | name rel_op arith_exp
            | qualified_name
    """

    def __init__(self, **kw):
        ParseNode.__init__(self, **kw)


class Parser(BisonParser):

    """
    bison Parser class generated automatically by gengram.py from the
    grammar file

    You may (and probably should) edit the methods in this class.
    You can freely edit the rules (in the method docstrings), the
    tokens list, the start symbol, and the precedences.

    Each time this class is instantiated, a hashing technique in the
    base class detects if you have altered any of the rules. If any
    changes are detected, a new dynamic lib for the parser engine
    will be generated automatically.
    """

    # ---------------------------------------------------------------
    # Declare the start target here (by name)
    # ---------------------------------------------------------------
    start = "goal"

    # ---------------------------------------------------------------
    # These methods are the python handlers for the bison targets.
    # (which get called by the bison code each time the corresponding
    # parse target is unambiguously reached)
    #
    # WARNING - don't touch the method docstrings unless you know what
    # you are doing - they are in bison rule syntax, and are passed
    # verbatim to bison to build the parser engine library.
    # ---------------------------------------------------------------

    def ac_schema(self, target, option, values):
        """
        schema
            : SCHEMA name BEGIN_TOKEN schema_decl_list END
        """
        return schema_Node(
            target="schema",
            option=option,
            values=values)

    def ac_constant_decl(self, target, option, values):
        """
        constant_decl
            : CONSTANT constant_def_list
        """
        return constant_decl_Node(
            target="constant_decl",
            option=option,
            values=values)

    def ac_constant_def(self, target, option, values):
        """
        constant_def
            : name EQ literal
            | name EQ concatenated_string
            | name EQ boolean_literal
        """
        return constant_def_Node(
            target="constant_def",
            option=option,
            values=values)

    def ac_controls_decl_schema(self, target, option, values):
        """
        controls_decl_schema
            : CONTROLS FOR con_opt
        """
        return controls_decl_schema_Node(
            target="controls_decl_schema",
            option=option,
            values=values)

    def ac_con_opt(self, target, option, values):
        """
        con_opt
            : con_alt retry_info
            | con_alt canonical_info
            | lang_alt
        """
        return con_opt_Node(
            target="con_opt",
            option=option,
            values=values)

    def ac_con_alt(self, target, option, values):
        """
        con_alt
            : DIRECTORY
            | rel_key
            | rel_key name_list
        """
        return con_alt_Node(
            target="con_alt",
            option=option,
            values=values)

    def ac_lang_alt(self, target, option, values):
        """
        lang_alt
            : LANGUAGE language_specs
        """
        return lang_alt_Node(
            target="lang_alt",
            option=option,
            values=values)

    def ac_retry_info(self, target, option, values):
        """
        retry_info
            : interval_clause max_opt
            | maximum_clause interval_clause
        """
        return retry_info_Node(
            target="retry_info",
            option=option,
            values=values)

    def ac_canonical_info(self, target, option, values):
        """
        canonical_info
            : CONCURRENT UPDATE ORDER is_opt canon_order_list
        """
        return canonical_info_Node(
            target="canonical_info",
            option=option,
            values=values)

    def ac_canon_order_list(self, target, option, values):
        """
        canon_order_list
            : canon_order_list CANON_ORDER_OP name
            | name
        """
        return canon_order_list_Node(
            target="canon_order_list",
            option=option,
            values=values)

    def ac_language_specs(self, target, option, values):
        """
        language_specs
            : USERS quoted_string date_digit_opt
        """
        return language_specs_Node(
            target="language_specs",
            option=option,
            values=values)

    def ac_date_digit_opt(self, target, option, values):
        """
        date_digit_opt
            : DATE quoted_string
            | DATE quoted_string DIGIT SEPARATOR quoted_string
            | DIGIT SEPARATOR quoted_string
            | DIGIT SEPARATOR quoted_string DATE quoted_string
        """
        return date_digit_opt_Node(
            target="date_digit_opt",
            option=option,
            values=values)

    def ac_interval_clause(self, target, option, values):
        """
        interval_clause
            : RETRY_INTERVAL integer
        """
        return interval_clause_Node(
            target="interval_clause",
            option=option,
            values=values)

    def ac_maximum_clause(self, target, option, values):
        """
        maximum_clause
            : RETRY_MAXIMUM integer
        """
        return maximum_clause_Node(
            target="maximum_clause",
            option=option,
            values=values)

    def ac_procedure(self, target, option, values):
        """
        procedure
            : procedure_signature procedure_body
        """
        return procedure_Node(
            target="procedure",
            option=option,
            values=values)

    def ac_procedure_signature(self, target, option, values):
        """
        procedure_signature
            : PROCEDURE name procedure_receiving_parameter_list procedure_returning_parameter_list
        """
        return procedure_signature_Node(
            target="procedure_signature",
            option=option,
            values=values)

    def ac_procedure_receiving_parameter_list(self, target, option, values):
        """
        procedure_receiving_parameter_list
            : LPAREN formal_parameter_list RPAREN
            | 
        """
        return procedure_receiving_parameter_list_Node(
            target="procedure_receiving_parameter_list",
            option=option,
            values=values)

    def ac_procedure_returning_parameter_list(self, target, option, values):
        """
        procedure_returning_parameter_list
            : RETURNING LPAREN formal_parameter_list RPAREN
            | 
        """
        return procedure_returning_parameter_list_Node(
            target="procedure_returning_parameter_list",
            option=option,
            values=values)

    def ac_procedure_body(self, target, option, values):
        """
        procedure_body
            : no_b_stmt
            | BEGIN_TOKEN decl_list stmt_list END
            | label BEGIN_TOKEN decl_list stmt_list END
        """
        return procedure_body_Node(
            target="procedure_body",
            option=option,
            values=values)

    def ac_label(self, target, option, values):
        """
        label
            : name COLON
        """
        return label_Node(
            target="label",
            option=option,
            values=values)

    def ac_no_b_stmt(self, target, option, values):
        """
        no_b_stmt
            : struct_stmt
            | label struct_stmt
            | simple_stmt
        """
        return no_b_stmt_Node(
            target="no_b_stmt",
            option=option,
            values=values)

    def ac_stmt(self, target, option, values):
        """
        stmt
            : BEGIN_TOKEN stmt_list END
            | label BEGIN_TOKEN stmt_list END
            | no_b_stmt
        """
        return stmt_Node(
            target="stmt",
            option=option,
            values=values)

    def ac_controls_decl(self, target, option, values):
        """
        controls_decl
            : CONTROLS FOR all_info
        """
        return controls_decl_Node(
            target="controls_decl",
            option=option,
            values=values)

    def ac_all_info(self, target, option, values):
        """
        all_info
            : proc_alt proc_con_info_list
            | rel_alt rel_con_info
        """
        return all_info_Node(
            target="all_info",
            option=option,
            values=values)

    def ac_rel_alt(self, target, option, values):
        """
        rel_alt
            : rel_key
            | rel_key name_list
            | name_list
        """
        return rel_alt_Node(
            target="rel_alt",
            option=option,
            values=values)

    def ac_rel_con_info(self, target, option, values):
        """
        rel_con_info
            : retry_info
            | retry_info update_info
            | update_info
            | update_info retry_info
        """
        return rel_con_info_Node(
            target="rel_con_info",
            option=option,
            values=values)

    def ac_proc_con_info(self, target, option, values):
        """
        proc_con_info
            : CHECK SUBSCRIPTS on_off
            | NO ACCEPT TERMINATOR
            | VERIFY ACCEPT INPUT
            | SEPARATOR char_literal
        """
        return proc_con_info_Node(
            target="proc_con_info",
            option=option,
            values=values)

    def ac_update_info(self, target, option, values):
        """
        update_info
            : CHECKPOINT_ON_UPDATE
            | CONCURRENT UPDATE on_off
        """
        return update_info_Node(
            target="update_info",
            option=option,
            values=values)

    def ac_function_decl(self, target, option, values):
        """
        function_decl
            : function_signature stmt_in_decl
            | function_signature IN file_spec
        """
        return function_decl_Node(
            target="function_decl",
            option=option,
            values=values)

    def ac_function_signature(self, target, option, values):
        """
        function_signature
            : FUNCTION name LPAREN name_list_opt RPAREN RETURNING LPAREN name_list RPAREN field_attributes_opt
            | FUNCTION name LPAREN name_list_opt RPAREN field_attributes_opt
            | FUNCTION name RETURNING LPAREN name_list RPAREN field_attributes_opt
            | FUNCTION name field_attributes_opt
        """
        return function_signature_Node(
            target="function_signature",
            option=option,
            values=values)

    def ac_function_key_decl(self, target, option, values):
        """
        function_key_decl
            : function_key_signature stmt_in_decl
        """
        return function_key_decl_Node(
            target="function_key_decl",
            option=option,
            values=values)

    def ac_function_key_signature(self, target, option, values):
        """
        function_key_signature
            : FUNCTION_KEY name IS concatenated_string GLOBALLY
            | FUNCTION_KEY name IS concatenated_string
        """
        return function_key_signature_Node(
            target="function_key_signature",
            option=option,
            values=values)

    def ac_frm_frmt_decl(self, target, option, values):
        """
        frm_frmt_decl
            : FRAME_FORMAT name frame_format_def
        """
        return frm_frmt_decl_Node(
            target="frm_frmt_decl",
            option=option,
            values=values)

    def ac_frame_format_def(self, target, option, values):
        """
        frame_format_def
            : concatenated_string
            | frame_format_def concatenated_string
        """
        return frame_format_def_Node(
            target="frame_format_def",
            option=option,
            values=values)

    def ac_frame_decl(self, target, option, values):
        """
        frame_decl
            : FRAME name FROM frame_format_location border frame_area_opt frame_data_info frame_data_names controlled_field_list
            | FRAME name FROM frame_format_location border frame_area_opt controlled_field_list
        """
        return frame_decl_Node(
            target="frame_decl",
            option=option,
            values=values)

    def ac_frame_format_location(self, target, option, values):
        """
        frame_format_location
            : name
            | FILE_TOKEN quoted_string
            | TEXT quoted_string
        """
        return frame_format_location_Node(
            target="frame_format_location",
            option=option,
            values=values)

    def ac_border(self, target, option, values):
        """
        border
            : 
            | BORDER ON
            | BORDER OFF
        """
        return border_Node(
            target="border",
            option=option,
            values=values)

    def ac_frame_data_info(self, target, option, values):
        """
        frame_data_info
            : DATA quoted_string OR quoted_string
            | DATA quoted_string
            | 
        """
        return frame_data_info_Node(
            target="frame_data_info",
            option=option,
            values=values)

    def ac_frame_data_names(self, target, option, values):
        """
        frame_data_names
            : DATA_NAME frame_data_list
            | DATA_NAMES frame_data_list
        """
        return frame_data_names_Node(
            target="frame_data_names",
            option=option,
            values=values)

    def ac_frame_area(self, target, option, values):
        """
        frame_area
            : FRAME_AREA frame_area_data TO frame_area_data
        """
        return frame_area_Node(
            target="frame_area",
            option=option,
            values=values)

    def ac_controlled_field(self, target, option, values):
        """
        controlled_field
            : FIELD_CONTROL LPAREN field_ref_list RPAREN control_item_list
            | FIELD_CONTROL field_ref control_item_list
        """
        return controlled_field_Node(
            target="controlled_field",
            option=option,
            values=values)

    def ac_field_ref(self, target, option, values):
        """
        field_ref
            : name
            | name LBRACKET ALL RBRACKET of_op name
            | name of_op name
        """
        return field_ref_Node(
            target="field_ref",
            option=option,
            values=values)

    def ac_control_item(self, target, option, values):
        """
        control_item
            : BLANK
            | BLINK
            | BOLD
            | COLOR integer
            | DIM
            | HELP message
            | INITIAL_TOKEN
            | MINIMUM_LENGTH integer
            | OPAQUE
            | PROTECTED
            | REQUIRED
            | REVERSE
            | TERMINATE_FIELD
            | UNDERLINE
        """
        return control_item_Node(
            target="control_item",
            option=option,
            values=values)

    def ac_message(self, target, option, values):
        """
        message
            : char_literal
            | message COMMA char_literal
        """
        return message_Node(
            target="message",
            option=option,
            values=values)

    def ac_report_decl(self, target, option, values):
        """
        report_decl
            : report_head report_parameters report_cond_def_list
        """
        return report_decl_Node(
            target="report_decl",
            option=option,
            values=values)

    def ac_report_head(self, target, option, values):
        """
        report_head
            : REPORT name_opt append_opt TO char_set_spec report_file
        """
        return report_head_Node(
            target="report_head",
            option=option,
            values=values)

    def ac_file_spec(self, target, option, values):
        """
        file_spec
            : concatenated_string
            | FILE_TOKEN concatenated_string
            | TERMINAL
            | TEXT concatenated_string
        """
        return file_spec_Node(
            target="file_spec",
            option=option,
            values=values)

    def ac_report_param(self, target, option, values):
        """
        report_param
            : report_arith_item decl_arith_exp
            | report_char_item char_literal
        """
        return report_param_Node(
            target="report_param",
            option=option,
            values=values)

    def ac_report_cond_def(self, target, option, values):
        """
        report_cond_def
            : group_cond stmt_in_decl
            | report_cond stmt_in_decl
        """
        return report_cond_def_Node(
            target="report_cond_def",
            option=option,
            values=values)

    def ac_group_cond(self, target, option, values):
        """
        group_cond
            : GROUP_HEADING name_opt ON name
            | GROUP_FOOTING name_opt ON name
        """
        return group_cond_Node(
            target="group_cond",
            option=option,
            values=values)

    def ac_screen_decl(self, target, option, values):
        """
        screen_decl
            : SCREEN for_def screen_def_list
        """
        return screen_decl_Node(
            target="screen_decl",
            option=option,
            values=values)

    def ac_for_def(self, target, option, values):
        """
        for_def
            : 
            | FOR quoted_string
            | ECHO
            | no_echo
        """
        return for_def_Node(
            target="for_def",
            option=option,
            values=values)

    def ac_screen_def(self, target, option, values):
        """
        screen_def
            : char_item char_literal
            | FIELD_FLAGS name_list
            | FUNCTION_LENGTH integer
            | FUNCTION_SEPARATOR char_literal
            | LINE_LENGTH integer
            | MESSAGE_AREA integer TO_integer
            | SCREEN_SIZE integer
        """
        return screen_def_Node(
            target="screen_def",
            option=option,
            values=values)

    def ac_TO_integer(self, target, option, values):
        """
        TO_integer: | TO integer
        """
        return TO_integer_Node(
            target="TO_integer",
            option=option,
            values=values)

    def ac_source_decl(self, target, option, values):
        """
        source_decl: SOURCE name FROM source_file source_attr_list INPUT input_list prompt_opt
        """
        return source_decl_Node(
            target="source_decl",
            option=option,
            values=values)

    def ac_source_attr(self, target, option, values):
        """
        source_attr : no_echo | BINARY FORM | FIXED FORM | FREE FORM | INVALIDS TO file_spec | LINE_LENGTH decl_arith_exp | no_verify | SEPARATOR char_literal
        """
        return source_attr_Node(
            target="source_attr",
            option=option,
            values=values)

    def ac_no_echo(self, target, option, values):
        """
        no_echo: NO ECHO
        """
        return no_echo_Node(
            target="no_echo",
            option=option,
            values=values)

    def ac_no_verify(self, target, option, values):
        """
        no_verify: NO VERIFY
        """
        return no_verify_Node(
            target="no_verify",
            option=option,
            values=values)

    def ac_prompt_opt(self, target, option, values):
        """
        prompt_opt:| WITH prompt_error_edit
        """
        return prompt_opt_Node(
            target="prompt_opt",
            option=option,
            values=values)

    def ac_prompt_error_edit(self, target, option, values):
        """
        prompt_error_edit: prompt_err_edit_fld | prompt_error_edit COMMA prompt_err_edit_fld
        """
        return prompt_error_edit_Node(
            target="prompt_error_edit",
            option=option,
            values=values)

    def ac_prompt_err_edit_fld(self, target, option, values):
        """
        prompt_err_edit_fld: prompt_err_edit_list FOR name
        """
        return prompt_err_edit_fld_Node(
            target="prompt_err_edit_fld",
            option=option,
            values=values)

    def ac_prompt_err_edit_opt(self, target, option, values):
        """
        prompt_err_edit_opt: EDIT arith_exp| PROMPT quoted_string| PROMPT name| ERRORS quoted_string| ERRORS name
        """
        return prompt_err_edit_opt_Node(
            target="prompt_err_edit_opt",
            option=option,
            values=values)

    def ac_output_item(self, target, option, values):
        """
        output_item
            : AT_SKIP arith_exp
            | AT_SKIP TO arith_exp
            | arith_exp
            | tab_info
        """
        return output_item_Node(
            target="output_item",
            option=option,
            values=values)

    def ac_tab_info(self, target, option, values):
        """
        tab_info
            : AT_TAB arith_exp
            | AT_TAB TO arith_exp
        """
        return tab_info_Node(
            target="tab_info",
            option=option,
            values=values)

    def ac_input_item(self, target, option, values):
        """
        input_item: AT_CR| tab_info| CONDITIONAL ON decl_arith_exp BEGIN_TOKEN input_case_list END input_else_opt| name LBRACKET array_index RBRACKET input_of_opt| name format_picture
        """
        return input_item_Node(
            target="input_item",
            option=option,
            values=values)

    def ac_input_case(self, target, option, values):
        """
        input_case: case_labels COLON input_case_exp
        """
        return input_case_Node(
            target="input_case",
            option=option,
            values=values)

    def ac_case_labels(self, target, option, values):
        """
        case_labels: literal | case_labels OR literal
        """
        return case_labels_Node(
            target="case_labels",
            option=option,
            values=values)

    def ac_input_else_opt(self, target, option, values):
        """
        input_else_opt : ELSE BEGIN_TOKEN input_case_exp END | 
        """
        return input_else_opt_Node(
            target="input_else_opt",
            option=option,
            values=values)

    def ac_input_of_opt(self, target, option, values):
        """
        input_of_opt: | of_op name
        """
        return input_of_opt_Node(
            target="input_of_opt",
            option=option,
            values=values)

    def ac_conditional_stmt(self, target, option, values):
        """
        conditional_stmt: CONDITIONAL ON arith_exp BEGIN_TOKEN case_stmt_list END else_clause
        """
        return conditional_stmt_Node(
            target="conditional_stmt",
            option=option,
            values=values)

    def ac_case_stmt(self, target, option, values):
        """
        case_stmt: case_labels COLON stmt
        """
        return case_stmt_Node(
            target="case_stmt",
            option=option,
            values=values)

    def ac_else_clause(self, target, option, values):
        """
        else_clause: ELSE stmt | 
        """
        return else_clause_Node(
            target="else_clause",
            option=option,
            values=values)

    def ac_display_stmt(self, target, option, values):
        """
        display_stmt
            : DISPLAY protected_opt name_list USING name_list stmt
            | DISPLAY protected_opt name_list stmt
        """
        return display_stmt_Node(
            target="display_stmt",
            option=option,
            values=values)

    def ac_do_while_stmt(self, target, option, values):
        """
        do_while_stmt
            : DO stmt WHILE bool_exp
        """
        return do_while_stmt_Node(
            target="do_while_stmt",
            option=option,
            values=values)

    def ac_for_stmt(self, target, option, values):
        """
        for_stmt
            : FOR EACH qualified_rel_alias control_clause DO stmt
            | FOR EACH qualified_rel_alias report_clause control_clause DO stmt
        """
        return for_stmt_Node(
            target="for_stmt",
            option=option,
            values=values)

    def ac_sorted_clause(self, target, option, values):
        """
        sorted_clause
            : SORTED
            | SORTED ASCENDING
            | SORTED DESCENDING
            | SORTED ON sort_list
        """
        return sorted_clause_Node(
            target="sorted_clause",
            option=option,
            values=values)

    def ac_qualified_rel_alias(self, target, option, values):
        """
        qualified_rel_alias
            : name alias_clause where_clause_opt sorted_clause_opt
            | name alias_clause via_clause where_clause_opt sorted_clause_opt
        """
        return qualified_rel_alias_Node(
            target="qualified_rel_alias",
            option=option,
            values=values)

    def ac_alias_clause(self, target, option, values):
        """
        alias_clause
            : ALIAS name
            | 
        """
        return alias_clause_Node(
            target="alias_clause",
            option=option,
            values=values)

    def ac_where_clause(self, target, option, values):
        """
        where_clause
            : WHERE bool_exp
        """
        return where_clause_Node(
            target="where_clause",
            option=option,
            values=values)

    def ac_sort_item(self, target, option, values):
        """
        sort_item
            : order name
        """
        return sort_item_Node(
            target="sort_item",
            option=option,
            values=values)

    def ac_control_clause(self, target, option, values):
        """
        control_clause
            : CONTROLLED BY name_list
            | 
        """
        return control_clause_Node(
            target="control_clause",
            option=option,
            values=values)

    def ac_if_stmt(self, target, option, values):
        """
        if_stmt
            : IF bool_exp then_else_clause
        """
        return if_stmt_Node(
            target="if_stmt",
            option=option,
            values=values)

    def ac_then_else_clause(self, target, option, values):
        """
        then_else_clause
            : THEN stmt
            | THEN stmt ELSE stmt
        """
        return then_else_clause_Node(
            target="then_else_clause",
            option=option,
            values=values)

    def ac_pause_for_stmt(self, target, option, values):
        """
        pause_for_stmt
            : PAUSE_FOR_INPUT arith_exp then_else_clause
        """
        return pause_for_stmt_Node(
            target="pause_for_stmt",
            option=option,
            values=values)

    def ac_protected_stmt(self, target, option, values):
        """
        protected_stmt
            : PROTECTED stmt
        """
        return protected_stmt_Node(
            target="protected_stmt",
            option=option,
            values=values)

    def ac_select_stmt(self, target, option, values):
        """
        select_stmt
            : SELECT qualified_rel_alias then_else_clause
        """
        return select_stmt_Node(
            target="select_stmt",
            option=option,
            values=values)

    def ac_while_do_stmt(self, target, option, values):
        """
        while_do_stmt
            : WHILE bool_exp DO stmt
        """
        return while_do_stmt_Node(
            target="while_do_stmt",
            option=option,
            values=values)

    def ac_write_report_stmt(self, target, option, values):
        """
        write_report_stmt
            : report_clause stmt
        """
        return write_report_stmt_Node(
            target="write_report_stmt",
            option=option,
            values=values)

    def ac_report_clause(self, target, option, values):
        """
        report_clause
            : WRITE REPORT
            | WRITE REPORTS
            | WRITE REPORT name_list
            | WRITE REPORTS name_list
        """
        return report_clause_Node(
            target="report_clause",
            option=option,
            values=values)

    def ac_abort_stmt(self, target, option, values):
        """
        abort_stmt
            : ABORT
            | ABORT output_list
        """
        return abort_stmt_Node(
            target="abort_stmt",
            option=option,
            values=values)

    def ac_accept_stmt(self, target, option, values):
        """
        accept_stmt
            : ACCEPT echo_verify_opt input_fld_name prompt_opt
            | ACCEPT FROM TERMINAL echo_verify_opt input_fld_name prompt_opt
        """
        return accept_stmt_Node(
            target="accept_stmt",
            option=option,
            values=values)

    def ac_input_fld_name(self, target, option, values):
        """
        input_fld_name
            : fld_name
            | input_fld_name COMMA fld_name
        """
        return input_fld_name_Node(
            target="input_fld_name",
            option=option,
            values=values)

    def ac_fld_name(self, target, option, values):
        """
        fld_name
            : AT_CR
            | qualified_name format_picture
        """
        return fld_name_Node(
            target="fld_name",
            option=option,
            values=values)

    def ac_add_stmt(self, target, option, values):
        """
        add_stmt
            : ADD arith_exp TO var_list round_spec
        """
        return add_stmt_Node(
            target="add_stmt",
            option=option,
            values=values)

    def ac_round_spec(self, target, option, values):
        """
        round_spec
            : 
            | round_spec round_spec_elt
        """
        return round_spec_Node(
            target="round_spec",
            option=option,
            values=values)

    def ac_alter_stmt(self, target, option, values):
        """
        alter_stmt
            : ALTER name using_opt
        """
        return alter_stmt_Node(
            target="alter_stmt",
            option=option,
            values=values)

    def ac_using_clause(self, target, option, values):
        """
        using_clause
            : USING LPAREN using_exp_list RPAREN
        """
        return using_clause_Node(
            target="using_clause",
            option=option,
            values=values)

    def ac_using_exp(self, target, option, values):
        """
        using_exp
            : arith_exp FOR name
        """
        return using_exp_Node(
            target="using_exp",
            option=option,
            values=values)

    def ac_checkpoint_stmt(self, target, option, values):
        """
        checkpoint_stmt
            : CHECKPOINT
            | CHECKPOINT name_list
        """
        return checkpoint_stmt_Node(
            target="checkpoint_stmt",
            option=option,
            values=values)

    def ac_clear_stmt(self, target, option, values):
        """
        clear_stmt
            : CLEAR clear_head
        """
        return clear_stmt_Node(
            target="clear_stmt",
            option=option,
            values=values)

    def ac_clear_head(self, target, option, values):
        """
        clear_head
            : frame_list
            | TERMINAL direction
        """
        return clear_head_Node(
            target="clear_head",
            option=option,
            values=values)

    def ac_compile_stmt(self, target, option, values):
        """
        compile_stmt
            : comp_head BEGIN_TOKEN case_stmt_list END else_clause
        """
        return compile_stmt_Node(
            target="compile_stmt",
            option=option,
            values=values)

    def ac_comp_head(self, target, option, values):
        """
        comp_head
            : COMPILE CONDITIONALLY ON literal
            | COMPILE CONDITIONALLY ON concatenated_string
        """
        return comp_head_Node(
            target="comp_head",
            option=option,
            values=values)

    def ac_delete_stmt(self, target, option, values):
        """
        delete_stmt
            : DELETE file_text
            | DELETE FROM qualified_relation ALL
            | DELETE FROM qualified_relation
        """
        return delete_stmt_Node(
            target="delete_stmt",
            option=option,
            values=values)

    def ac_qualified_relation(self, target, option, values):
        """
        qualified_relation
            : name where_clause_opt
            | name via_clause where_clause_opt
        """
        return qualified_relation_Node(
            target="qualified_relation",
            option=option,
            values=values)

    def ac_file_text(self, target, option, values):
        """
        file_text
            : FILE_TOKEN arith_exp
            | TEXT arith_exp
        """
        return file_text_Node(
            target="file_text",
            option=option,
            values=values)

    def ac_function_stmt(self, target, option, values):
        """
        function_stmt
            : name param_opt
        """
        return function_stmt_Node(
            target="function_stmt",
            option=option,
            values=values)

    def ac_finish_stmt(self, target, option, values):
        """
        finish_stmt
            : FINISH name
        """
        return finish_stmt_Node(
            target="finish_stmt",
            option=option,
            values=values)

    def ac_force_stmt(self, target, option, values):
        """
        force_stmt
            : FORCE force_clause
        """
        return force_stmt_Node(
            target="force_stmt",
            option=option,
            values=values)

    def ac_force_clause(self, target, option, values):
        """
        force_clause
            : FOR name force_cond
            | force_cond
            | name
        """
        return force_clause_Node(
            target="force_clause",
            option=option,
            values=values)

    def ac_input_stmt(self, target, option, values):
        """
        input_stmt
            : INPUT echo_verify_opt qualified_parameter_list USING name_list
            | INPUT echo_verify_opt qualified_parameter_list
            | INPUT FUNCTION_KEY USING name_list
            | INPUT FUNCTION_KEY
            | INPUT input_frame_batch error_opt
        """
        return input_stmt_Node(
            target="input_stmt",
            option=option,
            values=values)

    def ac_input_frame_batch(self, target, option, values):
        """
        input_frame_batch
            : BATCH echo_verify_opt input_frame_batch_opt sending_clause
            | FRAME echo_verify_opt name_list sending_opt
        """
        return input_frame_batch_Node(
            target="input_frame_batch",
            option=option,
            values=values)

    def ac_input_frame_batch_opt(self, target, option, values):
        """
        input_frame_batch_opt
            : qualified_name
            | batch_tab
            | input_frame_batch_opt COMMA qualified_name
            | input_frame_batch_opt COMMA batch_tab
        """
        return input_frame_batch_opt_Node(
            target="input_frame_batch_opt",
            option=option,
            values=values)

    def ac_batch_tab(self, target, option, values):
        """
        batch_tab
            : AT_TAB arith_exp
        """
        return batch_tab_Node(
            target="batch_tab",
            option=option,
            values=values)

    def ac_echo_verify_opt(self, target, option, values):
        """
        echo_verify_opt
            : 
            | echo_verify
            | echo_verify echo_verify
        """
        return echo_verify_opt_Node(
            target="echo_verify_opt",
            option=option,
            values=values)

    def ac_sending_clause(self, target, option, values):
        """
        sending_clause
            : SENDING sending_string
        """
        return sending_clause_Node(
            target="sending_clause",
            option=option,
            values=values)

    def ac_error_opt(self, target, option, values):
        """
        error_opt
            : 
            | ON SENDING ERRORS stmt
        """
        return error_opt_Node(
            target="error_opt",
            option=option,
            values=values)

    def ac_insert_stmt(self, target, option, values):
        """
        insert_stmt
            : INSERT INTO name using_opt duplicate_opt
        """
        return insert_stmt_Node(
            target="insert_stmt",
            option=option,
            values=values)

    def ac_duplicate_opt(self, target, option, values):
        """
        duplicate_opt
            : 
            | ON DUPLICATE stmt
        """
        return duplicate_opt_Node(
            target="duplicate_opt",
            option=option,
            values=values)

    def ac_let_stmt(self, target, option, values):
        """
        let_stmt
            : LET var_list round_spec EQ arith_exp
            | LET flag_name_list EQ bool_exp
        """
        return let_stmt_Node(
            target="let_stmt",
            option=option,
            values=values)

    def ac_move_stmt(self, target, option, values):
        """
        move_stmt
            : MOVE bool_exp TO flag_name_list
            | MOVE arith_exp TO var_list round_spec
        """
        return move_stmt_Node(
            target="move_stmt",
            option=option,
            values=values)

    def ac_pause_stmt(self, target, option, values):
        """
        pause_stmt
            : PAUSE arith_exp
        """
        return pause_stmt_Node(
            target="pause_stmt",
            option=option,
            values=values)

    def ac_print_stmt(self, target, option, values):
        """
        print_stmt
            : PRINT TO name output_list
            | PRINT output_list
        """
        return print_stmt_Node(
            target="print_stmt",
            option=option,
            values=values)

    def ac_prompt_stmt(self, target, option, values):
        """
        prompt_stmt
            : PROMPT output_list
        """
        return prompt_stmt_Node(
            target="prompt_stmt",
            option=option,
            values=values)

    def ac_repeat_stmt(self, target, option, values):
        """
        repeat_stmt
            : REPEAT name
        """
        return repeat_stmt_Node(
            target="repeat_stmt",
            option=option,
            values=values)

    def ac_restore_stmt(self, target, option, values):
        """
        restore_stmt
            : RESTORE frame_list
        """
        return restore_stmt_Node(
            target="restore_stmt",
            option=option,
            values=values)

    def ac_frame_list(self, target, option, values):
        """
        frame_list
            : FRAME name_list
        """
        return frame_list_Node(
            target="frame_list",
            option=option,
            values=values)

    def ac_return_stmt(self, target, option, values):
        """
        return_stmt
            : RETURN
            | RETURN using_clause
        """
        return return_stmt_Node(
            target="return_stmt",
            option=option,
            values=values)

    def ac_run_stmt(self, target, option, values):
        """
        run_stmt
            : RUN name param_opt
        """
        return run_stmt_Node(
            target="run_stmt",
            option=option,
            values=values)

    def ac_param_opt(self, target, option, values):
        """
        param_opt
            : LPAREN arith_exp_list_opt RPAREN ACCEPTING LPAREN qualified_parameter_list RPAREN
            | LPAREN arith_exp_list_opt SEMICOLON qualified_parameter_list_opt RPAREN
            | LPAREN arith_exp_list_opt RPAREN
            | ACCEPTING LPAREN qualified_parameter_list RPAREN
            | 
        """
        return param_opt_Node(
            target="param_opt",
            option=option,
            values=values)

    def ac_set_cursor_stmt(self, target, option, values):
        """
        set_cursor_stmt
            : SET_CURSOR qualified_name
            | SET_CURSOR AFTER qualified_name
        """
        return set_cursor_stmt_Node(
            target="set_cursor_stmt",
            option=option,
            values=values)

    def ac_subtract_stmt(self, target, option, values):
        """
        subtract_stmt
            : SUBTRACT arith_exp FROM var_list round_spec
        """
        return subtract_stmt_Node(
            target="subtract_stmt",
            option=option,
            values=values)

    def ac_type_stmt(self, target, option, values):
        """
        type_stmt
            : TYPE type_to_opt output_list
        """
        return type_stmt_Node(
            target="type_stmt",
            option=option,
            values=values)

    def ac_type_to_opt(self, target, option, values):
        """
        type_to_opt
            : 
            | TO MESSAGE_AREA
            | TO TERMINAL
        """
        return type_to_opt_Node(
            target="type_to_opt",
            option=option,
            values=values)

    def ac_wait_stmt(self, target, option, values):
        """
        wait_stmt
            : WAIT output_list
        """
        return wait_stmt_Node(
            target="wait_stmt",
            option=option,
            values=values)

    def ac_write_invalids_stmt(self, target, option, values):
        """
        write_invalids_stmt
            : WRITE_INVALIDS of_op name output_list
        """
        return write_invalids_stmt_Node(
            target="write_invalids_stmt",
            option=option,
            values=values)

    def ac_format_picture(self, target, option, values):
        """
        format_picture
            : AS BYTE LPAREN integer RPAREN
            | AS name
            | as_picture
            | 
        """
        return format_picture_Node(
            target="format_picture",
            option=option,
            values=values)

    def ac_of_name_opt(self, target, option, values):
        """
        of_name_opt
            : 
            | of_op name
        """
        return of_name_opt_Node(
            target="of_name_opt",
            option=option,
            values=values)

    def ac_rplce_function(self, target, option, values):
        """
        rplce_function
            : SUBSTR named_actual_param
        """
        return rplce_function_Node(
            target="rplce_function",
            option=option,
            values=values)

    def ac_named_actual_param(self, target, option, values):
        """
        named_actual_param
            : LPAREN qualified_name COMMA arith_exp_list RPAREN
        """
        return named_actual_param_Node(
            target="named_actual_param",
            option=option,
            values=values)

    def ac_date_function(self, target, option, values):
        """
        date_function
            : DAY date_fld
            | MONTH date_fld
            | YEAR date_fld
        """
        return date_function_Node(
            target="date_function",
            option=option,
            values=values)

    def ac_date_fld(self, target, option, values):
        """
        date_fld
            : LPAREN qualified_name RPAREN
        """
        return date_fld_Node(
            target="date_fld",
            option=option,
            values=values)

    def ac_array_decl(self, target, option, values):
        """
        array_decl
            : ARRAY name array_def
        """
        return array_decl_Node(
            target="array_decl",
            option=option,
            values=values)

    def ac_array_def(self, target, option, values):
        """
        array_def
            : LBRACKET bound TO bound RBRACKET check_subscripts DATA columns_array
            | SAME AS name
        """
        return array_def_Node(
            target="array_def",
            option=option,
            values=values)

    def ac_bound(self, target, option, values):
        """
        bound
            : PLUS integer
            | MINUS integer
            | integer
            | name
        """
        return bound_Node(
            target="bound",
            option=option,
            values=values)

    def ac_check_subscripts(self, target, option, values):
        """
        check_subscripts
            : CHECK SUBSCRIPTS on_off
            | 
        """
        return check_subscripts_Node(
            target="check_subscripts",
            option=option,
            values=values)

    def ac_columns_array(self, target, option, values):
        """
        columns_array
            : name_list
            | SAME AS name
        """
        return columns_array_Node(
            target="columns_array",
            option=option,
            values=values)

    def ac_field_decl(self, target, option, values):
        """
        field_decl
            : field_key field_def_list
        """
        return field_decl_Node(
            target="field_decl",
            option=option,
            values=values)

    def ac_field_def(self, target, option, values):
        """
        field_def
            : name field_attributes
        """
        return field_def_Node(
            target="field_def",
            option=option,
            values=values)

    def ac_field_attributes(self, target, option, values):
        """
        field_attributes
            : as_picture field_clauses
            | SAME AS name field_clauses
        """
        return field_attributes_Node(
            target="field_attributes",
            option=option,
            values=values)

    def ac_as_picture(self, target, option, values):
        """
        as_picture
            : AS picture
        """
        return as_picture_Node(
            target="as_picture",
            option=option,
            values=values)

    def ac_picture(self, target, option, values):
        """
        picture
            : quoted_string
            | DATE
            | DATE quoted_string
            | FLOAT
            | FLOAT quoted_string
            | LONG_FLOAT
            | LONG_FLOAT quoted_string
        """
        return picture_Node(
            target="picture",
            option=option,
            values=values)

    def ac_field_clauses(self, target, option, values):
        """
        field_clauses
            : 
            | field_clauses default_value
            | field_clauses verify_clause
            | field_clauses prompt_error
        """
        return field_clauses_Node(
            target="field_clauses",
            option=option,
            values=values)

    def ac_default_value(self, target, option, values):
        """
        default_value
            : DEFAULT literal
            | DEFAULT concatenated_string
        """
        return default_value_Node(
            target="default_value",
            option=option,
            values=values)

    def ac_verify_clause(self, target, option, values):
        """
        verify_clause
            : VERIFY bool_exp
        """
        return verify_clause_Node(
            target="verify_clause",
            option=option,
            values=values)

    def ac_prompt_error(self, target, option, values):
        """
        prompt_error
            : WITH error_clause
            | WITH prompt_clause
            | WITH error_clause AND prompt_clause
            | WITH prompt_clause AND error_clause
        """
        return prompt_error_Node(
            target="prompt_error",
            option=option,
            values=values)

    def ac_error_clause(self, target, option, values):
        """
        error_clause
            : ERRORS concatenated_string
        """
        return error_clause_Node(
            target="error_clause",
            option=option,
            values=values)

    def ac_prompt_clause(self, target, option, values):
        """
        prompt_clause
            : PROMPT concatenated_string
        """
        return prompt_clause_Node(
            target="prompt_clause",
            option=option,
            values=values)

    def ac_relation_decl(self, target, option, values):
        """
        relation_decl
            : RELATION name stored_in relation_def relation_index
        """
        return relation_decl_Node(
            target="relation_decl",
            option=option,
            values=values)

    def ac_stored_in(self, target, option, values):
        """
        stored_in
            : STORED IN quoted_string
            | 
        """
        return stored_in_Node(
            target="stored_in",
            option=option,
            values=values)

    def ac_relation_def(self, target, option, values):
        """
        relation_def
            : IS KEY name_list DATA name_list
            | IS KEY name_list
            | SAME AS name
        """
        return relation_def_Node(
            target="relation_def",
            option=option,
            values=values)

    def ac_relation_index(self, target, option, values):
        """
        relation_index
            : 
            | INDEX ON ALL
            | INDEX ON name_list
        """
        return relation_index_Node(
            target="relation_index",
            option=option,
            values=values)

    def ac_bool_exp(self, target, option, values):
        """
        bool_exp
            : bool_exp OR bool_exp
            | bool_exp OR rel_op arith_exp
            | bool_exp OR arith_exp
            | bool_exp AND bool_exp
            | bool_exp AND rel_op arith_exp
            | bool_exp AND arith_exp
            | bool_exp EQV bool_exp
            | bool_exp XOR bool_exp
            | arith_exp IS picture_ref
            | arith_exp IS NOT picture_ref
            | qualified_name boolean_word
            | qualified_name NOT boolean_word
            | FILE_TOKEN arith_exp EXISTS
            | TEXT arith_exp EXISTS
            | LPAREN bool_exp RPAREN
            | NOT LPAREN bool_exp RPAREN
            | arith_exp rel_op arith_exp
            | boolean_literal
            | flag_name
        """
        return bool_exp_Node(
            target="bool_exp",
            option=option,
            values=values)

    def ac_flag_name(self, target, option, values):
        """
        flag_name
            : flag_types FLAG_OF qualified_name
        """
        return flag_name_Node(
            target="flag_name",
            option=option,
            values=values)

    def ac_picture_ref(self, target, option, values):
        """
        picture_ref
            : name
            | name LBRACKET array_index RBRACKET
            | name LBRACKET array_index RBRACKET of_op name
            | picture
        """
        return picture_ref_Node(
            target="picture_ref",
            option=option,
            values=values)

    def ac_arith_exp(self, target, option, values):
        """
        arith_exp
            : LPAREN arith_exp RPAREN format_picture
            | data format_picture
            | PLUS arith_exp %prec UNARY
            | MINUS arith_exp %prec UNARY
            | arith_exp POW arith_exp
            | arith_exp STAR arith_exp
            | arith_exp SLASH arith_exp
            | arith_exp MOD arith_exp
            | arith_exp PLUS arith_exp
            | arith_exp MINUS arith_exp
            | DEFAULT
        """
        return arith_exp_Node(
            target="arith_exp",
            option=option,
            values=values)

    def ac_data(self, target, option, values):
        """
        data
            : ident_ref
            | report_arith_item of_name_opt
            | report_char_item of_name_opt
            | mag_function
            | number
            | character_constant
            | qualified_name
            | date_literal
        """
        return data_Node(
            target="data",
            option=option,
            values=values)

    def ac_literal(self, target, option, values):
        """
        literal
            : PLUS number
            | MINUS number
            | number
            | char_literal
            | date_literal
        """
        return literal_Node(
            target="literal",
            option=option,
            values=values)

    def ac_date_literal(self, target, option, values):
        """
        date_literal
            : DATE quoted_string
        """
        return date_literal_Node(
            target="date_literal",
            option=option,
            values=values)

    def ac_concatenated_string(self, target, option, values):
        """
        concatenated_string
            : concatenated_string PLUS char_literal
            | char_literal
        """
        return concatenated_string_Node(
            target="concatenated_string",
            option=option,
            values=values)

    def ac_mag_function(self, target, option, values):
        """
        mag_function
            : name LPAREN arith_exp_list RPAREN
            | SUBSTR actual_param_opt
            | COUNT actual_param_opt
            | YEAR actual_param_opt
            | MONTH actual_param_opt
            | DAY actual_param_opt
            | CKSUM LPAREN checksum_type COMMA arith_exp RPAREN
            | NEXT_DATE LPAREN week_day COMMA arith_exp RPAREN
            | LARGEST LPAREN qualified_name RPAREN
            | SMALLEST LPAREN qualified_name RPAREN
            | lang_func
        """
        return mag_function_Node(
            target="mag_function",
            option=option,
            values=values)

    def ac_actual_param_opt(self, target, option, values):
        """
        actual_param_opt
            : LPAREN arith_exp_list RPAREN
            | 
        """
        return actual_param_opt_Node(
            target="actual_param_opt",
            option=option,
            values=values)

    def ac_lang_func(self, target, option, values):
        """
        lang_func
            : DATE LANGUAGE
            | DIGIT SEPARATOR
            | USERS LANGUAGE
        """
        return lang_func_Node(
            target="lang_func",
            option=option,
            values=values)

    def ac_implicit_select(self, target, option, values):
        """
        implicit_select
            : name LPAREN name via_clause RPAREN
        """
        return implicit_select_Node(
            target="implicit_select",
            option=option,
            values=values)

    def ac_ident_ref(self, target, option, values):
        """
        ident_ref
            : name LPAREN arith_exp_list_opt RPAREN
            | implicit_select
        """
        return ident_ref_Node(
            target="ident_ref",
            option=option,
            values=values)

    def ac_qualified_name(self, target, option, values):
        """
        qualified_name
            : name
            | name LBRACKET array_index RBRACKET of_op name
            | name LBRACKET array_index RBRACKET
            | name of_op name
            | name of_op PROCEDURE
        """
        return qualified_name_Node(
            target="qualified_name",
            option=option,
            values=values)

    def ac_array_index(self, target, option, values):
        """
        array_index
            : ALL
            | arith_exp
            | arith_exp TO arith_exp
        """
        return array_index_Node(
            target="array_index",
            option=option,
            values=values)

    def ac_via_clause(self, target, option, values):
        """
        via_clause
            : VIA KEY
            | VIA LPAREN key_value_list RPAREN
            | VIA key_value
        """
        return via_clause_Node(
            target="via_clause",
            option=option,
            values=values)

    def ac_key_value(self, target, option, values):
        """
        key_value
            : ident_ref
            | name rel_op arith_exp
            | qualified_name
        """
        return key_value_Node(
            target="key_value",
            option=option,
            values=values)
