# -*- coding: utf-8 -*-

from .events import TOKEN
from delia_preprocessor.events import M_SUB_IN, M_SUB_OUT
from delia_tokenizer.token import MACRO_SUB_IN, MACRO_SUB_OUT


class Iterator:

    '''Iterator for path'''

    def __init__(self, iterator):
        '''Initialize the iterator'''
        # Check if this is a list
        if isinstance(iterator, list):
            # Store the iterator on the list
            self.iterator = iter(iterator)
        # Else store the iterator
        else:
            self.iterator = iterator

    def __iter__(self):
        '''Get the iterator'''
        return self

    def __next__(self):
        '''Get the next value'''
        # Get the token
        token = next(self.iterator)
        # Add index if specified
        if len(token) != 6:
            # Add it
            token += (0, )
            # Check length
            assert len(token) == 6
        # Trigger event
        return TOKEN, token

    def __getattr__(self, desc):
        '''Get the attribute of the scanner'''
        return getattr(self.iterator, desc)


def fill(iterator):
    '''Add TOKEN event before token'''
    return Iterator(iterator)


def filter(iterator):
    '''Keep only TOKEN events'''
    # Go threw the token
    for event in iterator:
        # Check if this is a token event
        if event[0] == TOKEN:
            # Return the token
            yield event[1]
        elif event[0] == M_SUB_IN:
            yield (MACRO_SUB_IN, *event[2][1:])
        elif event[0] == M_SUB_OUT:
            yield (MACRO_SUB_OUT, *event[2][1:])
