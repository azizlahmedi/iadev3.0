#-*- coding: utf-8 -*-
from .data import Data
from .proxy import Proxy
from .tools import resolve
from .events import update
from .excepts import ParserError

def load(parser):
    '''Load the plug in descriptors given a configuration parser'''
    # Check that section exists
    if not parser.has_section('plugins'):
        # No section
        raise ParserError(_('section [plugins] not defined'))    # pylint: disable-msg=E0602
    # Check if root plug in is in configuration
    if not parser.has_option('plugins', 'root'):
        # Failed to get it
        raise ParserError(_('no root option in [plugins] section'))    # pylint: disable-msg=E0602
    # Get the root plug in
    root = parser.get('plugins', 'root').strip()
    # Check the extra events
    if parser.has_option('plugins', 'event'):
        # Get the options
        packages = [ package.strip() for package in parser.get('plugins', 'event').split(',') ]
        # Update the events
        for package in packages: update(resolve(package))
    # Store the plug in list
    proxies = {}
    # Go threw the sections to find
    for section in parser.sections():
        # Check that starts with 'plugin_'
        if section.startswith('plugin_'):
            # Get the entry
            entry = section[7:]
            # Get the class
            cls = resolve(parser.get(section, 'class'))()
            # Store the father
            father = None
            # Check if father defined in configuration
            if parser.has_option(section, 'father'): father = parser.get(section, 'father')
            # Store data
            data = Data()
            # Get the data
            for option in parser.options(section):
                # Check if it's a valid option
                if option not in ['class', 'father', ]:
                    # Store data
                    data[option] = parser.get(section, option)
            # Create the plug in driver
            proxy = Proxy(entry, cls, data=data)
            # Store driver
            proxies[entry] = (proxy, father)
    # Check that at least the root one exists
    if root not in proxies:
        # No root section
        raise ParserError(_('section [plugin_%s] not defined') % root)    # pylint: disable-msg=E0602
    # Go threw the plug ins to set fathers
    for entry in proxies.keys():
        # Get the plug in and the father
        proxy, father = proxies[entry]
        # Check if has a father
        if father is not None:
            # Check if father exists
            if father not in proxies:
                # Father not defined
                raise ParserError(_("father doesn't exist in configuration: %s" % father))    # pylint: disable-msg=E0602
            # Add father
            proxy.set(proxies[father][0])
    # Return root plug in  
    return proxies[root][0]




    
    
