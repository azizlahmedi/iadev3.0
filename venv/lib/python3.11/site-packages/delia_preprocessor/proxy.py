#-*- coding: utf-8 -*-
from .data import Data
from .tools import isiterable
from .excepts import ProxyError

class Eureka(Exception):
    '''Exception raised to find results in plug in tree'''
    
    def __init__(self, found):
        '''Initialize the exception'''
        # Call super
        Exception.__init__(self)
        # Store the result
        self.found = found

class Proxy(object):
    '''Drive a plug in'''
    
    def __init__(self, desc, plugin, father=None, data=Data()):
        '''Initialize the driver'''
        # Store the plug in description
        self.desc = desc
        # Store the father plug in
        self.father = father
        # Add to father's children
        if self.father is not None: self.set(father)
        # Store the data provided to the plug in
        self.data = data
        # Store the plug in itself
        self.plugin = plugin
        # Store the children of the plug in
        self.children = []
        
    def check(self):
        '''Check that plug in provided expected functions'''
        # If root one, check that there is a start function
        if self.father is None and not hasattr(self.plugin, 'start'):
            # No start function, can't start
            raise ProxyError(_('first one expected to be a starter: no start function'))    # pylint: disable-msg=E0602
        # Check that there are all following functions
        for exp in ['configure', 'notify', 'finalize', 'get', 'close', ]:
            # Check if plug in has the attribute
            if not hasattr(self.plugin, exp):
                # Attribute not available
                raise ProxyError(_('function not defined in %s: %s') % (self.desc, exp))    # pylint: disable-msg=E0602
        # Check all children
        for child in self.children: child.check()

    def set(self, father):
        '''Set father'''
        # Store the father
        self.father = father
        # Set self in father's children
        self.father.children.append(self)
    
    def append(self, proxy):
        '''Add a child'''
        # Add child
        self.children.append(proxy)
        # Set father
        proxy.father = self
    
    def run(self):
        '''Process'''
        # Check plug ins
        self.check()
        # Configure plug ins
        self.configure()
        # Start propagation
        self.start()
        # Finalize the process
        self.finalize()
        
    def configure(self):
        '''Configure'''
        # Configure the plug in with provided data
        self.plugin.configure(self.desc, self.data)
        # Go threw the children to configure
        for child in self.children: child.configure()

    def start(self):
        '''Start propagation'''
        # Check that this is the root plug in
        if self.father is not None:
            # This is not the root plug in
            raise Exception('can only be called on root')
        # Start and notify
        for args in self.plugin.start(): self.notify(*args)

    def notify(self, *args):
        '''Notify plug ins with events'''
        # Notify its plug in
        generator = self.plugin.notify(*args)
        # Check if data are returned
        if generator is None:
            # Nothing provided, propagate with previous data
            for child in self.children: child.notify(*args)
        # Check if a generator is provided
        elif isiterable(generator):
            # Go threw the generator
            for data in generator:
                # Notify children with events provided by generator
                for child in self.children: child.notify(*data)
        # Got data, not expected
        else: raise

    def finalize(self):
        '''Finalize process'''
        # Finalize on its plug in
        self.plugin.finalize()
        # Propagate to children
        for child in self.children: child.finalize()

    def get(self, entry):
        '''Get the result of the plug in corresponding to the provided description'''
        # Recursively check plug in
        try: self._get(entry)
        # Get the result
        except Eureka as e: return e.found
        # Nothing found
        else: return None

    def _get(self, entry):
        '''Internal: recursive function to find results'''
        # Check if we found it
        if self.desc == entry: raise Eureka(self.plugin.get())
        # Else propagate
        for child in self.children: child._get(entry)

    def getall(self):
        '''Get the results of all plug ins'''
        # Create a dictionary to store result with plug in description as key
        all = {}
        # Recursively get results
        self._getall(all)
        # Return the results
        return all
    
    def _getall(self, all):
        '''Internal: recursive function to get all results'''
        # Get the current result
        all[self.desc] = self.plugin.get()
        # Get the results of the children
        for child in self.children: child._getall(all)

    def close(self):
        '''Clean up'''
        # Clean up its plug in
        self.plugin.close()
        # Clean up children
        for child in self.children: child.close()
        
    def __str__(self):
        '''Get a string representation'''
        return '<proxy for %s>' % self.desc

    def __repr__(self):
        '''Get string representation of a plug in tree'''
        return self._repr(0)
    
    def _repr(self, pos):
        '''Internal: recursive function to get string representation'''
        return '%s<proxy for %s>\n%s' % (pos*'    ', self.desc, ''.join([ child._repr(pos+1) for child in self.children ]))
