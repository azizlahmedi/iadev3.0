#-*- coding: utf-8 -*-
import os
from .excepts import EventError

# ITERATOR
# -----------------------------------------------------------------------------
# Event send for an iterator
ITERATOR = 0

# TOKEN
# -----------------------------------------------------------------------------
# Event related to tokens
TOKEN = ITERATOR + 1
# Event related to parsed files
FILES = TOKEN + 1

# INCLUDE
# -----------------------------------------------------------------------------
# Event for include step in
I_STEP_IN = FILES + 1
# Event for include step out
I_STEP_OUT = I_STEP_IN + 1

# MACRO DEFINITION
# -----------------------------------------------------------------------------
# Event for macro dictionary
MACROS = I_STEP_OUT + 1
# Event for macro definition
M_DEFINE = MACROS + 1

# MACRO SUBSTITUTION
# -----------------------------------------------------------------------------
# Event for step in macro substitution
M_SUB_IN = M_DEFINE + 1
# Event for step out macro substitution
M_SUB_OUT = M_SUB_IN + 1

# BLACK SECTIONS
# -----------------------------------------------------------------------------
# Event for step in black out section
S_BLACK_IN = M_SUB_OUT + 1
# Event for step out black out section
S_BLACK_OUT = S_BLACK_IN + 1

# Event for macro substitution args
M_SUB_ARGS = S_BLACK_OUT + 1

# Get the events
listing = {}
# Go threw the entries of this module
for entry, event in list(globals().items()):
    # Check if this is an integer
    if type(event) is int:
        # Add to event list
        listing[entry] = event

# Update event dictionary
def update(data):
    """
    Update the event list with:
    - packages,
    - dictionary as {'EVENT': <int value>', }
    """
    # Store the dictionary of events
    events = {}
    # Check if this is a module
    if type(data) == type(os):
        # Go threw the entries of this module
        for entry in dir(data):
            # Get the attribute
            events[entry] = getattr(data, entry)
    # Check if this is a dictionary
    elif type(data) == dict: events = data
    # Failed to process this type
    else: raise EventError(_('failed to get events with %s') % str(type(data)))    # pylint: disable-msg=E0602
    # Go threw the events
    for entry in events.keys():
        # Get the event
        event = events[entry]
        # Check if event is an integer
        if type(event) is int:
            # Check if key is a string
            if type(entry) is not str:
                # Invalid entry
                raise EventError(_('invalid event description: %s, <str> expected') % str(type(entry)))    # pylint: disable-msg=E0602
            # Check if already known in keys
            if entry in listing.keys():
                # Already defined, raise
                raise EventError(_('event %s already defined') % entry)    # pylint: disable-msg=E0602
            # Check if already known in values
            if event in listing.values():
                # Already defined, raise
                raise EventError(_('event %d already defined') % event)    # pylint: disable-msg=E0602
            # Add to listing
            listing[entry] = event

