#-*- coding: utf-8 -*-
from .base import EventPlugin
from delia_tokenizer.tokenize import *

class AuditPlugin(EventPlugin):
    '''Audit the code'''
    
    def configure(self, desc, data):
        '''Configure the plug in'''
        # Store lines
        self.lines = 0
        # Store tokens
        self.tokens = 0
        # Store macros
        self.acros = {}
        # Store the stack
        self.stack = []
        # Store the previous line number
        self.previous = -1

    def on_I_STEP_IN(self, event, kind, text, index):
        '''Step in an include'''
        # Go to next line
        self.previous = -1

    def on_I_STEP_OUT(self, *args):
        '''Step out an include'''
        # Go to next line
        self.previous = -1

    def on_M_DEFINE(self, event, acro):
        '''Get macro'''
        # Store line
        m_lines = 0 
        # Store previous
        m_previous = -1
        # Store tokens
        m_tokens = 0
        # Go threw the body
        for token in acro.body:
            # Get kind of token
            kind = get_type(*token)
            # Do not process comments
            if kind not in [comment, WS, ]:
                # Add to total tokens
                m_tokens += 1
                # Get the line
                line = get_lineno(*token)
                # Check if 
                if line != m_previous:
                    # Add a line
                    m_lines += 1
                    # Set previous line
                    m_previous = line
        # Store data
        self.acros[acro.name] = [ m_lines, m_tokens, 0, 0, 0, ]
    
    def on_M_SUB_IN(self, event, acro, *args):
        '''Step in a macro'''
        # Go to next line
        self.previous = -1
        # Add to the stack
        self.stack.append(acro.name)
        # Add data
        self.acros[acro.name][2] += 1
    
    def on_M_SUB_OUT(self, event, acro, *args):
        '''Step out a macro'''
        # Go to next line
        self.previous = -1
        # Pop the stack
        self.stack.pop()

    def on_TOKEN(self, event, token):
        '''Get the tokens'''
        # Get kind of token
        kind = get_type(*token)
        # Do not process comments
        if kind not in [comment, WS, ]:
            # Add to total tokens
            self.tokens += 1
            # Get the line
            line = get_lineno(*token)
            # Check if 
            if line != self.previous:
                # Add a line
                self.lines += 1
                # Set previous line
                self.previous = line
                # Go threw the stack of macros to add tokens
                for acro in self.stack: self.acros[acro][3] += 1
            # Go threw the stack of macros to add tokens
            for acro in self.stack: self.acros[acro][4] += 1

    def get(self):
        '''Get the data'''
        # Return lines, token and macro
        return self.lines, self.tokens, self.acros



        