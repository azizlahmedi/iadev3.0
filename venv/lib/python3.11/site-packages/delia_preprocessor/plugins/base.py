#-*- coding: utf-8 -*-
from . import IPlugin
import delia_preprocessor.events as events
from delia_preprocessor.excepts import EventError

class EventPlugin(IPlugin):
    '''
    Dispatch event on on_EVENT functions
    If on_EVENT not exists, use default
    '''
    
    def __init__(self):
        '''Initialize cache'''
        # Cache for on_EVENT functions
        self.cache = {}
        # Go threw the class
        for entry in dir(self):
            # Get the event
            event = entry[3:]
            # Check for on_EVENT functions
            if entry[:3] == 'on_' and event != '':
                # Check if defined
                if event not in events.listing.keys():
                    # Event error
                    raise EventError(_('event %s not defined') % event)    # pylint: disable-msg=E0602
                # Else, set the cache                  
                self.cache[events.listing[event]] = getattr(self, entry)
    
    def default(self, event, *args):
        '''Default function: do nothing'''
        pass
    
    def notify(self, event, *args):
        '''Dispatch'''
        return self.cache.get(event, self.default)(event, *args)

class IteratorPlugin(EventPlugin):
    '''Expand iterator to create events'''
    
    def on_ITERATOR(self, event, iterator, *args):
        '''Go threw the iterator to produce events'''
        for data in iterator: yield data
