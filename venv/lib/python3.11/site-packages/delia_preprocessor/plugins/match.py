#-*- coding: utf-8 -*-
from .base import EventPlugin
from delia_tokenizer.token import comment, WS, COLON
from delia_tokenizer.tokenize import get_type, get_lineno, get_token

class MatchPlugin(EventPlugin):
    '''Create an expansed file and keep the link with original ones'''
    
    def configure(self, desc, data):
        '''Configure the plug in'''
        # Get the path
        self.path = data.get('path')
        # Get the file descriptor
        self.fd = open(self.path, 'w')
        # Store the previous line number
        self.previous = None
        # Check if first
        self.first = True
    
    def on_I_STEP_IN(self, *args):
        '''Step in an include'''
        # Force the next line return
        self.previous = -1
    
    def on_I_STEP_OUT(self, *args):
        '''Step out an include'''
        # Force the next line return
        self.previous = -1
    
    def on_M_SUB_IN(self, *args):
        '''Step in a macro'''
        # Force the next line return
        self.previous = -1
    
    def on_M_SUB_OUT(self, *args):
        '''Step out a macro'''
        # Force the next line return
        self.previous = -1

    def on_TOKEN(self, event, token):
        '''Get the tokens'''
        # Get kind of token
        kind = get_type(*token)
        # Do not process comments
        if kind not in [comment, WS, ]:
            # Get the line
            line = get_lineno(*token)
            # Set first flag
            cr = False
            # Check if 
            if line != self.previous:
                # Go to the line if this is not the first
                if not self.first: self.fd.write('\n')
                # Set previous line
                self.previous = line
                # This is the first
                cr = True
            # Add the token without space if this is a colon
            if kind == COLON or cr: self.fd.write(get_token(*token))
            # This is not a colon
            else: self.fd.write(' %s' % get_token(*token))
            # Check if first
            if self.first: self.first = False
    
    def finalize(self):
        '''Finalize the process'''
        # Set last return
        self.fd.write('\n')
        # Close the file descriptor
        self.fd.close()
    
    def get(self):
        '''Get the data'''
        # Return the data
        return None

