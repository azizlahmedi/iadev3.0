#-*- coding: utf-8 -*-
from delia_preprocessor import scan
import delia_tokenizer.deprecated.deliaobject
from delia_preprocessor.macro import scan_macro
from delia_preprocessor.include import scan_include
from delia_preprocessor.iterator import filter, fill

from delia_preprocessor.deprecated.cmacro import scanne_macro
from delia_preprocessor.deprecated.cinclude import scanne_include


class DeliaObject(delia_tokenizer.deprecated.deliaobject.DeliaObject):

    def get_scanner_include(self):
        '''Scan includes'''
        # Store the list of files
        self.include_dic = []
        # Get the scanner
        scanner = self.get_scanner()
        # Return the generator that scans includes
        return filter(
            scan_include(
                scanner=fill(scanner),
                path=scanner.path,
                files=self.include_dic,
                stack=[]))

    def scanne_all(self):
        # Store the list of files
        self.include_dic = []
        # Store the dictionary of macro
        self.macro_dic = {}
        # Get the scanner
        scanner = self.get_scanner()
        # Return the generator that scans includes and macro
        return scan(
            scanner,
            scanner.path,
            files=self.include_dic,
            acros=self.macro_dic)

    def get_scanner_include_deprecated(self):
        '''TODO: do not use'''
        self.include_dic = []
        return scanne_include(
            scanner=self.get_scanner(),
            include_dic=self.include_dic,
            include_stack=[])

    def scanne_all_deprecated(self):
        '''TODO: do not use'''
        self.include_dic = []
        self.macro_dic = {}
        return scanne_macro(
            tokens_gen=scanne_include(
                scanner=self.get_scanner(),
                include_dic=self.include_dic,
                include_stack=[]),
            macro_dic=self.macro_dic,
            stack_macro=[])
