import delia_tokenizer.ctokenize  # pylint: disable-msg=E0611
from delia_tokenizer.token import INCLUDE_TOKEN, comment
from delia_commons.exceptions import IncludeException
from  delia_commons.exceptions import TokenizerException
from  delia_commons import deliafile
from  delia_commons import Context
import logging
import warnings
logger=logging.getLogger('delia.preprocessor.include')


def scanne_include( scanner, include_dic=[], include_stack=[]):
    warnings.warn('scanne_include deprecated')
    if scanner.path not in include_dic:
        include_dic.append(scanner.path)
    path_idx = include_dic.index(scanner.path)
    
    if path_idx in include_stack:
        scanner.destroy()
        raise IncludeException(261, _('INCLUDE statement nesting is too deep')) # pylint: disable-msg=E0602
    else:
        include_stack.append(path_idx)
        
    seq = iter(scanner)
    for (tok, val, offset, lineno, col) in seq:
        if tok == INCLUDE_TOKEN:
            #skip comment between keyword INCLUDE and keyword TEXT/FILE 
            for (tok1, val1, offset1, lineno1, col1)  in seq:
                if tok1 != comment:
                    break
            #skip comment between keyword TEXT/FILE and filename
            for (tok2, val2, offset2, lineno2, col2)  in seq:
                if tok2 != comment:
                    break
            include_name=val2[1:-1].lower()
            delia_file = deliafile.DeliaFile( Context(), tok1 == delia_tokenizer.token.TEXT, include_name )
            try:
                include_scanner = delia_tokenizer.ctokenize.ScannerFromFile(delia_file.path)
                for ret in scanne_include(include_scanner, include_dic, include_stack):
                    yield ret
                include_scanner.destroy()
            except TokenizerException as e:
                include_exception = IncludeException(e.code, e.message, scanner.path, lineno, col)
                raise include_exception
        else:
            yield (tok, val, offset, lineno, col, path_idx)

    include_stack.pop()
