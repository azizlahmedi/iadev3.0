# -*- coding: utf-8 -*-

"""Symbol constants (from "bison_parser.y")."""

#  This file is automatically generated; please don't muck it up!
#
#  To update the symbols in this file, 'cd' to the top directory of
#  the python source tree after building the interpreter and run:
#
#    python delia/tools/symbol.py

# --start constants--
goal = 0
schema = 1
schema_decl_list = 2
schema_decl = 3
constant_decl = 4
constant_def_list = 5
constant_def = 6
controls_decl_schema = 7
con_opt = 8
con_alt = 9
lang_alt = 10
rel_key = 11
retry_info = 12
canonical_info = 13
is_opt = 14
canon_order_list = 15
language_specs = 16
date_digit_opt = 17
interval_clause = 18
maximum_clause = 19
max_opt = 20
procedure = 21
procedure_signature = 22
procedure_receiving_parameter_list = 23
procedure_returning_parameter_list = 24
formal_parameter_list = 25
formal_parameter = 26
procedure_body = 27
decl_list = 28
label = 29
no_b_stmt = 30
stmt_list = 31
stmt = 32
decl = 33
struct_stmt = 34
simple_stmt = 35
stmt_in_decl = 36
controls_decl = 37
all_info = 38
proc_con_info_list = 39
rel_alt = 40
proc_alt = 41
rel_con_info = 42
proc_con_info = 43
update_info = 44
function_decl = 45
function_signature = 46
name_list_opt = 47
field_attributes_opt = 48
qualified_parameter_list_opt = 49
qualified_parameter_list = 50
function_key_decl = 51
function_key_signature = 52
frm_frmt_decl = 53
frame_format_def = 54
frame_decl = 55
frame_format_location = 56
border = 57
frame_area_opt = 58
frame_data_info = 59
frame_data_names = 60
frame_area = 61
frame_area_data = 62
frame_data_list = 63
controlled_field_list = 64
controlled_field = 65
control_item_list = 66
field_ref_list = 67
field_ref = 68
control_item = 69
message = 70
report_decl = 71
report_head = 72
name_opt = 73
append_opt = 74
char_set_spec = 75
report_file = 76
file_spec = 77
report_parameters = 78
report_param_list = 79
report_param = 80
report_arith_item = 81
report_char_item = 82
report_cond_def_list = 83
report_cond_def = 84
report_cond = 85
group_cond = 86
screen_decl = 87
screen_def_list = 88
for_def = 89
screen_def = 90
char_item = 91
source_decl = 92
source_file = 93
source_attr_list = 94
source_attr = 95
no_echo = 96
no_verify = 97
prompt_opt = 98
prompt_error_edit = 99
prompt_err_edit_fld = 100
prompt_err_edit_list = 101
prompt_err_edit_opt = 102
output_list = 103
output_item = 104
tab_info = 105
input_list = 106
input_item = 107
input_case_list = 108
input_case = 109
input_case_exp = 110
case_labels = 111
input_else_opt = 112
decl_arith_exp = 113
input_of_opt = 114
conditional_stmt = 115
case_stmt_list = 116
case_stmt = 117
else_clause = 118
display_stmt = 119
protected_opt = 120
do_while_stmt = 121
for_stmt = 122
grouped_clause_opt = 123
grouped_clause = 124
group_list = 125
sorted_clause_opt = 126
sorted_clause = 127
qualified_rel_alias = 128
qualified_rel_alias_ext = 129
alias_clause = 130
via_clause_opt = 131
join_clause_list_opt = 132
join_clause_list = 133
join_clause = 134
where_clause_opt = 135
where_clause = 136
sort_list = 137
col_name_ref = 138
sort_item = 139
order = 140
control_clause = 141
if_stmt = 142
then_else_clause = 143
pause_for_stmt = 144
protected_stmt = 145
select_stmt = 146
while_do_stmt = 147
write_report_stmt = 148
report_clause = 149
abort_stmt = 150
accept_stmt = 151
input_fld_name = 152
fld_name = 153
add_stmt = 154
round_spec = 155
round_spec_elt = 156
alter_stmt = 157
using_opt = 158
using_clause = 159
using_exp_list = 160
using_exp = 161
checkpoint_stmt = 162
clear_stmt = 163
clear_head = 164
direction = 165
compile_stmt = 166
comp_head = 167
delete_stmt = 168
qualified_relation = 169
file_text = 170
function_stmt = 171
finish_stmt = 172
force_stmt = 173
force_clause = 174
force_cond = 175
input_stmt = 176
input_frame_batch = 177
input_frame_batch_opt = 178
batch_tab = 179
echo_verify_opt = 180
echo_verify = 181
sending_opt = 182
sending_clause = 183
sending_string = 184
error_opt = 185
insert_stmt = 186
duplicate_opt = 187
let_stmt = 188
var_list = 189
variable = 190
flag_name_list = 191
move_stmt = 192
pause_stmt = 193
print_stmt = 194
prompt_stmt = 195
repeat_stmt = 196
restore_stmt = 197
frame_list = 198
return_stmt = 199
run_stmt = 200
param_opt = 201
set_cursor_stmt = 202
subtract_stmt = 203
type_stmt = 204
type_to_opt = 205
wait_stmt = 206
write_invalids_stmt = 207
format_picture = 208
of_name_opt = 209
rplce_function = 210
named_actual_param = 211
date_function = 212
date_fld = 213
array_decl = 214
array_def = 215
bound = 216
check_subscripts = 217
columns_array = 218
field_decl = 219
field_key = 220
field_def_list = 221
field_def = 222
field_attributes = 223
as_picture = 224
picture = 225
field_clauses = 226
default_value = 227
verify_clause = 228
prompt_error = 229
error_clause = 230
prompt_clause = 231
relation_decl = 232
stored_in = 233
relation_def = 234
name_list = 235
relation_index = 236
bool_exp = 237
flag_name = 238
flag_types = 239
boolean_word = 240
picture_ref = 241
rel_op = 242
arith_exp = 243
data = 244
literal = 245
boolean_literal = 246
char_literal = 247
character_constant = 248
date_literal = 249
number = 250
concatenated_string = 251
arith_exp_list = 252
mag_function = 253
week_day = 254
checksum_type = 255
actual_param_opt = 256
lang_func = 257
arith_exp_list_opt = 258
implicit_select = 259
ident_ref = 260
qualified_name = 261
array_index = 262
via_clause = 263
key_value_list = 264
key_value = 265
name = 266
of_op = 267
on_off = 268
# --end constants--

# sym_name = {}
# for _name, _value in globals().items():
#     if type(_value) is type(0):
#         sym_name[_value] = _name


def main():
    import re
    import sys

    args = sys.argv[1:]
    outFileName = sys.argv[0]
    inFileName = args and args[0] or "bison_parser.y"

    if len(args) > 1:
        outFileName = args[1]
    try:
        fp = open(inFileName)
        lines = fp.read().split("\n")
        fp.close()
    except IOError as err:
        sys.stdout.write("I/O error: %s\n" % str(err))
        sys.exit(1)
    prog = re.compile("^([a-z_]*):")
    tokens = {}
    i = 0
    for line in lines:
        match = prog.match(line)
        if match:
            name = match.group(1)
            tokens[i] = name  # reverse so we can sort them...
            i = i + 1
    keys = sorted(tokens.keys())
    # load the output skeleton from the target:
    try:
        fp = open(outFileName)
        format = fp.read().split("\n")
        fp.close()
    except IOError as err:
        sys.stderr.write("I/O error: %s\n" % str(err))
        sys.exit(2)
    try:
        start = format.index("#--start constants--") + 1
        end = format.index("#--end constants--")
    except ValueError:
        sys.stderr.write("target does not contain format markers")
        sys.exit(3)
    lines = []
    for val in keys:
        lines.append("%s = %d" % (tokens[val], val))
    format[start:end] = lines
    try:
        fp = open(outFileName, 'w')
    except IOError as err:
        sys.stderr.write("I/O error: %s\n" % str(err))
        sys.exit(4)
    fp.write("\n".join(format))
    fp.close()


if __name__ == "__main__":
    main()
