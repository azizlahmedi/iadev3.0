# -*- coding: utf-8 -*-

from delia_tokenizer.tokenize import *


def node_wrap(obj):
    # TODO try to cast to the most appropriate node class
    if obj is None:
        return None
    elif isinstance(obj, tuple):
        return TokenNode(obj)
    else:
        raise


class TokenNode():
    def __init__(self, token_infos):
        self._token_infos = token_infos

    def __get_type(self):
        return get_type(*self._token_infos)
    type = property(__get_type)

    def __get_value(self):
        return get_token(*self._token_infos)
    value = property(__get_value)

    def __get_path(self):
        return get_path(*self._token_infos)
    path = property(__get_path)

    def __get_lineno(self):
        return get_lineno(*self._token_infos)
    lineno = property(__get_lineno)

    def __get_column(self):
        return get_column(*self._token_infos)
    column = property(__get_lineno)

    def __get_offset(self):
        return get_offset(*self._token_infos)
    offset = property(__get_offset)

    def __get_name(self):
        return get_tok_name(*self._token_infos)
    name = property(__get_name)


class TokenVisitor:

    VERBOSE = 0

    def __init__(self, prefix):
        self.node = None
        self._cache = {}
        self.prefix = prefix

    def default(self, scanner, *args):
        for token_infos in scanner:
            self.dispatch(node_wrap(token_infos), *args)

    def dispatch(self, node, *args):
        self.node = node
        if self.node is None:
            name = "None"
        else:
            name = self.node.name
        meth = self._cache.get(name, None)
        if meth is None:
            meth = getattr(self.visitor, self.prefix + name, None)
            self._cache[name] = meth
        if self.VERBOSE > 0:
            print("dispatch", name, (meth and meth.__name__ or ''))
        if meth is not None:
            return meth(node, *args)

    def preorder(self, scanner, visitor, *args):
        """Do preorder walk of tree using visitor"""
        self.visitor = visitor
        visitor.visit = self.dispatch
        self.default(scanner, *args)


_token_walker = TokenVisitor
def token_walk(scanner, visitor, prefix='visit_', walker=None, verbose=None):
    if walker is None:
        walker = _token_walker(prefix)
    if verbose is not None:
        walker.VERBOSE = verbose
    walker.preorder(scanner, visitor)
    return walker.visitor
