# -*- coding: utf-8 -*-
import os
import shutil
import subprocess

SUBVERSION_USER = 'cis'
SUBVERSION_PASSWD = 'Ntic2007'
SUBVERSION_URL = 'http://avalon.bams.corp:3180/svn/repos/gp/trunk'

ARTIFACTORY_USER = 'cis'
ARTIFACTORY_PASSWD = 'zE0mk2A4crGS9MrTIR00'
ARTIFACTORY_SRC_URL = 'http://nx-artifacts:8085/artifactory/gp3-adl-sources-test'
ARTIFACTORY_BIN_URL = 'http://nx-artifacts:8085/artifactory/gp3-adl-binaries-test'
ARTIFACTORY_COMPILER_URL = 'http://nx-artifacts:8085/artifactory/gp3-binaries'

LEGACY_MO_URL = 'http://chardon:16180/gp3/mlg'

REPO_HOST = 'neptune'
REPO_USER = 'gp2006pi'
REPO_PASSWD = 'ntic2004'
REPO_CWD = '/home/gp2006pi/delia_test_repo'

COMPILER_TIMEOUT = 60

JAVA_HOME = os.getenv('JAVA_HOME', '/workspace/bin/java/current')
M2_HOME = os.getenv('M2_HOME', '/workspace/bin/maven/current')

LEGACY_VMS_HOST = 'venus2'
LEGACY_VMS_USER = 'gp2009d'
LEGACY_VMS_PASSWD = 'Vertigo7'
LEGACY_UNIX_HOST = REPO_HOST
LEGACY_UNIX_USER = REPO_USER
LEGACY_UNIX_PASSWD = REPO_PASSWD

AUTOMATION_DELIVER_URL = 'http://foo'


class MockSubversionBackend(object):
    def __init__(self):
        self.urls = {}
        self.revisions = {}

    def add_url_content(self, url, content, encoding='utf-8'):
        self.urls[url] = (False, content, encoding)

    def add_url_folder(self, url, folder):
        self.urls[url] = (True, folder, None)

    def add_revision(self, rel_path, revision):
        self.revisions[rel_path] = revision

    def _handle(self, url, path):
        d = os.path.dirname(path)
        if not os.path.exists(d):
            os.makedirs(d)
        isdir, value, encoding = self.urls[url]
        if isdir:
            if os.path.exists(path):
                raise ValueError('folder should not exist: %s', path)
            shutil.copytree(value, path)
        else:
            with open(path, 'w', encoding=encoding) as fd:
                fd.write(value)

    def export(self, url, path, revision=None):
        if url not in self.urls:
            raise subprocess.CalledProcessError(1, 'svn', 'failed to find %s' % url)
        self._handle(url, path)

    def safe_export(self, url, path, revision=None):
        if url not in self.urls:
            return False
        self._handle(url, path)
        return True

    checkout = export
    safe_checkout = safe_export

    def get_revisions(self, paths):
        revisions = {}
        for path in paths:
            for rel_path, revision in self.revisions.items():
                if path.endswith(rel_path):
                    revisions[path] = self.revisions[rel_path]
            if path not in revisions:
                raise ValueError('no revision for %s' % path)
        return revisions


class MockRequestsResponse(object):
    def raise_for_status(self):
        pass


class MockRequests(object):
    def __init__(self):
        self.calls = []

    def post(self, *args, **kwargs):
        self.calls.append((args, kwargs))
        return MockRequestsResponse()


def get_content(path, encoding='utf-8'):
    with open(path, 'r', encoding=encoding) as fd:
        return fd.read()


def set_content(path, content, encoding='utf-8'):
    d = os.path.dirname(path)
    if not os.path.exists(d):
        os.makedirs(d)
    with open(path, 'w', encoding=encoding) as fd:
        fd.write(content)
