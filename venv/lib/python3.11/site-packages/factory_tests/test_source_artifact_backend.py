# -*- coding: utf-8 -*-
import datetime
import os
import random
import tempfile
import unittest
from unittest import TestCase

import factory_tests
from factory.backends.artifact import SourceArtifactBackend


class SourceArtifactBackendTestCase(TestCase):
    def test_artifact_url(self):
        backend = SourceArtifactBackend('http://toto/', 'john', 'doe')
        url = backend.artifact_url(2009, 'newport.gestab.lisanx', 110)
        self.assertEqual('http://toto/newport/gestab/lisanx/2009/newport_gestab_lisanx-2009-r110.tgz', url)

    def test(self):
        schema_version = 2009
        procedure_name = 'test'
        revision = datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S') + str(int(random.random() * 10 ** 6))
        content = 'hello'
        backend = SourceArtifactBackend(factory_tests.ARTIFACTORY_SRC_URL, factory_tests.ARTIFACTORY_USER,
                                        factory_tests.ARTIFACTORY_PASSWD)
        with tempfile.TemporaryDirectory() as temp:
            path = os.path.join(temp, 'test.dat')
            with open(path, 'w', encoding='utf-8') as fd:
                fd.write(content)
            new_path = path + '.new'
            self.assertFalse(backend.exists(schema_version, procedure_name, revision))
            url = backend.put(schema_version, procedure_name, revision, path)
            self.assertEqual(factory_tests.ARTIFACTORY_SRC_URL + '/test/2009/test-2009-r%s.tgz' % revision, url)
            self.assertTrue(backend.exists(schema_version, procedure_name, revision))
            backend.get(schema_version, procedure_name, revision, new_path)
            with open(new_path, 'r', encoding='utf-8') as fd:
                self.assertEqual(content, fd.read())


if __name__ == '__main__':
    unittest.main()
