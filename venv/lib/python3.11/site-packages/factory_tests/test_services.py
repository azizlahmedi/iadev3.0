# -*- coding: utf-8 -*-
import os
import tempfile
import unittest
from unittest import TestCase

import factory_tests
from factory import consts
from factory.backends.app import AppBackend
from factory.backends.artifact import SourceArtifactBackend, BinaryArtifactBackend, CompilerArtifactBackend
from factory.backends.automation import AutomationBackend
from factory.backends.compiler import CompilerBackend
from factory.backends.config import ProcedureConfigBackend
from factory.backends.frame import FrameAreaBackend, FrameBackend
from factory.backends.i18n import I18nBackend
from factory.backends.legacy import LegacyBackend
from factory.backends.patch import PatchBackend
from factory.backends.pattern import PatternBackend
from factory.backends.repo import RemoteRepositoryBackend
from factory.backends.scm import SubversionBackend
from factory.backends.source import SourceBackend
from factory.services import Services


class ServicesTestCase(TestCase):
    def setUp(self):
        super(ServicesTestCase, self).setUp()
        self.subversion_backend = SubversionBackend(
            factory_tests.SUBVERSION_USER,
            factory_tests.SUBVERSION_PASSWD,
        )
        self.source_backend = SourceBackend(
            self.subversion_backend,
            factory_tests.SUBVERSION_URL,
        )
        self.source_artifact_backend = SourceArtifactBackend(
            factory_tests.ARTIFACTORY_SRC_URL,
            factory_tests.ARTIFACTORY_USER,
            factory_tests.ARTIFACTORY_PASSWD,
        )
        self.binary_artifact_backend = BinaryArtifactBackend(
            factory_tests.ARTIFACTORY_BIN_URL,
            factory_tests.ARTIFACTORY_USER,
            factory_tests.ARTIFACTORY_PASSWD,
        )
        self.compiler_artifact_backend = CompilerArtifactBackend(
            factory_tests.ARTIFACTORY_COMPILER_URL,
            factory_tests.ARTIFACTORY_USER,
            factory_tests.ARTIFACTORY_PASSWD,
        )
        self.compiler_backend = CompilerBackend(
            factory_tests.COMPILER_TIMEOUT,
        )
        self.i18n_backend = I18nBackend(
            self.subversion_backend,
            factory_tests.SUBVERSION_URL,
            factory_tests.LEGACY_MO_URL,
            consts.LANGUAGES,
        )
        self.frame_area_backend = FrameAreaBackend(
            self.subversion_backend,
            factory_tests.SUBVERSION_URL,
        )
        self.frame_backend = FrameBackend(
            self.subversion_backend,
            factory_tests.SUBVERSION_URL,
            factory_tests.JAVA_HOME,
            factory_tests.M2_HOME,
        )
        self.app_backend = AppBackend()
        self.repo_backend = RemoteRepositoryBackend(
            factory_tests.REPO_HOST,
            factory_tests.REPO_USER,
            factory_tests.REPO_PASSWD,
            factory_tests.REPO_CWD,
        )
        self.patch_backend = PatchBackend()
        self.procedure_config_backend = ProcedureConfigBackend(
            self.subversion_backend,
            factory_tests.SUBVERSION_URL,
        )
        self.jasper_backend = ProcedureConfigBackend(
            self.subversion_backend,
            factory_tests.SUBVERSION_URL,
        )
        self.legacy_backend = LegacyBackend(
            factory_tests.LEGACY_VMS_HOST,
            factory_tests.LEGACY_VMS_USER,
            factory_tests.LEGACY_VMS_PASSWD,
            factory_tests.LEGACY_UNIX_HOST,
            factory_tests.LEGACY_UNIX_USER,
            factory_tests.LEGACY_UNIX_PASSWD,
        )
        self.pattern_backend = PatternBackend(self.compiler_backend)
        self.automation_backend_requests_handler = factory_tests.MockRequests()
        self.automation_backend = AutomationBackend(factory_tests.AUTOMATION_DELIVER_URL, self.automation_backend_requests_handler)
        self.services = Services(
            self.source_backend,
            self.source_artifact_backend,
            self.binary_artifact_backend,
            self.compiler_artifact_backend,
            self.compiler_backend,
            self.i18n_backend,
            self.frame_area_backend,
            self.frame_backend,
            self.app_backend,
            self.repo_backend,
            self.patch_backend,
            self.procedure_config_backend,
            self.jasper_backend,
            self.legacy_backend,
            self.pattern_backend,
            self.automation_backend,
        )
        self.compiler_version = '1.0.5'
        self.compatibility_version = '1'

    def test_ensure_compiler(self):
        with tempfile.TemporaryDirectory() as temp:
            support_home = os.path.join(temp, 'env')
            compatibility_version = self.services.ensure_compiler(self.compiler_version, support_home)
            self.assertTrue(os.path.isdir(support_home))
            self.assertEqual(self.compatibility_version, compatibility_version)

    def test_export_sources(self):
        schema_version = 2009
        procedure_name = 'newport.gestab.lisanx'
        revision = 130000
        self.source_artifact_backend.delete(schema_version, procedure_name, revision)
        self.services.export_sources(schema_version, procedure_name, revision)
        self.assertTrue(self.source_artifact_backend.exists(schema_version, procedure_name, revision))

    def test_compile(self):
        schema_version = 2009
        procedure_name = 'newport.gestab.lisanx'
        procedure_basename = procedure_name.replace('.', '_')
        revision = 130000
        with tempfile.TemporaryDirectory() as temp:
            support_home = os.path.join(temp, 'support_home')
            self.services.ensure_compiler(self.compiler_version, support_home)
            with tempfile.TemporaryDirectory() as app:
                self.services.export_sources(schema_version, procedure_name, revision)
                output = self.services.compile(schema_version, procedure_name, revision, self.compiler_version,
                                               support_home,
                                               app)
                self.assertTrue('SemanticWarning' in output, output)
                procedure_path = os.path.join(app, 'magpy', self.compatibility_version, procedure_basename)
                self.assertTrue(os.path.isfile(procedure_path + '.py'))
                self.assertTrue(os.path.isfile(procedure_path + '.pyc'))
                self.assertTrue(os.path.isfile(procedure_path + '.map.gz'))

    def test_compile_resources(self):
        schema_version = 2009
        procedure_name = 'newport.gestab.lisanx'
        procedure_basename = procedure_name.replace('.', '_')
        frame_revision = 130000
        i18n_revision = 'HEAD'
        config_revision = 130000
        jasper_revision = 130000
        with tempfile.TemporaryDirectory() as temp:
            self.services.compile_resources(schema_version, procedure_name, frame_revision, i18n_revision,
                                            config_revision, jasper_revision, temp)
            self.assertTrue(os.path.exists(os.path.join(temp, 'mo', 'en', procedure_basename + '_en.mo')))
            self.assertTrue(os.path.exists(os.path.join(temp, 'mlg', 'en', procedure_basename + '_en.mo')))
            self.assertTrue(os.path.exists(os.path.join(temp, 'java', procedure_basename, 'frm_2_21.class')))
            self.assertFalse(os.path.exists(os.path.join(temp, 'conf')))

    def test_synchronize(self):
        schema_version = 2009
        procedure_name = 'newport.gestab.lisanx'
        revision = 130000
        resource_revision = 130000
        with tempfile.TemporaryDirectory() as temp:
            app = os.path.join(temp, 'app')
            os.makedirs(app)
            basename = 'test.dat'
            content = 'hello'
            with open(os.path.join(app, basename), 'w', encoding='utf-8') as fd:
                fd.write(content)
            self.binary_artifact_backend.delete(schema_version, procedure_name, revision, resource_revision)
            self.services.synchronize(schema_version, procedure_name, revision, resource_revision, app)
            new_app = os.path.join(temp, 'new_app')
            self.binary_artifact_backend.extract(schema_version, procedure_name, revision, resource_revision, new_app)
            self.assertTrue(os.path.isfile(os.path.join(new_app, basename)))
            with open(os.path.join(new_app, basename), 'r', encoding='utf-8') as fd:
                self.assertEqual(content, fd.read())

    def test_synchronize_legacy(self):
        schema_version = 2009
        procedure_name = 'newport.gestab.lisanx'
        revision = 130000
        resource_revision = 130000
        self.test_synchronize()
        remote_path = os.path.join(self.repo_backend.cwd, str(schema_version), 'test.dat')
        with self.repo_backend.connection():
            self.repo_backend.check_call('rm -f ' + os.path.join(remote_path, 'test.dat'))
        self.services.synchronize_legacy(schema_version, procedure_name, revision, resource_revision)
        with self.repo_backend.connection():
            with self.repo_backend.sftp.open(remote_path) as fd:
                self.assertEqual('hello', fd.read().decode('utf-8'))

    def test_compile_legacy(self):
        schema_version = 2009
        procedure_name = 'newport.gesenv.saienv'
        remote_path = os.path.join(self.repo_backend.cwd, str(schema_version), 'gnx', procedure_name.replace('.', '_') + '.gnx')
        with self.repo_backend.connection():
            self.repo_backend.check_call('rm -f ' + remote_path)
        with tempfile.TemporaryDirectory() as temp:
            support_home = os.path.join(temp, 'support_home')
            self.services.ensure_compiler(self.compiler_version, support_home)
            self.services.compile_legacy(schema_version, procedure_name, {self.compiler_version: support_home})
        with self.repo_backend.connection():
            self.repo_backend.check_call('ls ' + remote_path)

    def test_technical_tests(self):
        schema_version = 2016
        procedure_name = 'newport.gestab.lisanx'
        revision = 194000
        resource_revision = 194000
        with tempfile.TemporaryDirectory() as temp:
            support_home = os.path.join(temp, 'support_home')
            self.services.ensure_compiler(self.compiler_version, support_home)
            with tempfile.TemporaryDirectory() as app:
                self.services.export_sources(schema_version, procedure_name, revision)
                self.services.compile(schema_version, procedure_name, revision, self.compiler_version, support_home, app)
                self.services.synchronize(schema_version, procedure_name, revision, resource_revision, app)
        self.services.technical_tests(schema_version, procedure_name, revision, resource_revision)
        self.assertEqual(1, len(self.automation_backend_requests_handler.calls))
        call = self.automation_backend_requests_handler.calls[0]
        call_args, call_kwargs = call
        self.assertEqual(call_args[0], factory_tests.AUTOMATION_DELIVER_URL)
        expected = {
            'procedure': {
                'name': procedure_name,
                'resource_revision': resource_revision,
                'revision': revision},
            'schema': {
                'name': 'portefeuille',
                'version': schema_version,
            },
            'tests': {
                'clypy': {
                    'log': 'Not implemented.',
                    'result': 'pass'},
                'graphical_coherency': {
                    'log': 'Not implemented.',
                    'result': 'pass',
                },
                'y2k': {
                    'log': '',
                    'result': 'pass',
                },
            },
            'url': factory_tests.ARTIFACTORY_BIN_URL + '/newport/gestab/lisanx/2016/newport_gestab_lisanx-2016-r194000-194000.gnx',
        }
        self.assertEqual(expected, call_kwargs['json'])


if __name__ == '__main__':
    unittest.main()
