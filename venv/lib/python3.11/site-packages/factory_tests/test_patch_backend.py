# -*- coding: utf-8 -*-
import os
import tempfile
import unittest
from unittest import TestCase

import factory_tests
from factory.backends.patch import PatchBackend


class PatchBackendTestCase(TestCase):
    def setUp(self):
        super(PatchBackendTestCase, self).setUp()
        self.backend = PatchBackend()
        self.compiler_version = '0.3.13'

    def test_me0(self):
        with tempfile.TemporaryDirectory() as checkout:
            factory_tests.set_content(os.path.join(checkout, 'gp2016', 'project.cfg'), '''
[project]
version=2016
name=gp2016
[schema]
version=2016
name=portefeuille
[logical_names]
MAGNUM_DEFAULT_DIRECTORY=adl/src/mag
[file]
extension=.adl
[mv]
path=../mv.py
''')
            mv_path = os.path.join(checkout, 'mv.py')
            content = '% Chainage GP2009 % INCLUDE FILE "GP2009M:NEWPORT_GESTRA_MOTEUR.ADL"'
            path = os.path.join(checkout, 'gp2016', 'adl', 'src', 'mag', 'newport', 'gestra', 'moteur', 'newport_gestra_moteur.adl')
            mv_content = '''#-*- coding: utf-8 -*-
mv = {2009: {'newport.gestra.moteur': {'hash': 'abcdef', 'svn': True}}}
'''
            factory_tests.set_content(mv_path, mv_content)
            # Nothing to do if >= 1.0.4
            factory_tests.set_content(path, content)
            self.backend.fix_me0(2016, 154486, checkout, '1.0.4')
            self.assertEqual(content, factory_tests.get_content(path))
            # Something to do if < 1.0.4
            factory_tests.set_content(path, content)
            self.backend.fix_me0(2016, 154486, checkout, '1.0.3')
            self.assertEqual('% Chainage GP2009 % INCLUDE FILE "GP2009M:ABCDEF.ME0"', factory_tests.get_content(path))
            # Nothing to do if not in MV
            factory_tests.set_content(mv_path, 'mv = {}')
            factory_tests.set_content(path, content)
            self.backend.fix_me0(2016, 154486, checkout, '1.0.3')
            self.assertEqual(content, factory_tests.get_content(path))

    def test_gt_translate(self):
        with tempfile.TemporaryDirectory() as checkout:
            content = '''
GET.TEXT (GT.msg.in
GET.TEXT.2 (GT.msg.in
'''
            path = os.path.join(checkout, 'gp2009', 'adl', 'src', 'bib', 'others', 'bibgttranslate.bib')
            factory_tests.set_content(path, content)
            self.backend.fix(2009, 'test', 300000, checkout, self.compiler_version)
            self.assertEqual(content, factory_tests.get_content(path))
            self.backend.fix(2009, 'test', 150000, checkout, self.compiler_version)
            new_content = '''
GET.TEXT.6 (GT.msg.in
GET.TEXT.10 (GT.msg.in
'''
            self.assertEqual(new_content, factory_tests.get_content(path))

    def test_floordiv(self):
        with tempfile.TemporaryDirectory() as checkout:
            content = '''
(HMSTR.ose.heure.debut/60)
'''
            path = os.path.join(checkout, 'gp2009', 'adl', 'src', 'bib', 'others', 'bibtutu.bib')
            factory_tests.set_content(path, content)
            self.backend.fix(2009, 'test', 150000, checkout, self.compiler_version)
            new_content = '''
FLOORDIV(HMSTR.ose.heure.debut, 60)
'''
            self.assertEqual(new_content, factory_tests.get_content(path))

    def test_invalid_picture(self):
        with tempfile.TemporaryDirectory() as checkout:
            content = '''
AS " 5C"
'''
            path = os.path.join(checkout, 'gp2009', 'adl', 'src', 'bib', 'others', 'bibtutu.bib')
            factory_tests.set_content(path, content)
            self.backend.fix(2009, 'test', 150000, checkout, self.compiler_version)
            new_content = '''
AS "5C"
'''
            self.assertEqual(new_content, factory_tests.get_content(path))

    def test_invamo(self):
        with tempfile.TemporaryDirectory() as checkout:
            content = '''
FUNCTION Recherche.total.primitive (
LET Recherche.primitive = 'Parametre non reconnu '
FUNCTION Recherche.total.primitive.bis (
LET Recherche.primitive = 'Parametre non reconnu '
'''
            path = os.path.join(checkout, 'gp2009', 'adl', 'src', 'mag', 'newport', 'etastk', 'invamo',
                                'newport_etastk_invamo.adl')
            factory_tests.set_content(path, content)
            self.backend.fix(2009, 'test', 154486, checkout, self.compiler_version)
            new_content = '''
FUNCTION Recherche.total.primitive (
LET Recherche.total.primitive = 'Parametre non reconnu '
FUNCTION Recherche.total.primitive.bis (
LET Recherche.total.primitive.bis = 'Parametre non reconnu '
'''
            self.assertEqual(new_content, factory_tests.get_content(path))

    def test_bibconvertchainedate(self):
        with tempfile.TemporaryDirectory() as checkout:
            content = '''
                                        MOVE Mag.false TO Cchd.flag.correcte
                                        END
        "DDMMY":    !SGH 01/03/16 D
                !IF (CCHD.date.saisie AS '5C') IS DATE 'DDMMY'
                !THEN
                !    BEGIN
                !    MOVE CONVERT.CHAINE.8C.DATE (SUBSTR(CCHD.date.saisie,1,2) + '/' +
                !                 Substr(CCHD.date.saisie,3,2) +"/0" +
                !                 SUBSTR(CCHD.date.saisie,5,1))
                !                        TO Cchd.date
                !    MOVE Mag.true TO Cchd.flag.correcte
                !    END
                !ELSE
                !    BEGIN
                                !        MOVE DEFAULT TO Cchd.date
                                !        MOVE Mag.false TO Cchd.flag.correcte
                                !        END
                BEGIN
                MOVE DEFAULT TO Cchd.date
                MOVE DEFAULT TO Cchd.flag.correcte
!                MISE.A.JOUR.ANOMALIE("ERR",TRIM(GT.TRANSLATE("Le format DDMMY n'est plus utilise ","","", "", "", "", "")))
                TYPE TO MESSAGE.AREA "Le format DDMMY n'est plus utilise " !SGH 07/03/16
                END
                !SGH 01/03/16 F
        END
    ELSE
        IF (Cchd.date.saisie AS '8C') IS DATE "DD/MM/YY"
        THEN
            BEGIN
'''
            path = os.path.join(checkout, 'gp2009', 'adl', 'src', 'bib', 'bibconvert', 'bibconvertchainedate.bib')
            factory_tests.set_content(path, content)
            self.backend.fix(2009, 'test', 140000, checkout, self.compiler_version)
            new_content = '''
                                        MOVE Mag.false TO Cchd.flag.correcte
                                        END
        END
    ELSE
        IF (Cchd.date.saisie AS '8C') IS DATE "DD/MM/YY"
        THEN
            BEGIN
'''
            self.assertEqual(new_content, factory_tests.get_content(path).replace('\t', '    '))

    def test_type_debug(self):
        with tempfile.TemporaryDirectory() as checkout:
            content = '''
FIELDS
	 TD.lib		AS "254C"

FUNCTION TYPE.DEBUG (TD.LIB) !!! SAME AS BOOLEEN
!============================
BEGIN
IF Id.username OF PROCEDURE = "DEBUG"
THEN
	BEGIN
	ADD 1 TO Compteur.trace
	INSERT INTO RELA.TRACE USING (TD.LIB FOR Libelle.trace)
	TYPE @CR, TD.LIB
	PAUSE 0
	END
ELSE
	NOTHING
END
'''
            path = os.path.join(checkout, 'gp2009', 'adl', 'src', 'bib', 'bibtraite', 'bibtraitementmessage.bib')
            factory_tests.set_content(path, content)
            self.backend.fix(2009, 'test', 150000, checkout, self.compiler_version)
            new_content = '''
FIELDS
	 TD.lib		AS "250C"

FUNCTION TYPE.DEBUG (TD.LIB) !!! SAME AS BOOLEEN
!============================
BEGIN
IF Id.username OF PROCEDURE = "DEBUG"
THEN
	BEGIN
	ADD 1 TO Compteur.trace
	INSERT INTO RELA.TRACE USING (TD.LIB FOR Libelle.trace)
	TYPE @CR, ">>> ", TD.LIB
	PAUSE 0
	END
ELSE
	NOTHING
END
'''
            self.assertEqual(new_content, factory_tests.get_content(path))

    def test_fix_from(self):
        with tempfile.TemporaryDirectory() as checkout:
            content = '''
TATA
TUTU
TOTO
TATA
'''
            path = os.path.join(checkout, 'gp2009', 'adl', 'src', 'bib', 'others', 'bibgttranslate.bib')
            factory_tests.set_content(path, content)
            self.backend.fix_from(path, 'TOTO', 'TATA', 'TUTU')
            new_content = '''
TATA
TUTU
TOTO
TUTU
'''
            self.assertEqual(new_content, factory_tests.get_content(path))


if __name__ == '__main__':
    unittest.main()
