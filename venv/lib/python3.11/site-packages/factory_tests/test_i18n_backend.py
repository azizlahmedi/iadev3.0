# -*- coding: utf-8 -*-
import os
import tempfile
import unittest
from unittest import TestCase

import polib

import factory_tests
from factory.backends.i18n import I18nBackend
from factory.backends.scm import SubversionBackend


class I18nBackendTestCase(TestCase):
    def setUp(self):
        super(I18nBackendTestCase, self).setUp()
        self.subversion_backend = SubversionBackend(factory_tests.SUBVERSION_USER, factory_tests.SUBVERSION_PASSWD)
        self.i18n_backend = I18nBackend(
            self.subversion_backend,
            factory_tests.SUBVERSION_URL,
            factory_tests.LEGACY_MO_URL,
            ['fr', 'en', 'zh', 'ne'],
        )

    def count_msgid(self, path):
        return len(polib.mofile(path, encoding='utf-8'))

    def test(self):
        schema_version = 2009
        procedure_name = 'newport.gesenv.saienv'
        with tempfile.TemporaryDirectory() as temp:
            all_mo = self.i18n_backend.download_and_compile_all_po(schema_version, procedure_name, temp, 'HEAD')
            self.assertEqual(4, len(all_mo))
            self.assertTrue(os.path.isfile(os.path.join(temp, 'fr', 'newport_gesenv_saienv_fr.mo')))
            self.assertTrue(os.path.isfile(os.path.join(temp, 'en', 'newport_gesenv_saienv_en.mo')))
            self.assertTrue(os.path.isfile(os.path.join(temp, 'zh', 'newport_gesenv_saienv_zh.mo')))
            self.assertTrue(os.path.isfile(os.path.join(temp, 'ne', 'newport_gesenv_saienv_ne.mo')))

    def _test_legacy(self, schema_version):
        procedure_name = 'newport.gesenv.saienv'
        with tempfile.TemporaryDirectory() as temp:
            all_mo = self.i18n_backend.download_all_legacy_mo(schema_version, procedure_name, temp)
            self.assertEqual(4, len(all_mo))
            fr_path = os.path.join(temp, 'fr', 'newport_gesenv_saienv_fr.mo')
            self.assertTrue(os.path.isfile(fr_path))
            self.assertEqual(0, self.count_msgid(fr_path))
            en_path = os.path.join(temp, 'en', 'newport_gesenv_saienv_en.mo')
            self.assertTrue(os.path.isfile(en_path))
            self.assertTrue(self.count_msgid(en_path) >= 0)
            self.assertTrue(os.path.isfile(os.path.join(temp, 'zh', 'newport_gesenv_saienv_zh.mo')))
            ne_path = os.path.join(temp, 'ne', 'newport_gesenv_saienv_ne.mo')
            self.assertTrue(os.path.isfile(ne_path))
            self.assertEqual(0, self.count_msgid(ne_path))

    def test_legacy(self):
        self._test_legacy(2009)

    def test_legacy_fallback(self):
        self._test_legacy(2016)


if __name__ == '__main__':
    unittest.main()
