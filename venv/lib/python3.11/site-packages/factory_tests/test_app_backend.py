# -*- coding: utf-8 -*-
import configparser
import datetime
import os
import subprocess
import tempfile
import unittest
from unittest import TestCase

import factory_tests
from factory.backends.app import AppBackend


class AppBackendTestCase(TestCase):
    def setUp(self):
        super(AppBackendTestCase, self).setUp()
        self.app_backend = AppBackend()

    def test(self):
        with tempfile.TemporaryDirectory() as temp:
            path = os.path.join(temp, 'test.zip')
            with tempfile.TemporaryDirectory() as remote_app:
                with tempfile.TemporaryDirectory() as local_app:
                    factory_tests.set_content(os.path.join(remote_app, 'toto.txt'), 'hello')
                    factory_tests.set_content(os.path.join(local_app, 'toto.txt'), 'world')
                    factory_tests.set_content(os.path.join(local_app, 'tutu.txt'), 'foobar')
                    self.app_backend.merge(remote_app, local_app)
                self.app_backend.create_or_update_manifest(2006, 'test', 10, 11, remote_app)
                self.app_backend.bundle(remote_app, path)
            subprocess.check_call(['unzip', path], cwd=temp)
            self.assertEqual('world', factory_tests.get_content(os.path.join(temp, 'toto.txt')))
            self.assertEqual('foobar', factory_tests.get_content(os.path.join(temp, 'tutu.txt')))
            parser = configparser.ConfigParser()
            parser.read(os.path.join(temp, 'mf', 'test.mf'), encoding='utf-8')
            self.assertEqual('10', parser['revision']['adl'])
            self.assertEqual('11', parser['revision']['resource'])
            self.assertEqual(datetime.datetime.utcnow().isoformat().split('T')[0], parser['artifact']['created_at'].split('T')[0])

    def test_clean(self):
        with tempfile.TemporaryDirectory() as app:
            app_py = os.path.join(app, 'magpy')
            app_py_v1 = os.path.join(app_py, 'v1')
            app_py_v2 = os.path.join(app_py, 'v2')
            os.makedirs(app_py_v1)
            os.makedirs(app_py_v2)
            self.app_backend.clean(app, ['v2'])
            self.assertFalse(os.path.exists(app_py_v1))
            self.assertTrue(os.path.exists(app_py_v2))


if __name__ == '__main__':
    unittest.main()
