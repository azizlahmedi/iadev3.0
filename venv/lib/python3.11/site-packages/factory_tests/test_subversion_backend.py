# -*- coding: utf-8 -*-
import glob
import os
import subprocess
import tempfile
import unittest
from unittest import TestCase

import factory_tests
from factory.backends.scm import SubversionBackend


class SubversionBackendTestCase(TestCase):
    def setUp(self):
        super(SubversionBackendTestCase, self).setUp()
        self.backend = SubversionBackend(factory_tests.SUBVERSION_USER, factory_tests.SUBVERSION_PASSWD)

    def assertContent(self, expected_content, path):
        with open(path, 'r', encoding='latin1') as fd:
            self.assertEqual(expected_content, fd.read())

    def test_export(self):
        '''
        https://iris.sungard-finance.fr/svn/viewvc/gp/trunk/gp710/adl/src/msg/help/hpcatvalliscou2.msg?r1=4554&r2=28024
        '''
        url = factory_tests.SUBVERSION_URL + '/gp710/adl/src/msg/help/hpcatvalliscou2.msg'
        with tempfile.TemporaryDirectory() as temp:
            path = os.path.join(temp, 'hpcatvalliscou2.msg')
            self.backend.export(url, path)
            self.assertContent('"Categorie des valeurs a traiter : VMOB, REME, ..."\n', path)
            os.remove(path)
            self.backend.export(url, path, 4554)
            self.assertContent('"Categorie des valeurs a traiter : CRNE, VMOB, REME, ..."\n', path)

    def test_safe_export(self):
        '''
        https://iris.sungard-finance.fr/svn/viewvc/gp/trunk/gp710/adl/src/msg/help/hpcatvalliscou2.msg?r1=4554&r2=28024
        '''
        url = factory_tests.SUBVERSION_URL + '/gp710/adl/src/msg/help/hpcatvalliscou2.msg'
        with tempfile.TemporaryDirectory() as temp:
            path = os.path.join(temp, 'hpcatvalliscou2.msg')
            self.assertTrue(self.backend.safe_export(url, path))
            self.assertContent('"Categorie des valeurs a traiter : VMOB, REME, ..."\n', path)
            os.remove(path)
            self.assertTrue(self.backend.safe_export(url, path, 4554))
            self.assertContent('"Categorie des valeurs a traiter : CRNE, VMOB, REME, ..."\n', path)

    def test_export_not_exist(self):
        url = factory_tests.SUBVERSION_URL + '/gp710/adl/src/msg/help/hpcatvalliscou2.tutu'
        with tempfile.TemporaryDirectory() as temp:
            path = os.path.join(temp, 'hpcatvalliscou2.msg')
            self.assertRaises(subprocess.CalledProcessError, self.backend.export, url, path)
            self.assertFalse(os.path.exists(path))

    def test_safe_export_not_exist(self):
        url = factory_tests.SUBVERSION_URL + '/gp710/adl/src/msg/help/hpcatvalliscou2.tutu'
        with tempfile.TemporaryDirectory() as temp:
            path = os.path.join(temp, 'hpcatvalliscou2.msg')
            self.assertFalse(self.backend.safe_export(url, path))
            self.assertFalse(os.path.exists(path))

    def test_safe_checkout(self):
        url = factory_tests.SUBVERSION_URL + '/gp710/adl/src/gra/java/newport_gestab_lisanx'
        with tempfile.TemporaryDirectory() as temp:
            checkout = os.path.join(temp, 'checkout')
            self.assertTrue(self.backend.safe_checkout(url, checkout))
            self.assertTrue(os.path.isdir(checkout))
            self.assertEqual({'.svn', 'frm_3_19_2.java'}, set(os.listdir(checkout)))

    def test_safe_checkout_not_exist(self):
        url = factory_tests.SUBVERSION_URL + '/gp710/adl/src/gra/java/newport_gestab_lisanx2'
        with tempfile.TemporaryDirectory() as temp:
            checkout = os.path.join(temp, 'checkout')
            self.assertFalse(self.backend.safe_checkout(url, checkout))

    def test_get_revisions(self):
        with tempfile.TemporaryDirectory() as temp:
            checkout = os.path.join(temp, 'checkout')
            url = factory_tests.SUBVERSION_URL + '/gp2009/adl/src/gra/java/newport_intesa_lisano'
            self.backend.checkout(url, checkout, revision=154303)
            frame_paths = glob.glob(os.path.join(checkout, '*.java'))
            frame_revisions = self.backend.get_revisions(frame_paths)
            self.assertEqual(2, len(frame_revisions))
            expected = {
                'frm_2_21_4.java': 153258,
                'frm_2_21_5.java': 153303,
            }
            for frame_path, frame_revision in frame_revisions.items():
                self.assertEqual(expected[os.path.basename(frame_path)], frame_revision)


if __name__ == '__main__':
    unittest.main()
