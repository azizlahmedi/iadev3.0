# -*- coding: utf-8 -*-
import os
import subprocess
import tempfile
import unittest
from unittest import TestCase

import factory_tests
from factory import consts
from factory.backends.compiler import CompilerBackend
from factory.backends.pattern import PatternBackend, Y2K


class PatternBackendTestCase(TestCase):
    def setUp(self):
        super(PatternBackendTestCase, self).setUp()
        self.backend = PatternBackend(CompilerBackend(30))

    def run_visitor_class(self, adl_source, **kwargs):
        with tempfile.TemporaryDirectory() as checkout:
            factory_tests.set_content(os.path.join(checkout, 'gp2016', 'project.cfg'), '''
[project]
version=2016
name=gp2016
[schema]
version=2016
name=portefeuille
[logical_names]
MAGNUM_DEFAULT_DIRECTORY=adl/src/mag
[file]
extension=.adl
[mv]
path=../mv.py
''')
            factory_tests.set_content(os.path.join(checkout, 'mv.py'), 'mv = {}')
            factory_tests.set_content(os.path.join(checkout, 'gp2016', 'adl', 'src', 'mag', 'portefeuille', 'portefeuille.adl'), 'SCHEMA PORTEFEUILLE BEGIN END')
            factory_tests.set_content(os.path.join(checkout, 'gp2016', 'adl', 'src', 'mag', 'test', 'test.adl'), adl_source)
            return self.backend.run(checkout, 2016, 'test', **kwargs)

    def _test_y2k(self, sandbox):
        adl_source = '''
PROCEDURE TEST
BEGIN
    FIELDS date.archivage as DATE,
        date.8c as "8C"
    MOVE "10/12/18" TO date.8c
    MOVE date.8c AS DATE "DD/MM/YY" TO date.archivage
END            
'''
        technical_tests = self.run_visitor_class(adl_source, visitor_classes=(Y2K,), skip_on_annotate_error=False, sandbox=sandbox)
        self.assertEqual(1, len(technical_tests))
        technical_test = technical_tests[0]
        self.assertEqual(consts.TECHNICAL_TEST_KEY_Y2K, technical_test.key)
        self.assertFalse(technical_test.success)
        self.assertTrue("DATE 'DD/MM/YY' is year 2000 bug" in technical_test.log)

    def test_y2k(self):
        self._test_y2k(False)

    def test_y2k_sandbox(self):
        self._test_y2k(True)

    def _test_compilation_error(self, sandbox):
        adl_source = 'foo bar'
        technical_tests = self.run_visitor_class(adl_source, visitor_classes=(Y2K,), skip_on_annotate_error=False, sandbox=sandbox)
        self.assertEqual(1, len(technical_tests))
        technical_test = technical_tests[0]
        self.assertEqual(consts.TECHNICAL_TEST_KEY_Y2K, technical_test.key)
        self.assertFalse(technical_test.success)
        self.assertTrue('SYNTAX ERROR' in technical_test.log)
        technical_tests = self.run_visitor_class(adl_source, visitor_classes=(Y2K,), skip_on_annotate_error=True, sandbox=sandbox)
        self.assertEqual(1, len(technical_tests))
        technical_test = technical_tests[0]
        self.assertEqual(consts.TECHNICAL_TEST_KEY_Y2K, technical_test.key)
        self.assertTrue(technical_test.success)
        self.assertEqual('', technical_test.log)

    def test_compilation_error(self):
        self._test_compilation_error(False)

    def test_compilation_error_sandbox(self):
        self._test_compilation_error(True)

    def test_timeout(self):
        self.backend = PatternBackend(CompilerBackend(1))
        adl_source = '''
PROCEDURE TEST
BEGIN
    FIELDS f1 AS "250C"
'''
        for i in range(100000):
            adl_source += 'MOVE "hello world" TO f1\n'
        adl_source += 'END\n'
        self.assertRaises(subprocess.TimeoutExpired, self.run_visitor_class, adl_source, visitor_classes=(Y2K,), skip_on_annotate_error=False, sandbox=True)


if __name__ == '__main__':
    unittest.main()
