# -*- coding: utf-8 -*-
import os
import tempfile
import unittest
from unittest import TestCase

import factory_tests
from factory.backends.artifact import BinaryArtifactBackend


class BinaryArtifactBackendTestCase(TestCase):
    def setUp(self):
        super(BinaryArtifactBackendTestCase, self).setUp()
        self.backend = BinaryArtifactBackend(
            factory_tests.ARTIFACTORY_BIN_URL,
            factory_tests.ARTIFACTORY_USER,
            factory_tests.ARTIFACTORY_PASSWD,
        )

    def test(self):
        schema_version = 2009
        procedure_name = 'test'
        revision = 1
        resource_revision = revision
        with tempfile.TemporaryDirectory() as temp:
            path = os.path.join(temp, 'test.dat')
            with open(path, 'w', encoding='utf-8') as fd:
                fd.write('hello world')
            if self.backend.exists(schema_version, procedure_name, revision, resource_revision):
                self.backend.delete(schema_version, procedure_name, revision, resource_revision)
            self.backend.put(schema_version, procedure_name, revision, resource_revision, path)
            properties = {
                'hello': 'world',
                'john': 'doe',
            }
            self.backend.update_properties(schema_version, procedure_name, revision, resource_revision, properties)
            found_properties = self.backend.get_properties(schema_version, procedure_name, revision, resource_revision)
            self.assertEqual(['world'], found_properties['hello'])
            self.assertEqual(['doe'], found_properties['john'])


if __name__ == '__main__':
    unittest.main()
