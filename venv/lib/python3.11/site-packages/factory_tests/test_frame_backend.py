# -*- coding: utf-8 -*-
import os
import shutil
import tempfile
import unittest
from unittest import TestCase

import polib

import factory_tests
from factory.backends.frame import FrameBackend
from factory.backends.scm import SubversionBackend
from factory_tests import MockSubversionBackend


class FrameBackendTestCase(TestCase):
    def setUp(self):
        super(FrameBackendTestCase, self).setUp()
        self.subversion_backend = MockSubversionBackend()
        self.frame_backend = FrameBackend(
            self.subversion_backend,
            factory_tests.SUBVERSION_URL,
            factory_tests.JAVA_HOME,
            factory_tests.M2_HOME,
        )

    def test_no_frame(self):
        for schema_version in (2009, 2016):
            procedure_name = 'test'
            revision = 10
            all_mo = {'en': polib.MOFile()}
            with tempfile.TemporaryDirectory() as temp:
                self.frame_backend.generate_and_compile(schema_version, procedure_name, revision, all_mo, temp)

    def test_X_Y_Z(self):
        schema_version = 2009
        procedure_name = 'test'
        revision = 10
        with tempfile.TemporaryDirectory() as temp:
            checkout = os.path.join(temp, 'checkout')
            output = os.path.join(temp, 'output')
            factory_tests.set_content(os.path.join(checkout, 'frm_2_21_1.java'), '''package test;
public class frm_2_21_1 {}
''')
            self.subversion_backend.add_url_folder(factory_tests.SUBVERSION_URL + '/gp2009/adl/src/gra/java/test',
                                                   checkout)
            self.subversion_backend.add_revision('test/frm_2_21_1.java', 10)
            all_mo = {'en': polib.MOFile()}
            self.frame_backend.generate_and_compile(schema_version, procedure_name, revision, all_mo, output)
            self.assertTrue(os.path.isdir(output))
            self.assertEqual({'frm_2_21.class', 'frm_2_21_en.class'}, set(os.listdir(os.path.join(output, 'test'))))
            shutil.rmtree(output)
            self.subversion_backend.add_url_content(
                factory_tests.SUBVERSION_URL + '/gp2009/adl/src/gra/java/test/frame_map.csv', '''frame_name;X;Y;Z;new_X;new_Y
ecran;2;21;1;3;22
''')
            self.frame_backend.generate_and_compile(schema_version, procedure_name, revision, all_mo, output)
            self.assertTrue(os.path.isdir(output))
            self.assertEqual({'frm_3_22.class', 'frm_3_22_en.class'}, set(os.listdir(os.path.join(output, 'test'))))

    def test_X_Y(self):
        schema_version = 2016
        procedure_name = 'test'
        revision = 10
        with tempfile.TemporaryDirectory() as temp:
            checkout = os.path.join(temp, 'checkout')
            output = os.path.join(temp, 'output')
            factory_tests.set_content(os.path.join(checkout, 'frm_2_21.java'), '''package test;
public class frm_2_21 {}
''')
            self.subversion_backend.add_url_folder(factory_tests.SUBVERSION_URL + '/gp2016/adl/src/gra/java/test',
                                                   checkout)
            self.subversion_backend.add_revision('test/frm_2_21.java', 10)
            all_mo = {'en': polib.MOFile()}
            self.frame_backend.generate_and_compile(schema_version, procedure_name, revision, all_mo, output)
            self.assertTrue(os.path.isdir(output))
            self.assertEqual({'frm_2_21.class', 'frm_2_21_en.class'}, set(os.listdir(os.path.join(output, 'test'))))

    def test_invalid_package(self):
        schema_version = 2016
        procedure_name = 'test'
        revision = 10
        with tempfile.TemporaryDirectory() as temp:
            checkout = os.path.join(temp, 'checkout')
            output = os.path.join(temp, 'output')
            factory_tests.set_content(os.path.join(checkout, 'frm_2_21.java'), '''package test2;
public class frm_2_21 {}
''')
            self.subversion_backend.add_url_folder(factory_tests.SUBVERSION_URL + '/gp2016/adl/src/gra/java/test',
                                                   checkout)
            self.subversion_backend.add_revision('test/frm_2_21.java', 10)
            all_mo = {'en': polib.MOFile()}
            try:
                self.frame_backend.generate_and_compile(schema_version, procedure_name, revision, all_mo, output)
            except ValueError as e:
                self.assertEqual('class frm_2_21.class for test does not exist', str(e))
            else:
                self.fail('class compilation should fail')

    def test_actual(self):
        subversion_backend = SubversionBackend(factory_tests.SUBVERSION_USER, factory_tests.SUBVERSION_PASSWD)
        frame_backend = FrameBackend(
            subversion_backend,
            factory_tests.SUBVERSION_URL,
            factory_tests.JAVA_HOME,
            factory_tests.M2_HOME,
        )
        with tempfile.TemporaryDirectory() as output:
            frame_backend.generate_and_compile(2009, 'newport.gesint.majint', 155671, {}, output)
            frames = set(os.listdir(os.path.join(output, 'newport_gesint_majint')))
            self.assertEqual({'frm_7_21.class', 'frm_7_23.class', 'frm_6_21.class', 'frm_2_6.class', 'frm_7_24.class',
                              'frm_7_22.class'}, frames)

    def test_actual_majopc(self):
        subversion_backend = SubversionBackend(factory_tests.SUBVERSION_USER, factory_tests.SUBVERSION_PASSWD)
        frame_backend = FrameBackend(
            subversion_backend,
            factory_tests.SUBVERSION_URL,
            factory_tests.JAVA_HOME,
            factory_tests.M2_HOME,
        )
        with tempfile.TemporaryDirectory() as output:
            frame_backend.generate_and_compile(2009, 'newport.gesopc.majopc', 157576, {}, output)
            frames = set(os.listdir(os.path.join(output, 'newport_gesopc_majopc')))
            self.assertEqual(
                {'frm_2_21.class', 'frm_3_21.class', 'frm_2_40.class', 'frm_2_41.class', 'frm_2_42.class',
                 'frm_2_22.class', 'frm_2_23.class'}, frames)

    def test_actual_lisano(self):
        subversion_backend = SubversionBackend(factory_tests.SUBVERSION_USER, factory_tests.SUBVERSION_PASSWD)
        frame_backend = FrameBackend(
            subversion_backend,
            factory_tests.SUBVERSION_URL,
            factory_tests.JAVA_HOME,
            factory_tests.M2_HOME,
        )
        with tempfile.TemporaryDirectory() as output:
            frame_backend.generate_and_compile(2009, 'newport.intesa.lisano', 157576, {}, output)
            frames = set(os.listdir(os.path.join(output, 'newport_intesa_lisano')))
            self.assertEqual({'frm_2_21.class'}, frames)


if __name__ == '__main__':
    unittest.main()
