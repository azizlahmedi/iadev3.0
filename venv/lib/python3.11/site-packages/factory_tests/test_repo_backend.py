# -*- coding: utf-8 -*-
import os
import tempfile
import unittest
import zipfile
from unittest import TestCase

import factory_tests
from factory import consts
from factory.backends.repo import RemoteRepositoryBackend, LocalRepositoryBackend


class RemoteRepositoryBackendTestCase(TestCase):
    def setUp(self):
        super(RemoteRepositoryBackendTestCase, self).setUp()
        self.backend = RemoteRepositoryBackend(factory_tests.REPO_HOST, factory_tests.REPO_USER,
                                               factory_tests.REPO_PASSWD,
                                               factory_tests.REPO_CWD)

    def test_check_call(self):
        with self.backend.connection():
            output = self.backend.check_call('echo "hello"')
            self.assertEqual('hello\n', output)

    def test_check_call_ko(self):
        with self.backend.connection():
            self.assertRaises(ValueError, self.backend.check_call, 'ls does_no_exist')

    def test_synchronize(self):
        schema_version = 2009
        procedure_name = 'test'
        arcname = 'test/test.py'
        remote_bundle = '%s/%d/%s/%s.%s' % (
            factory_tests.REPO_CWD, schema_version, consts.BUNDLE_EXT, procedure_name, consts.BUNDLE_EXT)
        remote_py = '%s/%d/%s' % (factory_tests.REPO_CWD, schema_version, arcname)
        with self.backend.connection():
            self.backend.check_call('rm -f %s %s' % (remote_bundle, remote_py))
            with tempfile.TemporaryDirectory() as temp:
                path = os.path.join(temp, 'test.zip')
                with zipfile.ZipFile(path, 'w') as fd:
                    fd.write(__file__, arcname)
                self.backend.synchronize(schema_version, procedure_name, path)
            output = self.backend.check_call('ls -l %s %s' % (remote_bundle, remote_py))
            self.assertTrue(remote_bundle in output)
            self.assertTrue(remote_py in output)


class LocalRepositoryBackendTestCase(TestCase):
    def test_synchronize(self):
        schema_version = 2009
        procedure_name = 'test'
        arcname = 'test/test.py'
        with tempfile.TemporaryDirectory() as temp:
            repo_cwd = os.path.join(temp, 'repo')
            backend = LocalRepositoryBackend(repo_cwd)
            path = os.path.join(temp, 'test.zip')
            with zipfile.ZipFile(path, 'w') as fd:
                fd.write(__file__, arcname)
            with backend.connection():
                backend.synchronize(schema_version, procedure_name, path)
            self.assertTrue(os.path.isfile(os.path.join(repo_cwd, str(schema_version), 'gnx', 'test.gnx')))
            self.assertTrue(os.path.isfile(os.path.join(repo_cwd, str(schema_version), 'test', 'test.py')))


if __name__ == '__main__':
    unittest.main()
