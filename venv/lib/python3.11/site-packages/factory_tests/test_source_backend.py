# -*- coding: utf-8 -*-
import os
import subprocess
import tempfile
import unittest
from unittest import TestCase

import delia_commons
from factory import consts
from factory.backends.source import SourceBackend, delia_context
from factory_tests import MockSubversionBackend


class SourceBackendTestCase(TestCase):
    def setUp(self):
        super(SourceBackendTestCase, self).setUp()
        self.url = 'http://toto'
        self.subversion_backend = MockSubversionBackend()
        self.source_backend = SourceBackend(self.subversion_backend, self.url)

    def assertContent(self, expected_content, path, encoding='utf-8'):
        self.assertTrue(os.path.isfile(path))
        with open(path, 'r', encoding=encoding) as fd:
            self.assertEqual(expected_content, fd.read())

    def test_delia_context(self):
        ctx = delia_commons.Context()
        ctx_id = id(ctx)
        new_ctx = delia_context()
        self.assertNotEqual(ctx_id, id(new_ctx))

    def test_export_project(self):
        project_cfg_content = 'toto'
        mv_content = 'tutu'
        self.subversion_backend.add_url_content(self.url + '/gp2009/project.cfg', project_cfg_content)
        self.subversion_backend.add_url_content(self.url + '/mv.py', mv_content)
        with tempfile.TemporaryDirectory() as work:
            self.source_backend.export_project(2009, work, 10)
            self.assertContent(project_cfg_content, os.path.join(work, 'gp2009', 'project.cfg'))
            self.assertContent(mv_content, os.path.join(work, 'mv.py'))

    def test_create_tgz(self):
        project_cfg_content = '''
[project]
version=2009
name=gp2009
[schema]
version=2009
name=portefeuille
[mv]
path=../mv.py
[file]
extension=.adl
[logical_names]
magnum_default_directory=adl/src/mag
msg_application=adl/src/msg/divers
'''
        mv_content = 'mv = {2009: {"test": {"svn": True, "hash": "abcdef"}}}; r_mv = {};'
        schema_content = 'schema portefeuille begin end'
        procedure_content = 'procedure test begin include file "msg_application:hello.msg" end'
        msg_content = 'type "hello world!", @cr'
        self.subversion_backend.add_url_content(self.url + '/gp2009/project.cfg', project_cfg_content)
        self.subversion_backend.add_url_content(self.url + '/mv.py', mv_content)
        self.subversion_backend.add_url_content(
            self.url + '/gp2009/adl/src/mag/%s/%s.adl' % (consts.SCHEMA_NAME, consts.SCHEMA_NAME),
            schema_content)
        self.subversion_backend.add_url_content(self.url + '/gp2009/adl/src/mag/test/test.adl', procedure_content)
        self.subversion_backend.add_url_content(self.url + '/gp2009/adl/src/msg/divers/hello.msg', msg_content)
        with tempfile.TemporaryDirectory() as work:
            tgz_path = os.path.join(work, 'src.tgz')
            self.source_backend.create_tgz(2009, 'test', 10, tgz_path)
            self.assertTrue(os.path.isfile(tgz_path))
            subprocess.check_output(['tar', '-zxf', tgz_path], cwd=work)
            self.assertContent(project_cfg_content, os.path.join(work, 'gp2009', 'project.cfg'))
            new_mv_content = '''#-*- coding: utf-8 -*-
mv = {2009: {'test': {'hash': 'abcdef', 'svn': True}}}
r_mv = {2009: {'abcdef': 'test'}}
'''
            self.assertContent(new_mv_content, os.path.join(work, 'mv.py'))
            self.assertContent(schema_content, os.path.join(work, 'gp2009', 'adl', 'src', 'mag', consts.SCHEMA_NAME,
                                                            consts.SCHEMA_NAME + '.adl'))
            self.assertContent(procedure_content, os.path.join(work, 'gp2009', 'adl', 'src', 'mag', 'test', 'test.adl'))
            self.assertContent(msg_content, os.path.join(work, 'gp2009', 'adl', 'src', 'msg', 'divers', 'hello.msg'))

    def test_expanse_includes(self):
        with tempfile.TemporaryDirectory() as checkout:
            with open(os.path.join(checkout, 'mv.py'), 'w', encoding='utf-8') as fd:
                fd.write('mv = {}; r_mv = {}')
            project_dir = os.path.join(checkout, 'gp2009')
            os.makedirs(project_dir)
            project_path = os.path.join(project_dir, 'project.cfg')
            with open(project_path, 'w', encoding='utf-8') as fd:
                fd.write('''
[project]
version=2009
name=gp2009
[schema]
version=2009
name=portefeuille
[mv]
path=../mv.py
[file]
extension=.adl
[logical_names]
magnum_default_directory=.
msg_application=.
''')
            procedure_path = os.path.join(project_dir, 'toto', 'tutu', 'toto_tutu.adl')
            os.makedirs(os.path.dirname(procedure_path))
            with open(os.path.join(procedure_path), 'w', encoding='latin1') as fd:
                fd.write('procedure toto.tutu\nbegin\ninclude file "msg_application:foo.msg"\nend\n')
            msg_path = os.path.join(project_dir, 'foo.msg')
            with open(msg_path, 'w', encoding='latin1') as fd:
                fd.write('type "hello world", @cr\n')
            expanse_path = os.path.join(checkout, 'expanse.adl')
            expanse_path_return = self.source_backend.expanse_includes(2009, 'toto.tutu', checkout, expanse_path)
            self.assertEqual(expanse_path, expanse_path_return)
            with open(expanse_path, 'r', encoding='latin1') as fd:
                self.assertEqual('procedure toto.tutu\nbegin\ntype "hello world", @cr\n\nend\n', fd.read())

    def test_rename(self):
        schema_version = 2009
        procedure_name = 'toto.tutu'
        procedure_new_name = 'oma.tmp.tutu'
        with tempfile.TemporaryDirectory() as checkout:
            src_dir = os.path.join(checkout, 'gp2009', 'adl', 'src')
            # Procedure
            procedure_path = os.path.join(src_dir, 'mag', 'toto', 'tutu', 'toto_tutu.adl')
            os.makedirs(os.path.dirname(procedure_path))
            with open(procedure_path, 'w', encoding='latin1') as fd:
                fd.write('procedure toto.tutu\ntype "toto.tutu"\n')
            # Jasper
            jasper_path = os.path.join(src_dir, 'jasper', 'toto_tutu', 'default.jrxml')
            os.makedirs(os.path.dirname(jasper_path))
            open(jasper_path, 'w').close()
            # Conf
            conf_path = os.path.join(src_dir, 'conf', 'toto_tutu.conf')
            os.makedirs(os.path.dirname(conf_path))
            open(conf_path, 'w').close()
            # I18n
            po_path = os.path.join(src_dir, 'mlg', 'en', 'toto_tutu_en.po')
            os.makedirs(os.path.dirname(po_path))
            open(po_path, 'w').close()
            # Java
            java_path = os.path.join(src_dir, 'gra', 'java', 'toto_tutu', 'frm_2_21_4.java')
            os.makedirs(os.path.dirname(java_path))
            with open(java_path, 'w', encoding='latin1') as fd:
                fd.write('package toto_tutu;\n// trans = new SgfTranslator("toto_tutu.frm_2_21", clientThread);\n')
            # Call
            self.source_backend.rename(schema_version, procedure_name, procedure_new_name, checkout)
            # Checks
            self.assertTrue(os.path.isfile(os.path.join(src_dir, 'jasper', 'oma_tmp_tutu', 'default.jrxml')))
            self.assertTrue(os.path.isfile(os.path.join(src_dir, 'mlg', 'en', 'oma_tmp_tutu_en.po')))
            self.assertTrue(os.path.isfile(os.path.join(src_dir, 'conf', 'oma_tmp_tutu.conf')))
            procedure_new_path = os.path.join(src_dir, 'mag', 'oma', 'tmp', 'tutu', 'oma_tmp_tutu.adl')
            java_new_path = os.path.join(src_dir, 'gra', 'java', 'oma_tmp_tutu', 'frm_2_21_4.java')
            self.assertTrue(os.path.isfile(procedure_new_path))
            self.assertTrue(os.path.isfile(java_new_path))
            with open(procedure_new_path, 'r', encoding='latin1') as fd:
                self.assertEqual('procedure oma.tmp.tutu\ntype "toto.tutu"\n', fd.read())
            with open(java_new_path, 'r', encoding='latin1') as fd:
                self.assertEqual('package oma_tmp_tutu;\n// trans = new SgfTranslator("oma_tmp_tutu.frm_2_21", clientThread);\n', fd.read())

    def test_rename_chainage(self):
        schema_version = 2016
        procedure_name = 'toto.tutu'
        procedure_new_name = 'oma.tmp.tutu'
        with tempfile.TemporaryDirectory() as checkout:
            src_dir_2016 = os.path.join(checkout, 'gp2016', 'adl', 'src')
            src_dir_2009 = os.path.join(checkout, 'gp2009', 'adl', 'src')
            # Procedure
            procedure_path_2016 = os.path.join(src_dir_2016, 'mag', 'toto', 'tutu', 'toto_tutu.adl')
            os.makedirs(os.path.dirname(procedure_path_2016))
            with open(procedure_path_2016, 'w', encoding='latin1') as fd:
                fd.write('% Chainage GP2009 % INCLUDE FILE "GP2009M:TOTO_TUTU.ADL"\n')
            procedure_path_2009 = os.path.join(src_dir_2009, 'mag', 'toto', 'tutu', 'toto_tutu.adl')
            os.makedirs(os.path.dirname(procedure_path_2009))
            with open(procedure_path_2009, 'w', encoding='latin1') as fd:
                fd.write('procedure toto.tutu\ntype "toto.tutu"\n')
            # Call
            self.source_backend.rename(schema_version, procedure_name, procedure_new_name, checkout)
            # Checks
            procedure_new_path_2016 = os.path.join(src_dir_2016, 'mag', 'oma', 'tmp', 'tutu', 'oma_tmp_tutu.adl')
            with open(procedure_new_path_2016, 'r', encoding='latin1') as fd:
                self.assertEqual('% Chainage GP2009 % INCLUDE FILE "GP2009M:oma_tmp_tutu.ADL"\n', fd.read())
            procedure_new_path_2009 = os.path.join(src_dir_2009, 'mag', 'oma', 'tmp', 'tutu', 'oma_tmp_tutu.adl')
            with open(procedure_new_path_2009, 'r', encoding='latin1') as fd:
                self.assertEqual('procedure oma.tmp.tutu\ntype "toto.tutu"\n', fd.read())


if __name__ == '__main__':
    unittest.main()
