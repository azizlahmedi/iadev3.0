# -*- coding: utf-8 -*-
import os
import subprocess
import tempfile
import threading
import unittest
from unittest import TestCase

import factory_tests
from factory.backends.frame import FrameAreaBackend
from factory.backends.scm import SubversionBackend
from factory.backends.source import SourceBackend
from factory_tests import MockSubversionBackend


class FrameAreaBackendTestCase(TestCase):
    def setUp(self):
        super(FrameAreaBackendTestCase, self).setUp()
        self.subversion_backend = MockSubversionBackend()
        self.frame_area_backend = FrameAreaBackend(self.subversion_backend, factory_tests.SUBVERSION_URL)

    def create_project_cfg(self, schema_version, checkout):
        factory_tests.set_content(os.path.join(checkout, 'gp%d' % schema_version, 'project.cfg'), '''
[project]
version=2009
name=gp2009
[schema]
version=2009
name=portefeuille
[logical_names]
MAGNUM_DEFAULT_DIRECTORY=mag
[file]
extension=.adl
''')

    def fix(self, frame_area_backend, schema_version, procedure_name, revision, output):
        frame_area_backend.fix(schema_version, procedure_name, revision, output, sandbox=False)

    def test_no_frame_map(self):
        schema_version = 2009
        procedure_name = 'test'
        revision = 10
        with tempfile.TemporaryDirectory() as checkout:
            self.create_project_cfg(schema_version, checkout)
            content = '''
procedure begin
frame ecran
frame.area 2 to 21
end'''
            path = os.path.join(checkout, 'gp%d' % schema_version, 'mag', 'test', 'test.adl')
            factory_tests.set_content(path, content)
            self.fix(self.frame_area_backend, schema_version, procedure_name, revision, checkout)
            self.assertEqual(content, factory_tests.get_content(path))

    def test_frame_map_no_match(self):
        schema_version = 2009
        procedure_name = 'test'
        revision = 10
        self.subversion_backend.add_url_content(
            factory_tests.SUBVERSION_URL + '/gp2009/adl/src/gra/java/test/frame_map.csv', '''frame_name;X;Y;Z;new_X;new_Y
ecran;1;21;3;2;21
''')
        with tempfile.TemporaryDirectory() as checkout:
            self.create_project_cfg(schema_version, checkout)
            content = '''
procedure begin
frame ecran
frame.area 2 to 21
end'''
            path = os.path.join(checkout, 'gp%d' % schema_version, 'mag', 'test', 'test.adl')
            factory_tests.set_content(path, content)
            self.fix(self.frame_area_backend, schema_version, procedure_name, revision, checkout)
            expected_content = '''procedure begin
\tframe ecran
\tframe.area 2 to 21
end
'''
            self.assertEqual(expected_content, factory_tests.get_content(path))

    def test_frame_map_match(self):
        schema_version = 2009
        procedure_name = 'test'
        revision = 10
        self.subversion_backend.add_url_content(
            factory_tests.SUBVERSION_URL + '/gp2009/adl/src/gra/java/test/frame_map.csv', '''frame_name;X;Y;Z;new_X;new_Y
ecran;2;21;3;3;22
''')
        with tempfile.TemporaryDirectory() as checkout:
            self.create_project_cfg(schema_version, checkout)
            content = '''
procedure begin
frame ecran
frame.area 2 to 21
frame ecran2
frame.area 2 to 19
end'''
            path = os.path.join(checkout, 'gp%d' % schema_version, 'mag', 'test', 'test.adl')
            factory_tests.set_content(path, content)
            self.fix(self.frame_area_backend, schema_version, procedure_name, revision, checkout)
            expected_content = '''procedure begin
\tframe ecran
\tframe.area 3 to 22
\tframe ecran2
\tframe.area 2 to 19
end
'''
            self.assertEqual(expected_content, factory_tests.get_content(path))

    def test_actual_majvac(self):
        schema_version = 2009
        procedure_name = 'newport.gesval.majvac'
        revision = 156912
        subversion_backend = SubversionBackend(factory_tests.SUBVERSION_USER, factory_tests.SUBVERSION_PASSWD)
        frame_area_backend = FrameAreaBackend(subversion_backend, factory_tests.SUBVERSION_URL)
        source_backend = SourceBackend(subversion_backend, factory_tests.SUBVERSION_URL)
        with tempfile.TemporaryDirectory() as output:
            path = os.path.join(output, 'src.tgz')
            source_backend.create_tgz(schema_version, procedure_name, revision, path)
            subprocess.check_call(['tar', '-zxf', path], cwd=output)
            self.fix(frame_area_backend, schema_version, procedure_name, revision, output)
            content = factory_tests.get_content(
                os.path.join(output, 'gp2009', 'adl', 'src', 'mag', 'newport', 'gesval', 'majvac',
                             'newport_gesval_majvac.adl'), encoding='latin1')
            self.assertTrue('FRAME.AREA 3 TO 21' in content)
            self.assertTrue('FRAME.AREA 2 TO 21' in content)
            self.assertTrue('FRAME.AREA 2 TO 22' in content)
            self.assertTrue('FRAME.AREA 2 TO 23' in content)
            self.assertTrue('FRAME.AREA 2 TO 24' in content)
            self.assertTrue('FRAME.AREA 2 TO 25' in content)
            self.assertTrue('FRAME.AREA 2 TO 26' in content)
            self.assertTrue('FRAME.AREA 2 TO 27' in content)

    def test_actual_caterm(self):
        schema_version = 2009
        procedure_name = 'newport.gescat.caterm'
        revision = 165209
        subversion_backend = SubversionBackend(factory_tests.SUBVERSION_USER, factory_tests.SUBVERSION_PASSWD)
        frame_area_backend = FrameAreaBackend(subversion_backend, factory_tests.SUBVERSION_URL)
        source_backend = SourceBackend(subversion_backend, factory_tests.SUBVERSION_URL)
        with tempfile.TemporaryDirectory() as output:
            path = os.path.join(output, 'src.tgz')
            source_backend.create_tgz(schema_version, procedure_name, revision, path)
            subprocess.check_call(['tar', '-zxf', path], cwd=output)
            self.fix(frame_area_backend, schema_version, procedure_name, revision, output)
            content = factory_tests.get_content(
                os.path.join(output, 'gp2009', 'adl', 'src', 'mag', 'newport', 'gescat', 'caterm',
                             'newport_gescat_caterm.adl'), encoding='latin1')
            self.assertTrue('FRAME.AREA 9 TO 23' in content)
            self.assertTrue('FRAME.AREA 9 TO 22' in content)


class SandboxFrameAreaBackendTestCase(FrameAreaBackendTestCase):
    def fix(self, frame_area_backend, schema_version, procedure_name, revision, output):
        thread = threading.Thread(
            target=frame_area_backend.fix,
            args=(schema_version, procedure_name, revision, output),
            kwargs={'sandbox': True},
        )
        thread.start()
        thread.join()


if __name__ == '__main__':
    unittest.main()
