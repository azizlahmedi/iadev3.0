# -*- coding: utf-8 -*-
import contextlib
import json
import os
import tempfile
import time
import unittest

import polib

from delia_mlg.__main__ import main
from delia_mlg.backends import CheckoutBackend


class TestMain(unittest.TestCase):
    username = 'cis'
    password = 'Ntic2007'
    project_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'gp')

    @contextlib.contextmanager
    def with_config(self):
        with tempfile.TemporaryDirectory() as tmp:
            config_path = os.path.join(tmp, 'delia_mlg.cfg')
            checkout = os.path.join(tmp, 'checkout')
            with open(config_path, 'w', encoding='utf-8') as fd:
                fd.write('''
[REDIS]
url = redis://chardon:6379/2

[SUBVERSION]
checkout = %s
username = %s
password = %s
            ''' % (checkout, self.username, self.password))

            backend = CheckoutBackend(checkout, self.username, self.password)
            backend.checkout('http://avalon.bams.corp:3180/svn/repos/ntic_test/trunk/test_oma/delia_mlg_test/mlg')
            yield (tmp, config_path, checkout)

    def test_translate(self):
        with self.with_config() as (tmp, config_path, checkout):
            main(['-c', config_path, 'translate', '-n', 'newport.gesenv.saienv', '-l', 'en'])
            # TODO: find a way to assert

    def test_translator_extract(self):
        with self.with_config() as (tmp, config_path, checkout):
            po_path = os.path.join(tmp, 'translator.po')
            main(['-c', config_path, 'translator-extract', '-n', 'newport.gesenv.saienv', '-l', 'fr', '-o', po_path])
            self.assertTrue(os.path.exists(po_path))

    def test_integrate_untranslated(self):
        with self.with_config() as (tmp, config_path, checkout):
            untranslated = os.path.join(tmp, 'untranslated')
            os.makedirs(untranslated)
            path = os.path.join(untranslated, 'untranslated.csv')
            msgid = str('a %s' % time.time())
            with open(path, 'w', encoding='utf-8') as fd:
                fd.write('''
newport_gesenv_saienv,fr,"%s"
        ''' % msgid)
            main(['-c', config_path, 'integrate-untranslated', '-u', untranslated])
            po_path = os.path.join(checkout, 'fr', 'newport_gesenv_saienv_fr.po')
            self.assertTrue(os.path.exists(po_path))
            po = polib.pofile(po_path, encoding='utf-8')
            entry = po.find(msgid)
            self.assertIsNotNone(entry)

    def test_gettext_extract(self):
        with self.with_config() as (tmp, config_path, checkout):
            main(['-c', config_path, 'gettext-extract', '-p', self.project_path, '-n', 'test'])
            # TODO: find a way to assert

    def test_frame_extract(self):
        with self.with_config() as (tmp, config_path, checkout):
            main(['-c', config_path, 'frame-extract', '-p', self.project_path, '-n', 'test'])
            # TODO: find a way to assert

    def test_versioning(self):
        with self.with_config() as (tmp, config_path, checkout):
            json_path = os.path.join(tmp, 'data.json')
            main(['-c', config_path, 'versioning', '-n', 'test', '-j', json_path, '-p', self.project_path])
            self.assertTrue(os.path.exists(json_path))
            with open(json_path, encoding='utf-8') as fd:
                data = json.load(fd)
                self.assertTrue('test' in data)
                self.assertEqual(int, type(data['test']))


if __name__ == '__main__':
    unittest.main()
