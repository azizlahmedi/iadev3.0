# -*- coding: utf-8 -*-
import unittest

import polib

from delia_mlg.backends import TranslationBackend, SanityBackend, GlobalPOBackend, ForceBackend
from . import MockSourceBackend


class TestGlobalPOBackend(unittest.TestCase):
    def setUp(self):
        super(TestGlobalPOBackend, self).setUp()
        self.mock = MockSourceBackend()

    def get_backends(self):
        global_po_backend = GlobalPOBackend(self.mock, SanityBackend())
        translation_backend = TranslationBackend(global_po_backend, SanityBackend(), ForceBackend(MockSourceBackend(), SanityBackend()))
        return global_po_backend, translation_backend

    def test_cache_strip(self):
        self.mock.add_translation(' toto ', ' tata ')
        global_po_backend, translation_backend = self.get_backends()
        self.assertEqual({'en': {'toto': 'tata', ' toto ': ' tata '}}, global_po_backend.cache)

    def test_cache_no_override(self):
        self.mock.add_translation(' toto ', ' tata ')
        self.mock.add_translation('toto', 'tutu')
        global_po_backend, translation_backend = self.get_backends()
        self.assertEqual({'en': {'toto': 'tutu', ' toto ': ' tata '}}, global_po_backend.cache)

    def test_translate(self):
        self.mock.add_translation('des', 'ofs')
        global_po_backend, translation_backend = self.get_backends()
        entry = polib.POEntry(msgid=' des')
        self.assertTrue(translation_backend.translate_po_entry(entry, 'en'))
        self.assertEqual(' ofs', entry.msgstr)


if __name__ == '__main__':
    unittest.main()
