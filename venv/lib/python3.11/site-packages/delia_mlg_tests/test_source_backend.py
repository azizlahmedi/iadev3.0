# -*- coding: utf-8 -*-
import contextlib
import os
import tempfile
import time
import unittest

import polib
from delia_mlg.backends import CheckoutBackend, SourceBackend


class TestSourceBackend(unittest.TestCase):
    @contextlib.contextmanager
    def with_backend(self):
        with tempfile.TemporaryDirectory() as tmp:
            checkout_backend = CheckoutBackend(os.path.join(tmp, 'checkout'), 'cis', 'Ntic2007')
            checkout_backend.checkout(
                'http://avalon.bams.corp:3180/svn/repos/ntic_test/trunk/test_oma/delia_mlg_test/mlg')
            yield SourceBackend(checkout_backend)

    def test_languages(self):
        with self.with_backend() as backend:
            self.assertEqual({'en', 'fr'}, backend.languages())

    def test_paths(self):
        procedure_name = 'newport.gesenv.saienv'
        with self.with_backend() as backend:
            self.assertEqual(os.path.join(backend.checkout_backend.root, 'fr', 'newport_gesenv_saienv_fr.po'),
                             backend.get_procedure_path(procedure_name, 'fr'))
            self.assertEqual({os.path.join(backend.checkout_backend.root, 'fr', 'newport_gesenv_saienv_fr.po'),
                              os.path.join(backend.checkout_backend.root, 'en', 'newport_gesenv_saienv_en.po')},
                             backend.get_procedure_paths(procedure_name))

    def test_update_commit(self):
        procedure_name = 'newport.gesenv.saienv'
        with self.with_backend() as backend:
            old_revision = backend.update_procedure(procedure_name)
            po = backend.get_procedure_po(procedure_name, 'fr')
            po.append(polib.POEntry(msgid=str(time.time())))
            po.save()
            new_revision = backend.commit_procedure(procedure_name)
            self.assertTrue(new_revision > old_revision)
            self.assertEqual(old_revision, backend.update_procedure(procedure_name, revision=old_revision))
            self.assertEqual(new_revision, backend.update_procedure(procedure_name))

    def test_update_not_exists(self):
        with self.with_backend() as backend:
            revision = backend.update_procedure('toto.tata.tutu')
            self.assertTrue(revision > 0)

    def test_get_blacklist(self):
        with tempfile.TemporaryDirectory() as checkout:
            backend = SourceBackend(CheckoutBackend(checkout, 'cis', 'xxx'))
            blacklist_path = os.path.join(checkout, 'templates', 'blacklist.pot')
            os.makedirs(os.path.dirname(blacklist_path))
            with open(blacklist_path, 'w', encoding='utf-8') as fd:
                fd.write("""
msgid "O"
msgstr ""

msgid "N"
msgstr ""
                """)
            blacklist = backend.get_blacklist()
            self.assertEqual({'O', 'N'}, blacklist)


if __name__ == '__main__':
    unittest.main()
