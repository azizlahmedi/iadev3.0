# -*- coding: utf-8 -*-
import unittest

import polib
from delia_mlg.backends import SanityBackend, POFileWrapper


class TestSanityBackend(unittest.TestCase):
    def setUp(self):
        super(TestSanityBackend, self).setUp()
        self.backend = SanityBackend()

    def test_has_valid_msgid(self):
        invalids = [
            'a',
            '    ',
            '  ! ',
            ' {0} {2} ',
            ' - ',
            ' |Â ',
            ' : ',
            ' ! ',
            '<< >>:',
            '1234'
            '>   ',
            '  < ',
            '>>> toto',
        ]
        for msgid in invalids:
            self.assertFalse(self.backend.has_valid_msgid(msgid))
        valids = [
            'toto',
            'toto {0} ',
            'toto123',
            ' | y'
        ]
        for msgid in valids:
            self.assertTrue(self.backend.has_valid_msgid(msgid))

    def test_has_valid_msgstr(self):
        self.assertFalse(self.backend.has_valid_msgstr('en', 'toto', ''))
        self.assertTrue(self.backend.has_valid_msgstr('en', 'toto', 'toto'))
        self.assertFalse(self.backend.has_valid_msgstr('en', 'toto', '    '))
        self.assertFalse(self.backend.has_valid_msgstr('en', 'toto', 'yop'))
        self.assertFalse(self.backend.has_valid_msgstr('en', 'a {0}', 'yop'))
        self.assertFalse(self.backend.has_valid_msgstr('en', 'a {0}', 'a {1}'))
        self.assertFalse(self.backend.has_valid_msgstr('fr', 'nimporte', 'whatever'))
        self.assertTrue(self.backend.has_valid_msgstr('en', 'a {0} {1}', 'b {0} {1}'))

    def test_has_valid_args(self):
        self.assertFalse(self.backend.has_valid_args('toto {0}', 'toto'))
        self.assertFalse(self.backend.has_valid_args('toto', 'toto {0}'))
        self.assertFalse(self.backend.has_valid_args('{0}', '{1}'))
        self.assertTrue(self.backend.has_valid_args('{0}', '{0}'))
        self.assertTrue(self.backend.has_valid_args('{0} {1}', '{1} {0}'))

    def test_fix_msgstr(self):
        self.assertEqual((True, 'tat '), self.backend.fix_msgstr('toto', 'tat'))
        self.assertEqual((True, 'tata'), self.backend.fix_msgstr('toto', 'tata '))
        self.assertEqual((False, 'toto'), self.backend.fix_msgstr('toto', 'toto'))
        self.assertEqual((False, 'b'), self.backend.fix_msgstr('a', 'b'))
        self.assertEqual((False, 'tata'), self.backend.fix_msgstr('toto', 'tata'))

    def test_sanityze(self):
        self.assertEqual('tat ', self.backend.sanitize('en', 'toto', 'tat'))

    def test_clean_po(self):
        po = POFileWrapper('test_clean_po.po', 'en')
        ok = polib.POEntry(msgid='toto', msgstr='tata')
        po.append(ok)
        self.assertFalse(self.backend.clean_po(po))
        self.assertEqual(1, len(po))
        self.assertEqual('tata', ok.msgstr)
        ko_1 = polib.POEntry(msgid='tutu', msgstr='ta')
        po.append(ko_1)
        self.assertTrue(self.backend.clean_po(po))
        self.assertEqual(2, len(po))
        self.assertEqual('ta  ', ko_1.msgstr)
        ko_2 = polib.POEntry(msgid='tata', msgstr='tatata')
        po.append(ko_2)
        self.assertTrue(self.backend.clean_po(po))
        self.assertEqual(3, len(po))
        self.assertEqual('', ko_2.msgstr)
        ko_3 = polib.POEntry(msgid='a', msgstr='b')
        po.append(ko_3)
        self.assertTrue(self.backend.clean_po(po))
        self.assertEqual(3, len(po))

    def test_blacklist(self):
        backend = SanityBackend({
            'o',
            'n',
            'tous'
        })
        self.assertFalse(backend.has_valid_msgid('O'))
        self.assertFalse(backend.has_valid_msgid('O '))
        self.assertFalse(backend.has_valid_msgid('tous'))


if __name__ == '__main__':
    unittest.main()
