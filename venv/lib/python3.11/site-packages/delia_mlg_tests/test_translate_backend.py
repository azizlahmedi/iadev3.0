# -*- coding: utf-8 -*-
import fnmatch
import glob
import os
import tempfile
import unittest

import polib

from delia_mlg import consts
from delia_mlg.backends import TranslationBackend, SanityBackend, POFileWrapper, ForceBackend
from .test_global_po_backend import MockSourceBackend


class MockRedisBackend(object):
    def __init__(self, keys_lang=False):
        self.data = {}
        self.keys_lang = keys_lang

    def add_translation(self, msgid, lang, msgstr):
        if lang not in self.data:
            self.data[lang] = {}
        self.data[lang][msgid] = msgstr

    def reset(self):
        self.data = {}

    def get(self, msgid, lang):
        return self.data.get(lang, {}).get(msgid)

    def keys(self, pattern, lang):
        for msgid, msgstr in self.data[lang].items():
            if fnmatch.fnmatch(msgid, pattern):
                if not self.keys_lang:
                    msgstr = None
                yield msgid, msgstr

    def escape(self, msgid):
        return glob.escape(msgid)


class TestTranslateBackend(unittest.TestCase):
    def setUp(self):
        super(TestTranslateBackend, self).setUp()
        self.mock = MockRedisBackend()
        self.backend = TranslationBackend(self.mock, SanityBackend(), ForceBackend(MockSourceBackend(), SanityBackend()))

    def test_translate_po_entry(self):
        self.mock.add_translation('toto', 'en', 'tata')
        entry = polib.POEntry(msgid='tutu')
        self.assertFalse(self.backend.translate_po_entry(entry, 'en'))
        self.assertEqual('', entry.msgstr)
        entry = polib.POEntry(msgid='toto')
        self.assertTrue(self.backend.translate_po_entry(entry, 'en'))
        self.assertEqual('tata', entry.msgstr)

    def test_translate_po_force(self):
        with tempfile.TemporaryDirectory() as tmp:
            po = POFileWrapper(os.path.join(tmp, 'toto.po'), 'en')
            entry = polib.POEntry(msgid='toto', msgstr='tutu')
            po.append(entry)
            self.mock.add_translation('toto', 'en', 'tata')
            self.assertFalse(self.backend.translate_po(po))
            self.assertEqual('tutu', entry.msgstr)
            self.assertTrue(self.backend.translate_po(po, force=True))
            self.assertEqual('tata', entry.msgstr)

    def test_translate_po_pin_comment(self):
        with tempfile.TemporaryDirectory() as tmp:
            po = POFileWrapper(os.path.join(tmp, 'toto.po'), 'en')
            entry = polib.POEntry(msgid='toto', msgstr='tutu', comment=consts.PIN)
            po.append(entry)
            self.mock.add_translation('toto', 'en', 'tata')
            self.assertFalse(self.backend.translate_po(po, force=True))
            self.assertEqual('tutu', entry.msgstr)

    def test_translate_po_pin_tcomment(self):
        with tempfile.TemporaryDirectory() as tmp:
            po = POFileWrapper(os.path.join(tmp, 'toto.po'), 'en')
            entry = polib.POEntry(msgid='toto', msgstr='tutu', tcomment=consts.PIN)
            po.append(entry)
            self.mock.add_translation('toto', 'en', 'tata')
            self.assertFalse(self.backend.translate_po(po, force=True))
            self.assertEqual('tutu', entry.msgstr)

    def test_translate_po(self):
        with tempfile.TemporaryDirectory() as tmp:
            po = POFileWrapper(os.path.join(tmp, 'toto.po'), 'en')
            entry = polib.POEntry(msgid='toto')
            po.append(entry)
            self.mock.add_translation('toto', 'en', 'tata')
            self.assertTrue(self.backend.translate_po(po))
            self.assertEqual('tata', entry.msgstr)

    def test_translate_po_entry_strip(self):
        self.mock.add_translation('des', 'en', 'ofs')
        entry = polib.POEntry(msgid=' des')
        self.assertTrue(self.backend.translate_po_entry(entry, 'en'))
        self.assertEqual(' ofs', entry.msgstr)
        entry = polib.POEntry(msgid='des ')
        self.assertTrue(self.backend.translate_po_entry(entry, 'en'))
        self.assertEqual('ofs ', entry.msgstr)
        entry = polib.POEntry(msgid=' des ')
        self.assertTrue(self.backend.translate_po_entry(entry, 'en'))
        self.assertEqual(' ofs ', entry.msgstr)

    def test_translate_po_entry_lookup(self):
        self.mock.add_translation(' des ', 'en', ' ofs ')
        entry = polib.POEntry(msgid='des')
        self.assertTrue(self.backend.translate_po_entry(entry, 'en', lookup=True))
        self.assertEqual('ofs', entry.msgstr)
        self.mock.reset()
        self.mock.add_translation(' des', 'en', ' ofs')
        entry = polib.POEntry(msgid='des')
        self.assertTrue(self.backend.translate_po_entry(entry, 'en', lookup=True))
        self.assertEqual('ofs', entry.msgstr)


if __name__ == '__main__':
    unittest.main()
